{"version":3,"sources":["node_modules/browser-pack/_prelude.js","node_modules/gsap/Draggable.js","node_modules/gsap/Flip.js","node_modules/gsap/dist/gsap.js","node_modules/gsap/utils/matrix.js","node_modules/lazysizes/lazysizes.js","node_modules/lazysizes/plugins/bgset/ls.bgset.js","node_modules/lazysizes/plugins/parent-fit/ls.parent-fit.js","node_modules/ssr-window/ssr-window.esm.js","node_modules/swiper/core/breakpoints/getBreakpoint.js","node_modules/swiper/core/breakpoints/index.js","node_modules/swiper/core/breakpoints/setBreakpoint.js","node_modules/swiper/core/check-overflow/index.js","node_modules/swiper/core/classes/addClasses.js","node_modules/swiper/core/classes/index.js","node_modules/swiper/core/classes/removeClasses.js","node_modules/swiper/core/core.js","node_modules/swiper/core/defaults.js","node_modules/swiper/core/events-emitter.js","node_modules/swiper/core/events/index.js","node_modules/swiper/core/events/onClick.js","node_modules/swiper/core/events/onLoad.js","node_modules/swiper/core/events/onResize.js","node_modules/swiper/core/events/onScroll.js","node_modules/swiper/core/events/onTouchEnd.js","node_modules/swiper/core/events/onTouchMove.js","node_modules/swiper/core/events/onTouchStart.js","node_modules/swiper/core/grab-cursor/index.js","node_modules/swiper/core/grab-cursor/setGrabCursor.js","node_modules/swiper/core/grab-cursor/unsetGrabCursor.js","node_modules/swiper/core/loop/index.js","node_modules/swiper/core/loop/loopCreate.js","node_modules/swiper/core/loop/loopDestroy.js","node_modules/swiper/core/loop/loopFix.js","node_modules/swiper/core/moduleExtendParams.js","node_modules/swiper/core/modules/observer/observer.js","node_modules/swiper/core/modules/resize/resize.js","node_modules/swiper/core/slide/index.js","node_modules/swiper/core/slide/slideNext.js","node_modules/swiper/core/slide/slidePrev.js","node_modules/swiper/core/slide/slideReset.js","node_modules/swiper/core/slide/slideTo.js","node_modules/swiper/core/slide/slideToClickedSlide.js","node_modules/swiper/core/slide/slideToClosest.js","node_modules/swiper/core/slide/slideToLoop.js","node_modules/swiper/core/transition/index.js","node_modules/swiper/core/transition/setTransition.js","node_modules/swiper/core/transition/transitionEmit.js","node_modules/swiper/core/transition/transitionEnd.js","node_modules/swiper/core/transition/transitionStart.js","node_modules/swiper/core/translate/getTranslate.js","node_modules/swiper/core/translate/index.js","node_modules/swiper/core/translate/maxTranslate.js","node_modules/swiper/core/translate/minTranslate.js","node_modules/swiper/core/translate/setTranslate.js","node_modules/swiper/core/translate/translateTo.js","node_modules/swiper/core/update/index.js","node_modules/swiper/core/update/updateActiveIndex.js","node_modules/swiper/core/update/updateAutoHeight.js","node_modules/swiper/core/update/updateClickedSlide.js","node_modules/swiper/core/update/updateProgress.js","node_modules/swiper/core/update/updateSize.js","node_modules/swiper/core/update/updateSlides.js","node_modules/swiper/core/update/updateSlidesClasses.js","node_modules/swiper/core/update/updateSlidesOffset.js","node_modules/swiper/core/update/updateSlidesProgress.js","node_modules/swiper/modules/a11y/a11y.js","node_modules/swiper/modules/autoplay/autoplay.js","node_modules/swiper/modules/controller/controller.js","node_modules/swiper/modules/effect-cards/effect-cards.js","node_modules/swiper/modules/effect-coverflow/effect-coverflow.js","node_modules/swiper/modules/effect-creative/effect-creative.js","node_modules/swiper/modules/effect-cube/effect-cube.js","node_modules/swiper/modules/effect-fade/effect-fade.js","node_modules/swiper/modules/effect-flip/effect-flip.js","node_modules/swiper/modules/free-mode/free-mode.js","node_modules/swiper/modules/grid/grid.js","node_modules/swiper/modules/hash-navigation/hash-navigation.js","node_modules/swiper/modules/history/history.js","node_modules/swiper/modules/keyboard/keyboard.js","node_modules/swiper/modules/manipulation/manipulation.js","node_modules/swiper/modules/manipulation/methods/addSlide.js","node_modules/swiper/modules/manipulation/methods/appendSlide.js","node_modules/swiper/modules/manipulation/methods/prependSlide.js","node_modules/swiper/modules/manipulation/methods/removeAllSlides.js","node_modules/swiper/modules/manipulation/methods/removeSlide.js","node_modules/swiper/modules/mousewheel/mousewheel.js","node_modules/swiper/modules/navigation/navigation.js","node_modules/swiper/modules/pagination/pagination.js","node_modules/swiper/modules/parallax/parallax.js","node_modules/swiper/modules/scrollbar/scrollbar.js","node_modules/swiper/modules/thumbs/thumbs.js","node_modules/swiper/modules/virtual/virtual.js","node_modules/swiper/modules/zoom/zoom.js","node_modules/swiper/shared/classes-to-selector.js","node_modules/swiper/shared/create-element-if-not-defined.js","node_modules/swiper/shared/create-shadow.js","node_modules/swiper/shared/effect-init.js","node_modules/swiper/shared/effect-target.js","node_modules/swiper/shared/effect-virtual-transition-end.js","node_modules/swiper/shared/get-browser.js","node_modules/swiper/shared/get-device.js","node_modules/swiper/shared/get-support.js","node_modules/swiper/shared/process-lazy-preloader.js","node_modules/swiper/shared/utils.js","node_modules/swiper/swiper.esm.js","src/js/_func/_jq/getAppHeight.js","src/js/_func/_jq/getScrollWidth.js","src/js/_func/_jq/headerScrollChange.js","src/js/_func/_jq/menuBtn.js","src/js/_func/_jq/modalMagnific.js","src/js/_func/_jq/scrollTo.js","src/js/common.js"],"names":[],"mappings":"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","file":"common.js","sourcesContent":["(function(){function r(e,n,t){function o(i,f){if(!n[i]){if(!e[i]){var c=\"function\"==typeof require&&require;if(!f&&c)return c(i,!0);if(u)return u(i,!0);var a=new Error(\"Cannot find module '\"+i+\"'\");throw a.code=\"MODULE_NOT_FOUND\",a}var p=n[i]={exports:{}};e[i][0].call(p.exports,function(r){var n=e[i][1][r];return o(n||r)},p,p.exports,r,e,n,t)}return n[i].exports}for(var u=\"function\"==typeof require&&require,i=0;i<t.length;i++)o(t[i]);return o}return r})()","function _assertThisInitialized(self) { if (self === void 0) { throw new ReferenceError(\"this hasn't been initialised - super() hasn't been called\"); } return self; }\n\nfunction _inheritsLoose(subClass, superClass) { subClass.prototype = Object.create(superClass.prototype); subClass.prototype.constructor = subClass; subClass.__proto__ = superClass; }\n\n/*!\n * Draggable 3.11.5\n * https://greensock.com\n *\n * @license Copyright 2008-2023, GreenSock. All rights reserved.\n * Subject to the terms at https://greensock.com/standard-license or for\n * Club GreenSock members, the agreement issued with that membership.\n * @author: Jack Doyle, jack@greensock.com\n */\n\n/* eslint-disable */\nimport { getGlobalMatrix, Matrix2D } from \"./utils/matrix.js\";\n\nvar gsap,\n    _win,\n    _doc,\n    _docElement,\n    _body,\n    _tempDiv,\n    _placeholderDiv,\n    _coreInitted,\n    _checkPrefix,\n    _toArray,\n    _supportsPassive,\n    _isTouchDevice,\n    _touchEventLookup,\n    _isMultiTouching,\n    _isAndroid,\n    InertiaPlugin,\n    _defaultCursor,\n    _supportsPointer,\n    _context,\n    _getStyleSaver,\n    _dragCount = 0,\n    _windowExists = function _windowExists() {\n  return typeof window !== \"undefined\";\n},\n    _getGSAP = function _getGSAP() {\n  return gsap || _windowExists() && (gsap = window.gsap) && gsap.registerPlugin && gsap;\n},\n    _isFunction = function _isFunction(value) {\n  return typeof value === \"function\";\n},\n    _isObject = function _isObject(value) {\n  return typeof value === \"object\";\n},\n    _isUndefined = function _isUndefined(value) {\n  return typeof value === \"undefined\";\n},\n    _emptyFunc = function _emptyFunc() {\n  return false;\n},\n    _transformProp = \"transform\",\n    _transformOriginProp = \"transformOrigin\",\n    _round = function _round(value) {\n  return Math.round(value * 10000) / 10000;\n},\n    _isArray = Array.isArray,\n    _createElement = function _createElement(type, ns) {\n  var e = _doc.createElementNS ? _doc.createElementNS((ns || \"http://www.w3.org/1999/xhtml\").replace(/^https/, \"http\"), type) : _doc.createElement(type); //some servers swap in https for http in the namespace which can break things, making \"style\" inaccessible.\n\n  return e.style ? e : _doc.createElement(type); //some environments won't allow access to the element's style when created with a namespace in which case we default to the standard createElement() to work around the issue. Also note that when GSAP is embedded directly inside an SVG file, createElement() won't allow access to the style object in Firefox (see https://greensock.com/forums/topic/20215-problem-using-tweenmax-in-standalone-self-containing-svg-file-err-cannot-set-property-csstext-of-undefined/).\n},\n    _RAD2DEG = 180 / Math.PI,\n    _bigNum = 1e20,\n    _identityMatrix = new Matrix2D(),\n    _getTime = Date.now || function () {\n  return new Date().getTime();\n},\n    _renderQueue = [],\n    _lookup = {},\n    //when a Draggable is created, the target gets a unique _gsDragID property that allows gets associated with the Draggable instance for quick lookups in Draggable.get(). This avoids circular references that could cause gc problems.\n_lookupCount = 0,\n    _clickableTagExp = /^(?:a|input|textarea|button|select)$/i,\n    _lastDragTime = 0,\n    _temp1 = {},\n    // a simple object we reuse and populate (usually x/y properties) to conserve memory and improve performance.\n_windowProxy = {},\n    //memory/performance optimization - we reuse this object during autoScroll to store window-related bounds/offsets.\n_copy = function _copy(obj, factor) {\n  var copy = {},\n      p;\n\n  for (p in obj) {\n    copy[p] = factor ? obj[p] * factor : obj[p];\n  }\n\n  return copy;\n},\n    _extend = function _extend(obj, defaults) {\n  for (var p in defaults) {\n    if (!(p in obj)) {\n      obj[p] = defaults[p];\n    }\n  }\n\n  return obj;\n},\n    _setTouchActionForAllDescendants = function _setTouchActionForAllDescendants(elements, value) {\n  var i = elements.length,\n      children;\n\n  while (i--) {\n    value ? elements[i].style.touchAction = value : elements[i].style.removeProperty(\"touch-action\");\n    children = elements[i].children;\n    children && children.length && _setTouchActionForAllDescendants(children, value);\n  }\n},\n    _renderQueueTick = function _renderQueueTick() {\n  return _renderQueue.forEach(function (func) {\n    return func();\n  });\n},\n    _addToRenderQueue = function _addToRenderQueue(func) {\n  _renderQueue.push(func);\n\n  if (_renderQueue.length === 1) {\n    gsap.ticker.add(_renderQueueTick);\n  }\n},\n    _renderQueueTimeout = function _renderQueueTimeout() {\n  return !_renderQueue.length && gsap.ticker.remove(_renderQueueTick);\n},\n    _removeFromRenderQueue = function _removeFromRenderQueue(func) {\n  var i = _renderQueue.length;\n\n  while (i--) {\n    if (_renderQueue[i] === func) {\n      _renderQueue.splice(i, 1);\n    }\n  }\n\n  gsap.to(_renderQueueTimeout, {\n    overwrite: true,\n    delay: 15,\n    duration: 0,\n    onComplete: _renderQueueTimeout,\n    data: \"_draggable\"\n  }); //remove the \"tick\" listener only after the render queue is empty for 15 seconds (to improve performance). Adding/removing it constantly for every click/touch wouldn't deliver optimal speed, and we also don't want the ticker to keep calling the render method when things are idle for long periods of time (we want to improve battery life on mobile devices).\n},\n    _setDefaults = function _setDefaults(obj, defaults) {\n  for (var p in defaults) {\n    if (!(p in obj)) {\n      obj[p] = defaults[p];\n    }\n  }\n\n  return obj;\n},\n    _addListener = function _addListener(element, type, func, capture) {\n  if (element.addEventListener) {\n    var touchType = _touchEventLookup[type];\n    capture = capture || (_supportsPassive ? {\n      passive: false\n    } : null);\n    element.addEventListener(touchType || type, func, capture);\n    touchType && type !== touchType && element.addEventListener(type, func, capture); //some browsers actually support both, so must we. But pointer events cover all.\n  }\n},\n    _removeListener = function _removeListener(element, type, func, capture) {\n  if (element.removeEventListener) {\n    var touchType = _touchEventLookup[type];\n    element.removeEventListener(touchType || type, func, capture);\n    touchType && type !== touchType && element.removeEventListener(type, func, capture);\n  }\n},\n    _preventDefault = function _preventDefault(event) {\n  event.preventDefault && event.preventDefault();\n  event.preventManipulation && event.preventManipulation(); //for some Microsoft browsers\n},\n    _hasTouchID = function _hasTouchID(list, ID) {\n  var i = list.length;\n\n  while (i--) {\n    if (list[i].identifier === ID) {\n      return true;\n    }\n  }\n},\n    _onMultiTouchDocumentEnd = function _onMultiTouchDocumentEnd(event) {\n  _isMultiTouching = event.touches && _dragCount < event.touches.length;\n\n  _removeListener(event.target, \"touchend\", _onMultiTouchDocumentEnd);\n},\n    _onMultiTouchDocument = function _onMultiTouchDocument(event) {\n  _isMultiTouching = event.touches && _dragCount < event.touches.length;\n\n  _addListener(event.target, \"touchend\", _onMultiTouchDocumentEnd);\n},\n    _getDocScrollTop = function _getDocScrollTop(doc) {\n  return _win.pageYOffset || doc.scrollTop || doc.documentElement.scrollTop || doc.body.scrollTop || 0;\n},\n    _getDocScrollLeft = function _getDocScrollLeft(doc) {\n  return _win.pageXOffset || doc.scrollLeft || doc.documentElement.scrollLeft || doc.body.scrollLeft || 0;\n},\n    _addScrollListener = function _addScrollListener(e, callback) {\n  _addListener(e, \"scroll\", callback);\n\n  if (!_isRoot(e.parentNode)) {\n    _addScrollListener(e.parentNode, callback);\n  }\n},\n    _removeScrollListener = function _removeScrollListener(e, callback) {\n  _removeListener(e, \"scroll\", callback);\n\n  if (!_isRoot(e.parentNode)) {\n    _removeScrollListener(e.parentNode, callback);\n  }\n},\n    _isRoot = function _isRoot(e) {\n  return !!(!e || e === _docElement || e.nodeType === 9 || e === _doc.body || e === _win || !e.nodeType || !e.parentNode);\n},\n    _getMaxScroll = function _getMaxScroll(element, axis) {\n  var dim = axis === \"x\" ? \"Width\" : \"Height\",\n      scroll = \"scroll\" + dim,\n      client = \"client\" + dim;\n  return Math.max(0, _isRoot(element) ? Math.max(_docElement[scroll], _body[scroll]) - (_win[\"inner\" + dim] || _docElement[client] || _body[client]) : element[scroll] - element[client]);\n},\n    _recordMaxScrolls = function _recordMaxScrolls(e, skipCurrent) {\n  //records _gsMaxScrollX and _gsMaxScrollY properties for the element and all ancestors up the chain so that we can cap it, otherwise dragging beyond the edges with autoScroll on can endlessly scroll.\n  var x = _getMaxScroll(e, \"x\"),\n      y = _getMaxScroll(e, \"y\");\n\n  if (_isRoot(e)) {\n    e = _windowProxy;\n  } else {\n    _recordMaxScrolls(e.parentNode, skipCurrent);\n  }\n\n  e._gsMaxScrollX = x;\n  e._gsMaxScrollY = y;\n\n  if (!skipCurrent) {\n    e._gsScrollX = e.scrollLeft || 0;\n    e._gsScrollY = e.scrollTop || 0;\n  }\n},\n    _setStyle = function _setStyle(element, property, value) {\n  var style = element.style;\n\n  if (!style) {\n    return;\n  }\n\n  if (_isUndefined(style[property])) {\n    property = _checkPrefix(property, element) || property;\n  }\n\n  if (value == null) {\n    style.removeProperty && style.removeProperty(property.replace(/([A-Z])/g, \"-$1\").toLowerCase());\n  } else {\n    style[property] = value;\n  }\n},\n    _getComputedStyle = function _getComputedStyle(element) {\n  return _win.getComputedStyle(element instanceof Element ? element : element.host || (element.parentNode || {}).host || element);\n},\n    //the \"host\" stuff helps to accommodate ShadowDom objects.\n_tempRect = {},\n    //reuse to reduce garbage collection tasks\n_parseRect = function _parseRect(e) {\n  //accepts a DOM element, a mouse event, or a rectangle object and returns the corresponding rectangle with left, right, width, height, top, and bottom properties\n  if (e === _win) {\n    _tempRect.left = _tempRect.top = 0;\n    _tempRect.width = _tempRect.right = _docElement.clientWidth || e.innerWidth || _body.clientWidth || 0;\n    _tempRect.height = _tempRect.bottom = (e.innerHeight || 0) - 20 < _docElement.clientHeight ? _docElement.clientHeight : e.innerHeight || _body.clientHeight || 0;\n    return _tempRect;\n  }\n\n  var doc = e.ownerDocument || _doc,\n      r = !_isUndefined(e.pageX) ? {\n    left: e.pageX - _getDocScrollLeft(doc),\n    top: e.pageY - _getDocScrollTop(doc),\n    right: e.pageX - _getDocScrollLeft(doc) + 1,\n    bottom: e.pageY - _getDocScrollTop(doc) + 1\n  } : !e.nodeType && !_isUndefined(e.left) && !_isUndefined(e.top) ? e : _toArray(e)[0].getBoundingClientRect();\n\n  if (_isUndefined(r.right) && !_isUndefined(r.width)) {\n    r.right = r.left + r.width;\n    r.bottom = r.top + r.height;\n  } else if (_isUndefined(r.width)) {\n    //some browsers don't include width and height properties. We can't just set them directly on r because some browsers throw errors, so create a new generic object.\n    r = {\n      width: r.right - r.left,\n      height: r.bottom - r.top,\n      right: r.right,\n      left: r.left,\n      bottom: r.bottom,\n      top: r.top\n    };\n  }\n\n  return r;\n},\n    _dispatchEvent = function _dispatchEvent(target, type, callbackName) {\n  var vars = target.vars,\n      callback = vars[callbackName],\n      listeners = target._listeners[type],\n      result;\n\n  if (_isFunction(callback)) {\n    result = callback.apply(vars.callbackScope || target, vars[callbackName + \"Params\"] || [target.pointerEvent]);\n  }\n\n  if (listeners && target.dispatchEvent(type) === false) {\n    result = false;\n  }\n\n  return result;\n},\n    _getBounds = function _getBounds(target, context) {\n  //accepts any of the following: a DOM element, jQuery object, selector text, or an object defining bounds as {top, left, width, height} or {minX, maxX, minY, maxY}. Returns an object with left, top, width, and height properties.\n  var e = _toArray(target)[0],\n      top,\n      left,\n      offset;\n\n  if (!e.nodeType && e !== _win) {\n    if (!_isUndefined(target.left)) {\n      offset = {\n        x: 0,\n        y: 0\n      }; //_getOffsetTransformOrigin(context); //the bounds should be relative to the origin\n\n      return {\n        left: target.left - offset.x,\n        top: target.top - offset.y,\n        width: target.width,\n        height: target.height\n      };\n    }\n\n    left = target.min || target.minX || target.minRotation || 0;\n    top = target.min || target.minY || 0;\n    return {\n      left: left,\n      top: top,\n      width: (target.max || target.maxX || target.maxRotation || 0) - left,\n      height: (target.max || target.maxY || 0) - top\n    };\n  }\n\n  return _getElementBounds(e, context);\n},\n    _point1 = {},\n    //we reuse to minimize garbage collection tasks.\n_getElementBounds = function _getElementBounds(element, context) {\n  context = _toArray(context)[0];\n  var isSVG = element.getBBox && element.ownerSVGElement,\n      doc = element.ownerDocument || _doc,\n      left,\n      right,\n      top,\n      bottom,\n      matrix,\n      p1,\n      p2,\n      p3,\n      p4,\n      bbox,\n      width,\n      height,\n      cs;\n\n  if (element === _win) {\n    top = _getDocScrollTop(doc);\n    left = _getDocScrollLeft(doc);\n    right = left + (doc.documentElement.clientWidth || element.innerWidth || doc.body.clientWidth || 0);\n    bottom = top + ((element.innerHeight || 0) - 20 < doc.documentElement.clientHeight ? doc.documentElement.clientHeight : element.innerHeight || doc.body.clientHeight || 0); //some browsers (like Firefox) ignore absolutely positioned elements, and collapse the height of the documentElement, so it could be 8px, for example, if you have just an absolutely positioned div. In that case, we use the innerHeight to resolve this.\n  } else if (context === _win || _isUndefined(context)) {\n    return element.getBoundingClientRect();\n  } else {\n    left = top = 0;\n\n    if (isSVG) {\n      bbox = element.getBBox();\n      width = bbox.width;\n      height = bbox.height;\n    } else {\n      if (element.viewBox && (bbox = element.viewBox.baseVal)) {\n        left = bbox.x || 0;\n        top = bbox.y || 0;\n        width = bbox.width;\n        height = bbox.height;\n      }\n\n      if (!width) {\n        cs = _getComputedStyle(element);\n        bbox = cs.boxSizing === \"border-box\";\n        width = (parseFloat(cs.width) || element.clientWidth || 0) + (bbox ? 0 : parseFloat(cs.borderLeftWidth) + parseFloat(cs.borderRightWidth));\n        height = (parseFloat(cs.height) || element.clientHeight || 0) + (bbox ? 0 : parseFloat(cs.borderTopWidth) + parseFloat(cs.borderBottomWidth));\n      }\n    }\n\n    right = width;\n    bottom = height;\n  }\n\n  if (element === context) {\n    return {\n      left: left,\n      top: top,\n      width: right - left,\n      height: bottom - top\n    };\n  }\n\n  matrix = getGlobalMatrix(context, true).multiply(getGlobalMatrix(element));\n  p1 = matrix.apply({\n    x: left,\n    y: top\n  });\n  p2 = matrix.apply({\n    x: right,\n    y: top\n  });\n  p3 = matrix.apply({\n    x: right,\n    y: bottom\n  });\n  p4 = matrix.apply({\n    x: left,\n    y: bottom\n  });\n  left = Math.min(p1.x, p2.x, p3.x, p4.x);\n  top = Math.min(p1.y, p2.y, p3.y, p4.y);\n  return {\n    left: left,\n    top: top,\n    width: Math.max(p1.x, p2.x, p3.x, p4.x) - left,\n    height: Math.max(p1.y, p2.y, p3.y, p4.y) - top\n  };\n},\n    _parseInertia = function _parseInertia(draggable, snap, max, min, factor, forceZeroVelocity) {\n  var vars = {},\n      a,\n      i,\n      l;\n\n  if (snap) {\n    if (factor !== 1 && snap instanceof Array) {\n      //some data must be altered to make sense, like if the user passes in an array of rotational values in degrees, we must convert it to radians. Or for scrollLeft and scrollTop, we invert the values.\n      vars.end = a = [];\n      l = snap.length;\n\n      if (_isObject(snap[0])) {\n        //if the array is populated with objects, like points ({x:100, y:200}), make copies before multiplying by the factor, otherwise we'll mess up the originals and the user may reuse it elsewhere.\n        for (i = 0; i < l; i++) {\n          a[i] = _copy(snap[i], factor);\n        }\n      } else {\n        for (i = 0; i < l; i++) {\n          a[i] = snap[i] * factor;\n        }\n      }\n\n      max += 1.1; //allow 1.1 pixels of wiggle room when snapping in order to work around some browser inconsistencies in the way bounds are reported which can make them roughly a pixel off. For example, if \"snap:[-$('#menu').width(), 0]\" was defined and #menu had a wrapper that was used as the bounds, some browsers would be one pixel off, making the minimum -752 for example when snap was [-753,0], thus instead of snapping to -753, it would snap to 0 since -753 was below the minimum.\n\n      min -= 1.1;\n    } else if (_isFunction(snap)) {\n      vars.end = function (value) {\n        var result = snap.call(draggable, value),\n            copy,\n            p;\n\n        if (factor !== 1) {\n          if (_isObject(result)) {\n            copy = {};\n\n            for (p in result) {\n              copy[p] = result[p] * factor;\n            }\n\n            result = copy;\n          } else {\n            result *= factor;\n          }\n        }\n\n        return result; //we need to ensure that we can scope the function call to the Draggable instance itself so that users can access important values like maxX, minX, maxY, minY, x, and y from within that function.\n      };\n    } else {\n      vars.end = snap;\n    }\n  }\n\n  if (max || max === 0) {\n    vars.max = max;\n  }\n\n  if (min || min === 0) {\n    vars.min = min;\n  }\n\n  if (forceZeroVelocity) {\n    vars.velocity = 0;\n  }\n\n  return vars;\n},\n    _isClickable = function _isClickable(element) {\n  //sometimes it's convenient to mark an element as clickable by adding a data-clickable=\"true\" attribute (in which case we won't preventDefault() the mouse/touch event). This method checks if the element is an <a>, <input>, or <button> or has an onclick or has the data-clickable or contentEditable attribute set to true (or any of its parent elements).\n  var data;\n  return !element || !element.getAttribute || element === _body ? false : (data = element.getAttribute(\"data-clickable\")) === \"true\" || data !== \"false\" && (element.onclick || _clickableTagExp.test(element.nodeName + \"\") || element.getAttribute(\"contentEditable\") === \"true\") ? true : _isClickable(element.parentNode);\n},\n    _setSelectable = function _setSelectable(elements, selectable) {\n  var i = elements.length,\n      e;\n\n  while (i--) {\n    e = elements[i];\n    e.ondragstart = e.onselectstart = selectable ? null : _emptyFunc;\n    gsap.set(e, {\n      lazy: true,\n      userSelect: selectable ? \"text\" : \"none\"\n    });\n  }\n},\n    _isFixed = function _isFixed(element) {\n  if (_getComputedStyle(element).position === \"fixed\") {\n    return true;\n  }\n\n  element = element.parentNode;\n\n  if (element && element.nodeType === 1) {\n    // avoid document fragments which will throw an error.\n    return _isFixed(element);\n  }\n},\n    _supports3D,\n    _addPaddingBR,\n    //The ScrollProxy class wraps an element's contents into another div (we call it \"content\") that we either add padding when necessary or apply a translate3d() transform in order to overscroll (scroll past the boundaries). This allows us to simply set the scrollTop/scrollLeft (or top/left for easier reverse-axis orientation, which is what we do in Draggable) and it'll do all the work for us. For example, if we tried setting scrollTop to -100 on a normal DOM element, it wouldn't work - it'd look the same as setting it to 0, but if we set scrollTop of a ScrollProxy to -100, it'll give the correct appearance by either setting paddingTop of the wrapper to 100 or applying a 100-pixel translateY.\nScrollProxy = function ScrollProxy(element, vars) {\n  element = gsap.utils.toArray(element)[0];\n  vars = vars || {};\n  var content = document.createElement(\"div\"),\n      style = content.style,\n      node = element.firstChild,\n      offsetTop = 0,\n      offsetLeft = 0,\n      prevTop = element.scrollTop,\n      prevLeft = element.scrollLeft,\n      scrollWidth = element.scrollWidth,\n      scrollHeight = element.scrollHeight,\n      extraPadRight = 0,\n      maxLeft = 0,\n      maxTop = 0,\n      elementWidth,\n      elementHeight,\n      contentHeight,\n      nextNode,\n      transformStart,\n      transformEnd;\n\n  if (_supports3D && vars.force3D !== false) {\n    transformStart = \"translate3d(\";\n    transformEnd = \"px,0px)\";\n  } else if (_transformProp) {\n    transformStart = \"translate(\";\n    transformEnd = \"px)\";\n  }\n\n  this.scrollTop = function (value, force) {\n    if (!arguments.length) {\n      return -this.top();\n    }\n\n    this.top(-value, force);\n  };\n\n  this.scrollLeft = function (value, force) {\n    if (!arguments.length) {\n      return -this.left();\n    }\n\n    this.left(-value, force);\n  };\n\n  this.left = function (value, force) {\n    if (!arguments.length) {\n      return -(element.scrollLeft + offsetLeft);\n    }\n\n    var dif = element.scrollLeft - prevLeft,\n        oldOffset = offsetLeft;\n\n    if ((dif > 2 || dif < -2) && !force) {\n      //if the user interacts with the scrollbar (or something else scrolls it, like the mouse wheel), we should kill any tweens of the ScrollProxy.\n      prevLeft = element.scrollLeft;\n      gsap.killTweensOf(this, {\n        left: 1,\n        scrollLeft: 1\n      });\n      this.left(-prevLeft);\n\n      if (vars.onKill) {\n        vars.onKill();\n      }\n\n      return;\n    }\n\n    value = -value; //invert because scrolling works in the opposite direction\n\n    if (value < 0) {\n      offsetLeft = value - 0.5 | 0;\n      value = 0;\n    } else if (value > maxLeft) {\n      offsetLeft = value - maxLeft | 0;\n      value = maxLeft;\n    } else {\n      offsetLeft = 0;\n    }\n\n    if (offsetLeft || oldOffset) {\n      if (!this._skip) {\n        style[_transformProp] = transformStart + -offsetLeft + \"px,\" + -offsetTop + transformEnd;\n      }\n\n      if (offsetLeft + extraPadRight >= 0) {\n        style.paddingRight = offsetLeft + extraPadRight + \"px\";\n      }\n    }\n\n    element.scrollLeft = value | 0;\n    prevLeft = element.scrollLeft; //don't merge this with the line above because some browsers adjust the scrollLeft after it's set, so in order to be 100% accurate in tracking it, we need to ask the browser to report it.\n  };\n\n  this.top = function (value, force) {\n    if (!arguments.length) {\n      return -(element.scrollTop + offsetTop);\n    }\n\n    var dif = element.scrollTop - prevTop,\n        oldOffset = offsetTop;\n\n    if ((dif > 2 || dif < -2) && !force) {\n      //if the user interacts with the scrollbar (or something else scrolls it, like the mouse wheel), we should kill any tweens of the ScrollProxy.\n      prevTop = element.scrollTop;\n      gsap.killTweensOf(this, {\n        top: 1,\n        scrollTop: 1\n      });\n      this.top(-prevTop);\n\n      if (vars.onKill) {\n        vars.onKill();\n      }\n\n      return;\n    }\n\n    value = -value; //invert because scrolling works in the opposite direction\n\n    if (value < 0) {\n      offsetTop = value - 0.5 | 0;\n      value = 0;\n    } else if (value > maxTop) {\n      offsetTop = value - maxTop | 0;\n      value = maxTop;\n    } else {\n      offsetTop = 0;\n    }\n\n    if (offsetTop || oldOffset) {\n      if (!this._skip) {\n        style[_transformProp] = transformStart + -offsetLeft + \"px,\" + -offsetTop + transformEnd;\n      }\n    }\n\n    element.scrollTop = value | 0;\n    prevTop = element.scrollTop;\n  };\n\n  this.maxScrollTop = function () {\n    return maxTop;\n  };\n\n  this.maxScrollLeft = function () {\n    return maxLeft;\n  };\n\n  this.disable = function () {\n    node = content.firstChild;\n\n    while (node) {\n      nextNode = node.nextSibling;\n      element.appendChild(node);\n      node = nextNode;\n    }\n\n    if (element === content.parentNode) {\n      //in case disable() is called when it's already disabled.\n      element.removeChild(content);\n    }\n  };\n\n  this.enable = function () {\n    node = element.firstChild;\n\n    if (node === content) {\n      return;\n    }\n\n    while (node) {\n      nextNode = node.nextSibling;\n      content.appendChild(node);\n      node = nextNode;\n    }\n\n    element.appendChild(content);\n    this.calibrate();\n  };\n\n  this.calibrate = function (force) {\n    var widthMatches = element.clientWidth === elementWidth,\n        cs,\n        x,\n        y;\n    prevTop = element.scrollTop;\n    prevLeft = element.scrollLeft;\n\n    if (widthMatches && element.clientHeight === elementHeight && content.offsetHeight === contentHeight && scrollWidth === element.scrollWidth && scrollHeight === element.scrollHeight && !force) {\n      return; //no need to recalculate things if the width and height haven't changed.\n    }\n\n    if (offsetTop || offsetLeft) {\n      x = this.left();\n      y = this.top();\n      this.left(-element.scrollLeft);\n      this.top(-element.scrollTop);\n    }\n\n    cs = _getComputedStyle(element); //first, we need to remove any width constraints to see how the content naturally flows so that we can see if it's wider than the containing element. If so, we've got to record the amount of overage so that we can apply that as padding in order for browsers to correctly handle things. Then we switch back to a width of 100% (without that, some browsers don't flow the content correctly)\n\n    if (!widthMatches || force) {\n      style.display = \"block\";\n      style.width = \"auto\";\n      style.paddingRight = \"0px\";\n      extraPadRight = Math.max(0, element.scrollWidth - element.clientWidth); //if the content is wider than the container, we need to add the paddingLeft and paddingRight in order for things to behave correctly.\n\n      if (extraPadRight) {\n        extraPadRight += parseFloat(cs.paddingLeft) + (_addPaddingBR ? parseFloat(cs.paddingRight) : 0);\n      }\n    }\n\n    style.display = \"inline-block\";\n    style.position = \"relative\";\n    style.overflow = \"visible\";\n    style.verticalAlign = \"top\";\n    style.boxSizing = \"content-box\";\n    style.width = \"100%\";\n    style.paddingRight = extraPadRight + \"px\"; //some browsers neglect to factor in the bottom padding when calculating the scrollHeight, so we need to add that padding to the content when that happens. Allow a 2px margin for error\n\n    if (_addPaddingBR) {\n      style.paddingBottom = cs.paddingBottom;\n    }\n\n    elementWidth = element.clientWidth;\n    elementHeight = element.clientHeight;\n    scrollWidth = element.scrollWidth;\n    scrollHeight = element.scrollHeight;\n    maxLeft = element.scrollWidth - elementWidth;\n    maxTop = element.scrollHeight - elementHeight;\n    contentHeight = content.offsetHeight;\n    style.display = \"block\";\n\n    if (x || y) {\n      this.left(x);\n      this.top(y);\n    }\n  };\n\n  this.content = content;\n  this.element = element;\n  this._skip = false;\n  this.enable();\n},\n    _initCore = function _initCore(required) {\n  if (_windowExists() && document.body) {\n    var nav = window && window.navigator;\n    _win = window;\n    _doc = document;\n    _docElement = _doc.documentElement;\n    _body = _doc.body;\n    _tempDiv = _createElement(\"div\");\n    _supportsPointer = !!window.PointerEvent;\n    _placeholderDiv = _createElement(\"div\");\n    _placeholderDiv.style.cssText = \"visibility:hidden;height:1px;top:-1px;pointer-events:none;position:relative;clear:both;cursor:grab\";\n    _defaultCursor = _placeholderDiv.style.cursor === \"grab\" ? \"grab\" : \"move\";\n    _isAndroid = nav && nav.userAgent.toLowerCase().indexOf(\"android\") !== -1; //Android handles touch events in an odd way and it's virtually impossible to \"feature test\" so we resort to UA sniffing\n\n    _isTouchDevice = \"ontouchstart\" in _docElement && \"orientation\" in _win || nav && (nav.MaxTouchPoints > 0 || nav.msMaxTouchPoints > 0);\n\n    _addPaddingBR = function () {\n      //this function is in charge of analyzing browser behavior related to padding. It sets the _addPaddingBR to true if the browser doesn't normally factor in the bottom or right padding on the element inside the scrolling area, and it sets _addPaddingLeft to true if it's a browser that requires the extra offset (offsetLeft) to be added to the paddingRight (like Opera).\n      var div = _createElement(\"div\"),\n          child = _createElement(\"div\"),\n          childStyle = child.style,\n          parent = _body,\n          val;\n\n      childStyle.display = \"inline-block\";\n      childStyle.position = \"relative\";\n      div.style.cssText = \"width:90px;height:40px;padding:10px;overflow:auto;visibility:hidden\";\n      div.appendChild(child);\n      parent.appendChild(div);\n      val = child.offsetHeight + 18 > div.scrollHeight; //div.scrollHeight should be child.offsetHeight + 20 because of the 10px of padding on each side, but some browsers ignore one side. We allow a 2px margin of error.\n\n      parent.removeChild(div);\n      return val;\n    }();\n\n    _touchEventLookup = function (types) {\n      //we create an object that makes it easy to translate touch event types into their \"pointer\" counterparts if we're in a browser that uses those instead. Like IE10 uses \"MSPointerDown\" instead of \"touchstart\", for example.\n      var standard = types.split(\",\"),\n          converted = (\"onpointerdown\" in _tempDiv ? \"pointerdown,pointermove,pointerup,pointercancel\" : \"onmspointerdown\" in _tempDiv ? \"MSPointerDown,MSPointerMove,MSPointerUp,MSPointerCancel\" : types).split(\",\"),\n          obj = {},\n          i = 4;\n\n      while (--i > -1) {\n        obj[standard[i]] = converted[i];\n        obj[converted[i]] = standard[i];\n      } //to avoid problems in iOS 9, test to see if the browser supports the \"passive\" option on addEventListener().\n\n\n      try {\n        _docElement.addEventListener(\"test\", null, Object.defineProperty({}, \"passive\", {\n          get: function get() {\n            _supportsPassive = 1;\n          }\n        }));\n      } catch (e) {}\n\n      return obj;\n    }(\"touchstart,touchmove,touchend,touchcancel\");\n\n    _addListener(_doc, \"touchcancel\", _emptyFunc); //some older Android devices intermittently stop dispatching \"touchmove\" events if we don't listen for \"touchcancel\" on the document. Very strange indeed.\n\n\n    _addListener(_win, \"touchmove\", _emptyFunc); //works around Safari bugs that still allow the page to scroll even when we preventDefault() on the touchmove event.\n\n\n    _body && _body.addEventListener(\"touchstart\", _emptyFunc); //works around Safari bug: https://greensock.com/forums/topic/21450-draggable-in-iframe-on-mobile-is-buggy/\n\n    _addListener(_doc, \"contextmenu\", function () {\n      for (var p in _lookup) {\n        if (_lookup[p].isPressed) {\n          _lookup[p].endDrag();\n        }\n      }\n    });\n\n    gsap = _coreInitted = _getGSAP();\n  }\n\n  if (gsap) {\n    InertiaPlugin = gsap.plugins.inertia;\n\n    _context = gsap.core.context || function () {};\n\n    _checkPrefix = gsap.utils.checkPrefix;\n    _transformProp = _checkPrefix(_transformProp);\n    _transformOriginProp = _checkPrefix(_transformOriginProp);\n    _toArray = gsap.utils.toArray;\n    _getStyleSaver = gsap.core.getStyleSaver;\n    _supports3D = !!_checkPrefix(\"perspective\");\n  } else if (required) {\n    console.warn(\"Please gsap.registerPlugin(Draggable)\");\n  }\n};\n\nvar EventDispatcher = /*#__PURE__*/function () {\n  function EventDispatcher(target) {\n    this._listeners = {};\n    this.target = target || this;\n  }\n\n  var _proto = EventDispatcher.prototype;\n\n  _proto.addEventListener = function addEventListener(type, callback) {\n    var list = this._listeners[type] || (this._listeners[type] = []);\n\n    if (!~list.indexOf(callback)) {\n      list.push(callback);\n    }\n  };\n\n  _proto.removeEventListener = function removeEventListener(type, callback) {\n    var list = this._listeners[type],\n        i = list && list.indexOf(callback);\n    i >= 0 && list.splice(i, 1);\n  };\n\n  _proto.dispatchEvent = function dispatchEvent(type) {\n    var _this = this;\n\n    var result;\n    (this._listeners[type] || []).forEach(function (callback) {\n      return callback.call(_this, {\n        type: type,\n        target: _this.target\n      }) === false && (result = false);\n    });\n    return result; //if any of the callbacks return false, pass that along.\n  };\n\n  return EventDispatcher;\n}();\n\nexport var Draggable = /*#__PURE__*/function (_EventDispatcher) {\n  _inheritsLoose(Draggable, _EventDispatcher);\n\n  function Draggable(target, vars) {\n    var _this2;\n\n    _this2 = _EventDispatcher.call(this) || this;\n    _coreInitted || _initCore(1);\n    target = _toArray(target)[0]; //in case the target is a selector object or selector text\n\n    _this2.styles = _getStyleSaver && _getStyleSaver(target, \"transform,left,top\");\n\n    if (!InertiaPlugin) {\n      InertiaPlugin = gsap.plugins.inertia;\n    }\n\n    _this2.vars = vars = _copy(vars || {});\n    _this2.target = target;\n    _this2.x = _this2.y = _this2.rotation = 0;\n    _this2.dragResistance = parseFloat(vars.dragResistance) || 0;\n    _this2.edgeResistance = isNaN(vars.edgeResistance) ? 1 : parseFloat(vars.edgeResistance) || 0;\n    _this2.lockAxis = vars.lockAxis;\n    _this2.autoScroll = vars.autoScroll || 0;\n    _this2.lockedAxis = null;\n    _this2.allowEventDefault = !!vars.allowEventDefault;\n    gsap.getProperty(target, \"x\"); // to ensure that transforms are instantiated.\n\n    var type = (vars.type || \"x,y\").toLowerCase(),\n        xyMode = ~type.indexOf(\"x\") || ~type.indexOf(\"y\"),\n        rotationMode = type.indexOf(\"rotation\") !== -1,\n        xProp = rotationMode ? \"rotation\" : xyMode ? \"x\" : \"left\",\n        yProp = xyMode ? \"y\" : \"top\",\n        allowX = !!(~type.indexOf(\"x\") || ~type.indexOf(\"left\") || type === \"scroll\"),\n        allowY = !!(~type.indexOf(\"y\") || ~type.indexOf(\"top\") || type === \"scroll\"),\n        minimumMovement = vars.minimumMovement || 2,\n        self = _assertThisInitialized(_this2),\n        triggers = _toArray(vars.trigger || vars.handle || target),\n        killProps = {},\n        dragEndTime = 0,\n        checkAutoScrollBounds = false,\n        autoScrollMarginTop = vars.autoScrollMarginTop || 40,\n        autoScrollMarginRight = vars.autoScrollMarginRight || 40,\n        autoScrollMarginBottom = vars.autoScrollMarginBottom || 40,\n        autoScrollMarginLeft = vars.autoScrollMarginLeft || 40,\n        isClickable = vars.clickableTest || _isClickable,\n        clickTime = 0,\n        gsCache = target._gsap || gsap.core.getCache(target),\n        isFixed = _isFixed(target),\n        getPropAsNum = function getPropAsNum(property, unit) {\n      return parseFloat(gsCache.get(target, property, unit));\n    },\n        ownerDoc = target.ownerDocument || _doc,\n        enabled,\n        scrollProxy,\n        startPointerX,\n        startPointerY,\n        startElementX,\n        startElementY,\n        hasBounds,\n        hasDragCallback,\n        hasMoveCallback,\n        maxX,\n        minX,\n        maxY,\n        minY,\n        touch,\n        touchID,\n        rotationOrigin,\n        dirty,\n        old,\n        snapX,\n        snapY,\n        snapXY,\n        isClicking,\n        touchEventTarget,\n        matrix,\n        interrupted,\n        allowNativeTouchScrolling,\n        touchDragAxis,\n        isDispatching,\n        clickDispatch,\n        trustedClickDispatch,\n        isPreventingDefault,\n        innerMatrix,\n        dragged,\n        onContextMenu = function onContextMenu(e) {\n      //used to prevent long-touch from triggering a context menu.\n      // (self.isPressed && e.which < 2) && self.endDrag() // previously ended drag when context menu was triggered, but instead we should just stop propagation and prevent the default event behavior.\n      _preventDefault(e);\n\n      e.stopImmediatePropagation && e.stopImmediatePropagation();\n      return false;\n    },\n        //this method gets called on every tick of TweenLite.ticker which allows us to synchronize the renders to the core engine (which is typically synchronized with the display refresh via requestAnimationFrame). This is an optimization - it's better than applying the values inside the \"mousemove\" or \"touchmove\" event handler which may get called many times inbetween refreshes.\n    render = function render(suppressEvents) {\n      if (self.autoScroll && self.isDragging && (checkAutoScrollBounds || dirty)) {\n        var e = target,\n            autoScrollFactor = self.autoScroll * 15,\n            //multiplying by 15 just gives us a better \"feel\" speed-wise.\n        parent,\n            isRoot,\n            rect,\n            pointerX,\n            pointerY,\n            changeX,\n            changeY,\n            gap;\n        checkAutoScrollBounds = false;\n        _windowProxy.scrollTop = _win.pageYOffset != null ? _win.pageYOffset : ownerDoc.documentElement.scrollTop != null ? ownerDoc.documentElement.scrollTop : ownerDoc.body.scrollTop;\n        _windowProxy.scrollLeft = _win.pageXOffset != null ? _win.pageXOffset : ownerDoc.documentElement.scrollLeft != null ? ownerDoc.documentElement.scrollLeft : ownerDoc.body.scrollLeft;\n        pointerX = self.pointerX - _windowProxy.scrollLeft;\n        pointerY = self.pointerY - _windowProxy.scrollTop;\n\n        while (e && !isRoot) {\n          //walk up the chain and sense wherever the pointer is within 40px of an edge that's scrollable.\n          isRoot = _isRoot(e.parentNode);\n          parent = isRoot ? _windowProxy : e.parentNode;\n          rect = isRoot ? {\n            bottom: Math.max(_docElement.clientHeight, _win.innerHeight || 0),\n            right: Math.max(_docElement.clientWidth, _win.innerWidth || 0),\n            left: 0,\n            top: 0\n          } : parent.getBoundingClientRect();\n          changeX = changeY = 0;\n\n          if (allowY) {\n            gap = parent._gsMaxScrollY - parent.scrollTop;\n\n            if (gap < 0) {\n              changeY = gap;\n            } else if (pointerY > rect.bottom - autoScrollMarginBottom && gap) {\n              checkAutoScrollBounds = true;\n              changeY = Math.min(gap, autoScrollFactor * (1 - Math.max(0, rect.bottom - pointerY) / autoScrollMarginBottom) | 0);\n            } else if (pointerY < rect.top + autoScrollMarginTop && parent.scrollTop) {\n              checkAutoScrollBounds = true;\n              changeY = -Math.min(parent.scrollTop, autoScrollFactor * (1 - Math.max(0, pointerY - rect.top) / autoScrollMarginTop) | 0);\n            }\n\n            if (changeY) {\n              parent.scrollTop += changeY;\n            }\n          }\n\n          if (allowX) {\n            gap = parent._gsMaxScrollX - parent.scrollLeft;\n\n            if (gap < 0) {\n              changeX = gap;\n            } else if (pointerX > rect.right - autoScrollMarginRight && gap) {\n              checkAutoScrollBounds = true;\n              changeX = Math.min(gap, autoScrollFactor * (1 - Math.max(0, rect.right - pointerX) / autoScrollMarginRight) | 0);\n            } else if (pointerX < rect.left + autoScrollMarginLeft && parent.scrollLeft) {\n              checkAutoScrollBounds = true;\n              changeX = -Math.min(parent.scrollLeft, autoScrollFactor * (1 - Math.max(0, pointerX - rect.left) / autoScrollMarginLeft) | 0);\n            }\n\n            if (changeX) {\n              parent.scrollLeft += changeX;\n            }\n          }\n\n          if (isRoot && (changeX || changeY)) {\n            _win.scrollTo(parent.scrollLeft, parent.scrollTop);\n\n            setPointerPosition(self.pointerX + changeX, self.pointerY + changeY);\n          }\n\n          e = parent;\n        }\n      }\n\n      if (dirty) {\n        var x = self.x,\n            y = self.y;\n\n        if (rotationMode) {\n          self.deltaX = x - parseFloat(gsCache.rotation);\n          self.rotation = x;\n          gsCache.rotation = x + \"deg\";\n          gsCache.renderTransform(1, gsCache);\n        } else {\n          if (scrollProxy) {\n            if (allowY) {\n              self.deltaY = y - scrollProxy.top();\n              scrollProxy.top(y);\n            }\n\n            if (allowX) {\n              self.deltaX = x - scrollProxy.left();\n              scrollProxy.left(x);\n            }\n          } else if (xyMode) {\n            if (allowY) {\n              self.deltaY = y - parseFloat(gsCache.y);\n              gsCache.y = y + \"px\";\n            }\n\n            if (allowX) {\n              self.deltaX = x - parseFloat(gsCache.x);\n              gsCache.x = x + \"px\";\n            }\n\n            gsCache.renderTransform(1, gsCache);\n          } else {\n            if (allowY) {\n              self.deltaY = y - parseFloat(target.style.top || 0);\n              target.style.top = y + \"px\";\n            }\n\n            if (allowX) {\n              self.deltaX = x - parseFloat(target.style.left || 0);\n              target.style.left = x + \"px\";\n            }\n          }\n        }\n\n        if (hasDragCallback && !suppressEvents && !isDispatching) {\n          isDispatching = true; //in case onDrag has an update() call (avoid endless loop)\n\n          if (_dispatchEvent(self, \"drag\", \"onDrag\") === false) {\n            if (allowX) {\n              self.x -= self.deltaX;\n            }\n\n            if (allowY) {\n              self.y -= self.deltaY;\n            }\n\n            render(true);\n          }\n\n          isDispatching = false;\n        }\n      }\n\n      dirty = false;\n    },\n        //copies the x/y from the element (whether that be transforms, top/left, or ScrollProxy's top/left) to the Draggable's x and y (and rotation if necessary) properties so that they reflect reality and it also (optionally) applies any snapping necessary. This is used by the InertiaPlugin tween in an onUpdate to ensure things are synced and snapped.\n    syncXY = function syncXY(skipOnUpdate, skipSnap) {\n      var x = self.x,\n          y = self.y,\n          snappedValue,\n          cs;\n\n      if (!target._gsap) {\n        //just in case the _gsap cache got wiped, like if the user called clearProps on the transform or something (very rare).\n        gsCache = gsap.core.getCache(target);\n      }\n\n      gsCache.uncache && gsap.getProperty(target, \"x\"); // trigger a re-cache\n\n      if (xyMode) {\n        self.x = parseFloat(gsCache.x);\n        self.y = parseFloat(gsCache.y);\n      } else if (rotationMode) {\n        self.x = self.rotation = parseFloat(gsCache.rotation);\n      } else if (scrollProxy) {\n        self.y = scrollProxy.top();\n        self.x = scrollProxy.left();\n      } else {\n        self.y = parseFloat(target.style.top || (cs = _getComputedStyle(target)) && cs.top) || 0;\n        self.x = parseFloat(target.style.left || (cs || {}).left) || 0;\n      }\n\n      if ((snapX || snapY || snapXY) && !skipSnap && (self.isDragging || self.isThrowing)) {\n        if (snapXY) {\n          _temp1.x = self.x;\n          _temp1.y = self.y;\n          snappedValue = snapXY(_temp1);\n\n          if (snappedValue.x !== self.x) {\n            self.x = snappedValue.x;\n            dirty = true;\n          }\n\n          if (snappedValue.y !== self.y) {\n            self.y = snappedValue.y;\n            dirty = true;\n          }\n        }\n\n        if (snapX) {\n          snappedValue = snapX(self.x);\n\n          if (snappedValue !== self.x) {\n            self.x = snappedValue;\n\n            if (rotationMode) {\n              self.rotation = snappedValue;\n            }\n\n            dirty = true;\n          }\n        }\n\n        if (snapY) {\n          snappedValue = snapY(self.y);\n\n          if (snappedValue !== self.y) {\n            self.y = snappedValue;\n          }\n\n          dirty = true;\n        }\n      }\n\n      dirty && render(true);\n\n      if (!skipOnUpdate) {\n        self.deltaX = self.x - x;\n        self.deltaY = self.y - y;\n\n        _dispatchEvent(self, \"throwupdate\", \"onThrowUpdate\");\n      }\n    },\n        buildSnapFunc = function buildSnapFunc(snap, min, max, factor) {\n      if (min == null) {\n        min = -_bigNum;\n      }\n\n      if (max == null) {\n        max = _bigNum;\n      }\n\n      if (_isFunction(snap)) {\n        return function (n) {\n          var edgeTolerance = !self.isPressed ? 1 : 1 - self.edgeResistance; //if we're tweening, disable the edgeTolerance because it's already factored into the tweening values (we don't want to apply it multiple times)\n\n          return snap.call(self, (n > max ? max + (n - max) * edgeTolerance : n < min ? min + (n - min) * edgeTolerance : n) * factor) * factor;\n        };\n      }\n\n      if (_isArray(snap)) {\n        return function (n) {\n          var i = snap.length,\n              closest = 0,\n              absDif = _bigNum,\n              val,\n              dif;\n\n          while (--i > -1) {\n            val = snap[i];\n            dif = val - n;\n\n            if (dif < 0) {\n              dif = -dif;\n            }\n\n            if (dif < absDif && val >= min && val <= max) {\n              closest = i;\n              absDif = dif;\n            }\n          }\n\n          return snap[closest];\n        };\n      }\n\n      return isNaN(snap) ? function (n) {\n        return n;\n      } : function () {\n        return snap * factor;\n      };\n    },\n        buildPointSnapFunc = function buildPointSnapFunc(snap, minX, maxX, minY, maxY, radius, factor) {\n      radius = radius && radius < _bigNum ? radius * radius : _bigNum; //so we don't have to Math.sqrt() in the functions. Performance optimization.\n\n      if (_isFunction(snap)) {\n        return function (point) {\n          var edgeTolerance = !self.isPressed ? 1 : 1 - self.edgeResistance,\n              x = point.x,\n              y = point.y,\n              result,\n              dx,\n              dy; //if we're tweening, disable the edgeTolerance because it's already factored into the tweening values (we don't want to apply it multiple times)\n\n          point.x = x = x > maxX ? maxX + (x - maxX) * edgeTolerance : x < minX ? minX + (x - minX) * edgeTolerance : x;\n          point.y = y = y > maxY ? maxY + (y - maxY) * edgeTolerance : y < minY ? minY + (y - minY) * edgeTolerance : y;\n          result = snap.call(self, point);\n\n          if (result !== point) {\n            point.x = result.x;\n            point.y = result.y;\n          }\n\n          if (factor !== 1) {\n            point.x *= factor;\n            point.y *= factor;\n          }\n\n          if (radius < _bigNum) {\n            dx = point.x - x;\n            dy = point.y - y;\n\n            if (dx * dx + dy * dy > radius) {\n              point.x = x;\n              point.y = y;\n            }\n          }\n\n          return point;\n        };\n      }\n\n      if (_isArray(snap)) {\n        return function (p) {\n          var i = snap.length,\n              closest = 0,\n              minDist = _bigNum,\n              x,\n              y,\n              point,\n              dist;\n\n          while (--i > -1) {\n            point = snap[i];\n            x = point.x - p.x;\n            y = point.y - p.y;\n            dist = x * x + y * y;\n\n            if (dist < minDist) {\n              closest = i;\n              minDist = dist;\n            }\n          }\n\n          return minDist <= radius ? snap[closest] : p;\n        };\n      }\n\n      return function (n) {\n        return n;\n      };\n    },\n        calculateBounds = function calculateBounds() {\n      var bounds, targetBounds, snap, snapIsRaw;\n      hasBounds = false;\n\n      if (scrollProxy) {\n        scrollProxy.calibrate();\n        self.minX = minX = -scrollProxy.maxScrollLeft();\n        self.minY = minY = -scrollProxy.maxScrollTop();\n        self.maxX = maxX = self.maxY = maxY = 0;\n        hasBounds = true;\n      } else if (!!vars.bounds) {\n        bounds = _getBounds(vars.bounds, target.parentNode); //could be a selector/jQuery object or a DOM element or a generic object like {top:0, left:100, width:1000, height:800} or {minX:100, maxX:1100, minY:0, maxY:800}\n\n        if (rotationMode) {\n          self.minX = minX = bounds.left;\n          self.maxX = maxX = bounds.left + bounds.width;\n          self.minY = minY = self.maxY = maxY = 0;\n        } else if (!_isUndefined(vars.bounds.maxX) || !_isUndefined(vars.bounds.maxY)) {\n          bounds = vars.bounds;\n          self.minX = minX = bounds.minX;\n          self.minY = minY = bounds.minY;\n          self.maxX = maxX = bounds.maxX;\n          self.maxY = maxY = bounds.maxY;\n        } else {\n          targetBounds = _getBounds(target, target.parentNode);\n          self.minX = minX = Math.round(getPropAsNum(xProp, \"px\") + bounds.left - targetBounds.left);\n          self.minY = minY = Math.round(getPropAsNum(yProp, \"px\") + bounds.top - targetBounds.top);\n          self.maxX = maxX = Math.round(minX + (bounds.width - targetBounds.width));\n          self.maxY = maxY = Math.round(minY + (bounds.height - targetBounds.height));\n        }\n\n        if (minX > maxX) {\n          self.minX = maxX;\n          self.maxX = maxX = minX;\n          minX = self.minX;\n        }\n\n        if (minY > maxY) {\n          self.minY = maxY;\n          self.maxY = maxY = minY;\n          minY = self.minY;\n        }\n\n        if (rotationMode) {\n          self.minRotation = minX;\n          self.maxRotation = maxX;\n        }\n\n        hasBounds = true;\n      }\n\n      if (vars.liveSnap) {\n        snap = vars.liveSnap === true ? vars.snap || {} : vars.liveSnap;\n        snapIsRaw = _isArray(snap) || _isFunction(snap);\n\n        if (rotationMode) {\n          snapX = buildSnapFunc(snapIsRaw ? snap : snap.rotation, minX, maxX, 1);\n          snapY = null;\n        } else {\n          if (snap.points) {\n            snapXY = buildPointSnapFunc(snapIsRaw ? snap : snap.points, minX, maxX, minY, maxY, snap.radius, scrollProxy ? -1 : 1);\n          } else {\n            if (allowX) {\n              snapX = buildSnapFunc(snapIsRaw ? snap : snap.x || snap.left || snap.scrollLeft, minX, maxX, scrollProxy ? -1 : 1);\n            }\n\n            if (allowY) {\n              snapY = buildSnapFunc(snapIsRaw ? snap : snap.y || snap.top || snap.scrollTop, minY, maxY, scrollProxy ? -1 : 1);\n            }\n          }\n        }\n      }\n    },\n        onThrowComplete = function onThrowComplete() {\n      self.isThrowing = false;\n\n      _dispatchEvent(self, \"throwcomplete\", \"onThrowComplete\");\n    },\n        onThrowInterrupt = function onThrowInterrupt() {\n      self.isThrowing = false;\n    },\n        animate = function animate(inertia, forceZeroVelocity) {\n      var snap, snapIsRaw, tween, overshootTolerance;\n\n      if (inertia && InertiaPlugin) {\n        if (inertia === true) {\n          snap = vars.snap || vars.liveSnap || {};\n          snapIsRaw = _isArray(snap) || _isFunction(snap);\n          inertia = {\n            resistance: (vars.throwResistance || vars.resistance || 1000) / (rotationMode ? 10 : 1)\n          };\n\n          if (rotationMode) {\n            inertia.rotation = _parseInertia(self, snapIsRaw ? snap : snap.rotation, maxX, minX, 1, forceZeroVelocity);\n          } else {\n            if (allowX) {\n              inertia[xProp] = _parseInertia(self, snapIsRaw ? snap : snap.points || snap.x || snap.left, maxX, minX, scrollProxy ? -1 : 1, forceZeroVelocity || self.lockedAxis === \"x\");\n            }\n\n            if (allowY) {\n              inertia[yProp] = _parseInertia(self, snapIsRaw ? snap : snap.points || snap.y || snap.top, maxY, minY, scrollProxy ? -1 : 1, forceZeroVelocity || self.lockedAxis === \"y\");\n            }\n\n            if (snap.points || _isArray(snap) && _isObject(snap[0])) {\n              inertia.linkedProps = xProp + \",\" + yProp;\n              inertia.radius = snap.radius; //note: we also disable liveSnapping while throwing if there's a \"radius\" defined, otherwise it looks weird to have the item thrown past a snapping point but live-snapping mid-tween. We do this by altering the onUpdateParams so that \"skipSnap\" parameter is true for syncXY.\n            }\n          }\n        }\n\n        self.isThrowing = true;\n        overshootTolerance = !isNaN(vars.overshootTolerance) ? vars.overshootTolerance : vars.edgeResistance === 1 ? 0 : 1 - self.edgeResistance + 0.2;\n\n        if (!inertia.duration) {\n          inertia.duration = {\n            max: Math.max(vars.minDuration || 0, \"maxDuration\" in vars ? vars.maxDuration : 2),\n            min: !isNaN(vars.minDuration) ? vars.minDuration : overshootTolerance === 0 || _isObject(inertia) && inertia.resistance > 1000 ? 0 : 0.5,\n            overshoot: overshootTolerance\n          };\n        }\n\n        self.tween = tween = gsap.to(scrollProxy || target, {\n          inertia: inertia,\n          data: \"_draggable\",\n          onComplete: onThrowComplete,\n          onInterrupt: onThrowInterrupt,\n          onUpdate: vars.fastMode ? _dispatchEvent : syncXY,\n          onUpdateParams: vars.fastMode ? [self, \"onthrowupdate\", \"onThrowUpdate\"] : snap && snap.radius ? [false, true] : []\n        });\n\n        if (!vars.fastMode) {\n          if (scrollProxy) {\n            scrollProxy._skip = true; // Microsoft browsers have a bug that causes them to briefly render the position incorrectly (it flashes to the end state when we seek() the tween even though we jump right back to the current position, and this only seems to happen when we're affecting both top and left), so we set a _suspendTransforms flag to prevent it from actually applying the values in the ScrollProxy.\n          }\n\n          tween.render(1e9, true, true); // force to the end. Remember, the duration will likely change upon initting because that's when InertiaPlugin calculates it.\n\n          syncXY(true, true);\n          self.endX = self.x;\n          self.endY = self.y;\n\n          if (rotationMode) {\n            self.endRotation = self.x;\n          }\n\n          tween.play(0);\n          syncXY(true, true);\n\n          if (scrollProxy) {\n            scrollProxy._skip = false; //Microsoft browsers have a bug that causes them to briefly render the position incorrectly (it flashes to the end state when we seek() the tween even though we jump right back to the current position, and this only seems to happen when we're affecting both top and left), so we set a _suspendTransforms flag to prevent it from actually applying the values in the ScrollProxy.\n          }\n        }\n      } else if (hasBounds) {\n        self.applyBounds();\n      }\n    },\n        updateMatrix = function updateMatrix(shiftStart) {\n      var start = matrix,\n          p;\n      matrix = getGlobalMatrix(target.parentNode, true);\n\n      if (shiftStart && self.isPressed && !matrix.equals(start || new Matrix2D())) {\n        //if the matrix changes WHILE the element is pressed, we must adjust the startPointerX and startPointerY accordingly, so we invert the original matrix and figure out where the pointerX and pointerY were in the global space, then apply the new matrix to get the updated coordinates.\n        p = start.inverse().apply({\n          x: startPointerX,\n          y: startPointerY\n        });\n        matrix.apply(p, p);\n        startPointerX = p.x;\n        startPointerY = p.y;\n      }\n\n      if (matrix.equals(_identityMatrix)) {\n        //if there are no transforms, we can optimize performance by not factoring in the matrix\n        matrix = null;\n      }\n    },\n        recordStartPositions = function recordStartPositions() {\n      var edgeTolerance = 1 - self.edgeResistance,\n          offsetX = isFixed ? _getDocScrollLeft(ownerDoc) : 0,\n          offsetY = isFixed ? _getDocScrollTop(ownerDoc) : 0,\n          parsedOrigin,\n          x,\n          y;\n\n      if (xyMode) {\n        // in case the user set it as a different unit, like animating the x to \"100%\". We must convert it back to px!\n        gsCache.x = getPropAsNum(xProp, \"px\") + \"px\";\n        gsCache.y = getPropAsNum(yProp, \"px\") + \"px\";\n        gsCache.renderTransform();\n      }\n\n      updateMatrix(false);\n      _point1.x = self.pointerX - offsetX;\n      _point1.y = self.pointerY - offsetY;\n      matrix && matrix.apply(_point1, _point1);\n      startPointerX = _point1.x; //translate to local coordinate system\n\n      startPointerY = _point1.y;\n\n      if (dirty) {\n        setPointerPosition(self.pointerX, self.pointerY);\n        render(true);\n      }\n\n      innerMatrix = getGlobalMatrix(target);\n\n      if (scrollProxy) {\n        calculateBounds();\n        startElementY = scrollProxy.top();\n        startElementX = scrollProxy.left();\n      } else {\n        //if the element is in the process of tweening, don't force snapping to occur because it could make it jump. Imagine the user throwing, then before it's done, clicking on the element in its inbetween state.\n        if (isTweening()) {\n          syncXY(true, true);\n          calculateBounds();\n        } else {\n          self.applyBounds();\n        }\n\n        if (rotationMode) {\n          parsedOrigin = target.ownerSVGElement ? [gsCache.xOrigin - target.getBBox().x, gsCache.yOrigin - target.getBBox().y] : (_getComputedStyle(target)[_transformOriginProp] || \"0 0\").split(\" \");\n          rotationOrigin = self.rotationOrigin = getGlobalMatrix(target).apply({\n            x: parseFloat(parsedOrigin[0]) || 0,\n            y: parseFloat(parsedOrigin[1]) || 0\n          });\n          syncXY(true, true);\n          x = self.pointerX - rotationOrigin.x - offsetX;\n          y = rotationOrigin.y - self.pointerY + offsetY;\n          startElementX = self.x; //starting rotation (x always refers to rotation in type:\"rotation\", measured in degrees)\n\n          startElementY = self.y = Math.atan2(y, x) * _RAD2DEG;\n        } else {\n          //parent = !isFixed && target.parentNode;\n          //startScrollTop = parent ? parent.scrollTop || 0 : 0;\n          //startScrollLeft = parent ? parent.scrollLeft || 0 : 0;\n          startElementY = getPropAsNum(yProp, \"px\"); //record the starting top and left values so that we can just add the mouse's movement to them later.\n\n          startElementX = getPropAsNum(xProp, \"px\");\n        }\n      }\n\n      if (hasBounds && edgeTolerance) {\n        if (startElementX > maxX) {\n          startElementX = maxX + (startElementX - maxX) / edgeTolerance;\n        } else if (startElementX < minX) {\n          startElementX = minX - (minX - startElementX) / edgeTolerance;\n        }\n\n        if (!rotationMode) {\n          if (startElementY > maxY) {\n            startElementY = maxY + (startElementY - maxY) / edgeTolerance;\n          } else if (startElementY < minY) {\n            startElementY = minY - (minY - startElementY) / edgeTolerance;\n          }\n        }\n      }\n\n      self.startX = startElementX = _round(startElementX);\n      self.startY = startElementY = _round(startElementY);\n    },\n        isTweening = function isTweening() {\n      return self.tween && self.tween.isActive();\n    },\n        removePlaceholder = function removePlaceholder() {\n      if (_placeholderDiv.parentNode && !isTweening() && !self.isDragging) {\n        //_placeholderDiv just props open auto-scrolling containers so they don't collapse as the user drags left/up. We remove it after dragging (and throwing, if necessary) finishes.\n        _placeholderDiv.parentNode.removeChild(_placeholderDiv);\n      }\n    },\n        //called when the mouse is pressed (or touch starts)\n    onPress = function onPress(e, force) {\n      var i;\n\n      if (!enabled || self.isPressed || !e || (e.type === \"mousedown\" || e.type === \"pointerdown\") && !force && _getTime() - clickTime < 30 && _touchEventLookup[self.pointerEvent.type]) {\n        //when we DON'T preventDefault() in order to accommodate touch-scrolling and the user just taps, many browsers also fire a mousedown/mouseup sequence AFTER the touchstart/touchend sequence, thus it'd result in two quick \"click\" events being dispatched. This line senses that condition and halts it on the subsequent mousedown.\n        isPreventingDefault && e && enabled && _preventDefault(e); // in some browsers, we must listen for multiple event types like touchstart, pointerdown, mousedown. The first time this function is called, we record whether or not we _preventDefault() so that on duplicate calls, we can do the same if necessary.\n\n        return;\n      }\n\n      interrupted = isTweening();\n      dragged = false; // we need to track whether or not it was dragged in this interaction so that if, for example, the user calls .endDrag() to FORCE it to stop and then they keep the mouse pressed down and eventually release, that would normally cause an onClick but we have to skip it in that case if there was dragging that occurred.\n\n      self.pointerEvent = e;\n\n      if (_touchEventLookup[e.type]) {\n        //note: on iOS, BOTH touchmove and mousemove are dispatched, but the mousemove has pageY and pageX of 0 which would mess up the calculations and needlessly hurt performance.\n        touchEventTarget = ~e.type.indexOf(\"touch\") ? e.currentTarget || e.target : ownerDoc; //pointer-based touches (for Microsoft browsers) don't remain locked to the original target like other browsers, so we must use the document instead. The event type would be \"MSPointerDown\" or \"pointerdown\".\n\n        _addListener(touchEventTarget, \"touchend\", onRelease);\n\n        _addListener(touchEventTarget, \"touchmove\", onMove); // possible future change if PointerEvents are more standardized: https://developer.mozilla.org/en-US/docs/Web/API/Element/setPointerCapture\n\n\n        _addListener(touchEventTarget, \"touchcancel\", onRelease);\n\n        _addListener(ownerDoc, \"touchstart\", _onMultiTouchDocument);\n      } else {\n        touchEventTarget = null;\n\n        _addListener(ownerDoc, \"mousemove\", onMove); //attach these to the document instead of the box itself so that if the user's mouse moves too quickly (and off of the box), things still work.\n\n      }\n\n      touchDragAxis = null;\n\n      if (!_supportsPointer || !touchEventTarget) {\n        _addListener(ownerDoc, \"mouseup\", onRelease);\n\n        e && e.target && _addListener(e.target, \"mouseup\", onRelease); //we also have to listen directly on the element because some browsers don't bubble up the event to the _doc on elements with contentEditable=\"true\"\n      }\n\n      isClicking = isClickable.call(self, e.target) && vars.dragClickables === false && !force;\n\n      if (isClicking) {\n        _addListener(e.target, \"change\", onRelease); //in some browsers, when you mousedown on a <select> element, no mouseup gets dispatched! So we listen for a \"change\" event instead.\n\n\n        _dispatchEvent(self, \"pressInit\", \"onPressInit\");\n\n        _dispatchEvent(self, \"press\", \"onPress\");\n\n        _setSelectable(triggers, true); //accommodates things like inputs and elements with contentEditable=\"true\" (otherwise user couldn't drag to select text)\n\n\n        isPreventingDefault = false;\n        return;\n      }\n\n      allowNativeTouchScrolling = !touchEventTarget || allowX === allowY || self.vars.allowNativeTouchScrolling === false || self.vars.allowContextMenu && e && (e.ctrlKey || e.which > 2) ? false : allowX ? \"y\" : \"x\"; //note: in Chrome, right-clicking (for a context menu) fires onPress and it doesn't have the event.which set properly, so we must look for event.ctrlKey. If the user wants to allow context menus we should of course sense it here and not allow native touch scrolling.\n\n      isPreventingDefault = !allowNativeTouchScrolling && !self.allowEventDefault;\n\n      if (isPreventingDefault) {\n        _preventDefault(e);\n\n        _addListener(_win, \"touchforcechange\", _preventDefault); //works around safari bug: https://greensock.com/forums/topic/21450-draggable-in-iframe-on-mobile-is-buggy/\n\n      }\n\n      if (e.changedTouches) {\n        //touch events store the data slightly differently\n        e = touch = e.changedTouches[0];\n        touchID = e.identifier;\n      } else if (e.pointerId) {\n        touchID = e.pointerId; //for some Microsoft browsers\n      } else {\n        touch = touchID = null;\n      }\n\n      _dragCount++;\n\n      _addToRenderQueue(render); //causes the Draggable to render on each \"tick\" of gsap.ticker (performance optimization - updating values in a mousemove can cause them to happen too frequently, like multiple times between frame redraws which is wasteful, and it also prevents values from updating properly in IE8)\n\n\n      startPointerY = self.pointerY = e.pageY; //record the starting x and y so that we can calculate the movement from the original in _onMouseMove\n\n      startPointerX = self.pointerX = e.pageX;\n\n      _dispatchEvent(self, \"pressInit\", \"onPressInit\");\n\n      if (allowNativeTouchScrolling || self.autoScroll) {\n        _recordMaxScrolls(target.parentNode);\n      }\n\n      if (target.parentNode && self.autoScroll && !scrollProxy && !rotationMode && target.parentNode._gsMaxScrollX && !_placeholderDiv.parentNode && !target.getBBox) {\n        //add a placeholder div to prevent the parent container from collapsing when the user drags the element left.\n        _placeholderDiv.style.width = target.parentNode.scrollWidth + \"px\";\n        target.parentNode.appendChild(_placeholderDiv);\n      }\n\n      recordStartPositions();\n      self.tween && self.tween.kill();\n      self.isThrowing = false;\n      gsap.killTweensOf(scrollProxy || target, killProps, true); //in case the user tries to drag it before the last tween is done.\n\n      scrollProxy && gsap.killTweensOf(target, {\n        scrollTo: 1\n      }, true); //just in case the original target's scroll position is being tweened somewhere else.\n\n      self.tween = self.lockedAxis = null;\n\n      if (vars.zIndexBoost || !rotationMode && !scrollProxy && vars.zIndexBoost !== false) {\n        target.style.zIndex = Draggable.zIndex++;\n      }\n\n      self.isPressed = true;\n      hasDragCallback = !!(vars.onDrag || self._listeners.drag);\n      hasMoveCallback = !!(vars.onMove || self._listeners.move);\n\n      if (vars.cursor !== false || vars.activeCursor) {\n        i = triggers.length;\n\n        while (--i > -1) {\n          gsap.set(triggers[i], {\n            cursor: vars.activeCursor || vars.cursor || (_defaultCursor === \"grab\" ? \"grabbing\" : _defaultCursor)\n          });\n        }\n      }\n\n      _dispatchEvent(self, \"press\", \"onPress\");\n    },\n        //called every time the mouse/touch moves\n    onMove = function onMove(e) {\n      var originalEvent = e,\n          touches,\n          pointerX,\n          pointerY,\n          i,\n          dx,\n          dy;\n\n      if (!enabled || _isMultiTouching || !self.isPressed || !e) {\n        isPreventingDefault && e && enabled && _preventDefault(e); // in some browsers, we must listen for multiple event types like touchmove, pointermove, mousemove. The first time this function is called, we record whether or not we _preventDefault() so that on duplicate calls, we can do the same if necessary.\n\n        return;\n      }\n\n      self.pointerEvent = e;\n      touches = e.changedTouches;\n\n      if (touches) {\n        //touch events store the data slightly differently\n        e = touches[0];\n\n        if (e !== touch && e.identifier !== touchID) {\n          //Usually changedTouches[0] will be what we're looking for, but in case it's not, look through the rest of the array...(and Android browsers don't reuse the event like iOS)\n          i = touches.length;\n\n          while (--i > -1 && (e = touches[i]).identifier !== touchID && e.target !== target) {} // Some Android devices dispatch a touchstart AND pointerdown initially, and then only pointermove thus the touchID may not match because it was grabbed from the touchstart event whereas the pointer event is the one that the browser dispatches for move, so if the event target matches this Draggable's target, let it through.\n\n\n          if (i < 0) {\n            return;\n          }\n        }\n      } else if (e.pointerId && touchID && e.pointerId !== touchID) {\n        //for some Microsoft browsers, we must attach the listener to the doc rather than the trigger so that when the finger moves outside the bounds of the trigger, things still work. So if the event we're receiving has a pointerId that doesn't match the touchID, ignore it (for multi-touch)\n        return;\n      }\n\n      if (touchEventTarget && allowNativeTouchScrolling && !touchDragAxis) {\n        //Android browsers force us to decide on the first \"touchmove\" event if we should allow the default (scrolling) behavior or preventDefault(). Otherwise, a \"touchcancel\" will be fired and then no \"touchmove\" or \"touchend\" will fire during the scrolling (no good).\n        _point1.x = e.pageX - (isFixed ? _getDocScrollLeft(ownerDoc) : 0);\n        _point1.y = e.pageY - (isFixed ? _getDocScrollTop(ownerDoc) : 0);\n        matrix && matrix.apply(_point1, _point1);\n        pointerX = _point1.x;\n        pointerY = _point1.y;\n        dx = Math.abs(pointerX - startPointerX);\n        dy = Math.abs(pointerY - startPointerY);\n\n        if (dx !== dy && (dx > minimumMovement || dy > minimumMovement) || _isAndroid && allowNativeTouchScrolling === touchDragAxis) {\n          touchDragAxis = dx > dy && allowX ? \"x\" : \"y\";\n\n          if (allowNativeTouchScrolling && touchDragAxis !== allowNativeTouchScrolling) {\n            _addListener(_win, \"touchforcechange\", _preventDefault); // prevents native touch scrolling from taking over if the user started dragging in the other direction in iOS Safari\n\n          }\n\n          if (self.vars.lockAxisOnTouchScroll !== false && allowX && allowY) {\n            self.lockedAxis = touchDragAxis === \"x\" ? \"y\" : \"x\";\n            _isFunction(self.vars.onLockAxis) && self.vars.onLockAxis.call(self, originalEvent);\n          }\n\n          if (_isAndroid && allowNativeTouchScrolling === touchDragAxis) {\n            onRelease(originalEvent);\n            return;\n          }\n        }\n      }\n\n      if (!self.allowEventDefault && (!allowNativeTouchScrolling || touchDragAxis && allowNativeTouchScrolling !== touchDragAxis) && originalEvent.cancelable !== false) {\n        _preventDefault(originalEvent);\n\n        isPreventingDefault = true;\n      } else if (isPreventingDefault) {\n        isPreventingDefault = false;\n      }\n\n      if (self.autoScroll) {\n        checkAutoScrollBounds = true;\n      }\n\n      setPointerPosition(e.pageX, e.pageY, hasMoveCallback);\n    },\n        setPointerPosition = function setPointerPosition(pointerX, pointerY, invokeOnMove) {\n      var dragTolerance = 1 - self.dragResistance,\n          edgeTolerance = 1 - self.edgeResistance,\n          prevPointerX = self.pointerX,\n          prevPointerY = self.pointerY,\n          prevStartElementY = startElementY,\n          prevX = self.x,\n          prevY = self.y,\n          prevEndX = self.endX,\n          prevEndY = self.endY,\n          prevEndRotation = self.endRotation,\n          prevDirty = dirty,\n          xChange,\n          yChange,\n          x,\n          y,\n          dif,\n          temp;\n      self.pointerX = pointerX;\n      self.pointerY = pointerY;\n\n      if (isFixed) {\n        pointerX -= _getDocScrollLeft(ownerDoc);\n        pointerY -= _getDocScrollTop(ownerDoc);\n      }\n\n      if (rotationMode) {\n        y = Math.atan2(rotationOrigin.y - pointerY, pointerX - rotationOrigin.x) * _RAD2DEG;\n        dif = self.y - y;\n\n        if (dif > 180) {\n          startElementY -= 360;\n          self.y = y;\n        } else if (dif < -180) {\n          startElementY += 360;\n          self.y = y;\n        }\n\n        if (self.x !== startElementX || Math.abs(startElementY - y) > minimumMovement) {\n          self.y = y;\n          x = startElementX + (startElementY - y) * dragTolerance;\n        } else {\n          x = startElementX;\n        }\n      } else {\n        if (matrix) {\n          temp = pointerX * matrix.a + pointerY * matrix.c + matrix.e;\n          pointerY = pointerX * matrix.b + pointerY * matrix.d + matrix.f;\n          pointerX = temp;\n        }\n\n        yChange = pointerY - startPointerY;\n        xChange = pointerX - startPointerX;\n\n        if (yChange < minimumMovement && yChange > -minimumMovement) {\n          yChange = 0;\n        }\n\n        if (xChange < minimumMovement && xChange > -minimumMovement) {\n          xChange = 0;\n        }\n\n        if ((self.lockAxis || self.lockedAxis) && (xChange || yChange)) {\n          temp = self.lockedAxis;\n\n          if (!temp) {\n            self.lockedAxis = temp = allowX && Math.abs(xChange) > Math.abs(yChange) ? \"y\" : allowY ? \"x\" : null;\n\n            if (temp && _isFunction(self.vars.onLockAxis)) {\n              self.vars.onLockAxis.call(self, self.pointerEvent);\n            }\n          }\n\n          if (temp === \"y\") {\n            yChange = 0;\n          } else if (temp === \"x\") {\n            xChange = 0;\n          }\n        }\n\n        x = _round(startElementX + xChange * dragTolerance);\n        y = _round(startElementY + yChange * dragTolerance);\n      }\n\n      if ((snapX || snapY || snapXY) && (self.x !== x || self.y !== y && !rotationMode)) {\n        if (snapXY) {\n          _temp1.x = x;\n          _temp1.y = y;\n          temp = snapXY(_temp1);\n          x = _round(temp.x);\n          y = _round(temp.y);\n        }\n\n        if (snapX) {\n          x = _round(snapX(x));\n        }\n\n        if (snapY) {\n          y = _round(snapY(y));\n        }\n      }\n\n      if (hasBounds) {\n        if (x > maxX) {\n          x = maxX + Math.round((x - maxX) * edgeTolerance);\n        } else if (x < minX) {\n          x = minX + Math.round((x - minX) * edgeTolerance);\n        }\n\n        if (!rotationMode) {\n          if (y > maxY) {\n            y = Math.round(maxY + (y - maxY) * edgeTolerance);\n          } else if (y < minY) {\n            y = Math.round(minY + (y - minY) * edgeTolerance);\n          }\n        }\n      }\n\n      if (self.x !== x || self.y !== y && !rotationMode) {\n        if (rotationMode) {\n          self.endRotation = self.x = self.endX = x;\n          dirty = true;\n        } else {\n          if (allowY) {\n            self.y = self.endY = y;\n            dirty = true; //a flag that indicates we need to render the target next time the TweenLite.ticker dispatches a \"tick\" event (typically on a requestAnimationFrame) - this is a performance optimization (we shouldn't render on every move because sometimes many move events can get dispatched between screen refreshes, and that'd be wasteful to render every time)\n          }\n\n          if (allowX) {\n            self.x = self.endX = x;\n            dirty = true;\n          }\n        }\n\n        if (!invokeOnMove || _dispatchEvent(self, \"move\", \"onMove\") !== false) {\n          if (!self.isDragging && self.isPressed) {\n            self.isDragging = dragged = true;\n\n            _dispatchEvent(self, \"dragstart\", \"onDragStart\");\n          }\n        } else {\n          //revert because the onMove returned false!\n          self.pointerX = prevPointerX;\n          self.pointerY = prevPointerY;\n          startElementY = prevStartElementY;\n          self.x = prevX;\n          self.y = prevY;\n          self.endX = prevEndX;\n          self.endY = prevEndY;\n          self.endRotation = prevEndRotation;\n          dirty = prevDirty;\n        }\n      }\n    },\n        //called when the mouse/touch is released\n    onRelease = function onRelease(e, force) {\n      if (!enabled || !self.isPressed || e && touchID != null && !force && (e.pointerId && e.pointerId !== touchID && e.target !== target || e.changedTouches && !_hasTouchID(e.changedTouches, touchID))) {\n        //for some Microsoft browsers, we must attach the listener to the doc rather than the trigger so that when the finger moves outside the bounds of the trigger, things still work. So if the event we're receiving has a pointerId that doesn't match the touchID, ignore it (for multi-touch)\n        isPreventingDefault && e && enabled && _preventDefault(e); // in some browsers, we must listen for multiple event types like touchend, pointerup, mouseup. The first time this function is called, we record whether or not we _preventDefault() so that on duplicate calls, we can do the same if necessary.\n\n        return;\n      }\n\n      self.isPressed = false;\n      var originalEvent = e,\n          wasDragging = self.isDragging,\n          isContextMenuRelease = self.vars.allowContextMenu && e && (e.ctrlKey || e.which > 2),\n          placeholderDelayedCall = gsap.delayedCall(0.001, removePlaceholder),\n          touches,\n          i,\n          syntheticEvent,\n          eventTarget,\n          syntheticClick;\n\n      if (touchEventTarget) {\n        _removeListener(touchEventTarget, \"touchend\", onRelease);\n\n        _removeListener(touchEventTarget, \"touchmove\", onMove);\n\n        _removeListener(touchEventTarget, \"touchcancel\", onRelease);\n\n        _removeListener(ownerDoc, \"touchstart\", _onMultiTouchDocument);\n      } else {\n        _removeListener(ownerDoc, \"mousemove\", onMove);\n      }\n\n      _removeListener(_win, \"touchforcechange\", _preventDefault);\n\n      if (!_supportsPointer || !touchEventTarget) {\n        _removeListener(ownerDoc, \"mouseup\", onRelease);\n\n        e && e.target && _removeListener(e.target, \"mouseup\", onRelease);\n      }\n\n      dirty = false;\n\n      if (wasDragging) {\n        dragEndTime = _lastDragTime = _getTime();\n        self.isDragging = false;\n      }\n\n      _removeFromRenderQueue(render);\n\n      if (isClicking && !isContextMenuRelease) {\n        if (e) {\n          _removeListener(e.target, \"change\", onRelease);\n\n          self.pointerEvent = originalEvent;\n        }\n\n        _setSelectable(triggers, false);\n\n        _dispatchEvent(self, \"release\", \"onRelease\");\n\n        _dispatchEvent(self, \"click\", \"onClick\");\n\n        isClicking = false;\n        return;\n      }\n\n      i = triggers.length;\n\n      while (--i > -1) {\n        _setStyle(triggers[i], \"cursor\", vars.cursor || (vars.cursor !== false ? _defaultCursor : null));\n      }\n\n      _dragCount--;\n\n      if (e) {\n        touches = e.changedTouches;\n\n        if (touches) {\n          //touch events store the data slightly differently\n          e = touches[0];\n\n          if (e !== touch && e.identifier !== touchID) {\n            //Usually changedTouches[0] will be what we're looking for, but in case it's not, look through the rest of the array...(and Android browsers don't reuse the event like iOS)\n            i = touches.length;\n\n            while (--i > -1 && (e = touches[i]).identifier !== touchID && e.target !== target) {}\n\n            if (i < 0 && !force) {\n              return;\n            }\n          }\n        }\n\n        self.pointerEvent = originalEvent;\n        self.pointerX = e.pageX;\n        self.pointerY = e.pageY;\n      }\n\n      if (isContextMenuRelease && originalEvent) {\n        _preventDefault(originalEvent);\n\n        isPreventingDefault = true;\n\n        _dispatchEvent(self, \"release\", \"onRelease\");\n      } else if (originalEvent && !wasDragging) {\n        isPreventingDefault = false;\n\n        if (interrupted && (vars.snap || vars.bounds)) {\n          //otherwise, if the user clicks on the object while it's animating to a snapped position, and then releases without moving 3 pixels, it will just stay there (it should animate/snap)\n          animate(vars.inertia || vars.throwProps);\n        }\n\n        _dispatchEvent(self, \"release\", \"onRelease\");\n\n        if ((!_isAndroid || originalEvent.type !== \"touchmove\") && originalEvent.type.indexOf(\"cancel\") === -1) {\n          //to accommodate native scrolling on Android devices, we have to immediately call onRelease() on the first touchmove event, but that shouldn't trigger a \"click\".\n          _dispatchEvent(self, \"click\", \"onClick\");\n\n          if (_getTime() - clickTime < 300) {\n            _dispatchEvent(self, \"doubleclick\", \"onDoubleClick\");\n          }\n\n          eventTarget = originalEvent.target || target; //old IE uses srcElement\n\n          clickTime = _getTime();\n\n          syntheticClick = function syntheticClick() {\n            // some browsers (like Firefox) won't trust script-generated clicks, so if the user tries to click on a video to play it, for example, it simply won't work. Since a regular \"click\" event will most likely be generated anyway (one that has its isTrusted flag set to true), we must slightly delay our script-generated click so that the \"real\"/trusted one is prioritized. Remember, when there are duplicate events in quick succession, we suppress all but the first one. Some browsers don't even trigger the \"real\" one at all, so our synthetic one is a safety valve that ensures that no matter what, a click event does get dispatched.\n            if (clickTime !== clickDispatch && self.enabled() && !self.isPressed && !originalEvent.defaultPrevented) {\n              if (eventTarget.click) {\n                //some browsers (like mobile Safari) don't properly trigger the click event\n                eventTarget.click();\n              } else if (ownerDoc.createEvent) {\n                syntheticEvent = ownerDoc.createEvent(\"MouseEvents\");\n                syntheticEvent.initMouseEvent(\"click\", true, true, _win, 1, self.pointerEvent.screenX, self.pointerEvent.screenY, self.pointerX, self.pointerY, false, false, false, false, 0, null);\n                eventTarget.dispatchEvent(syntheticEvent);\n              }\n            }\n          };\n\n          if (!_isAndroid && !originalEvent.defaultPrevented) {\n            //iOS Safari requires the synthetic click to happen immediately or else it simply won't work, but Android doesn't play nice.\n            gsap.delayedCall(0.05, syntheticClick); //in addition to the iOS bug workaround, there's a Firefox issue with clicking on things like a video to play, so we must fake a click event in a slightly delayed fashion. Previously, we listened for the \"click\" event with \"capture\" false which solved the video-click-to-play issue, but it would allow the \"click\" event to be dispatched twice like if you were using a jQuery.click() because that was handled in the capture phase, thus we had to switch to the capture phase to avoid the double-dispatching, but do the delayed synthetic click. Don't fire it too fast (like 0.00001) because we want to give the native event a chance to fire first as it's \"trusted\".\n          }\n        }\n      } else {\n        animate(vars.inertia || vars.throwProps); //will skip if inertia/throwProps isn't defined or InertiaPlugin isn't loaded.\n\n        if (!self.allowEventDefault && originalEvent && (vars.dragClickables !== false || !isClickable.call(self, originalEvent.target)) && wasDragging && (!allowNativeTouchScrolling || touchDragAxis && allowNativeTouchScrolling === touchDragAxis) && originalEvent.cancelable !== false) {\n          isPreventingDefault = true;\n\n          _preventDefault(originalEvent);\n        } else {\n          isPreventingDefault = false;\n        }\n\n        _dispatchEvent(self, \"release\", \"onRelease\");\n      }\n\n      isTweening() && placeholderDelayedCall.duration(self.tween.duration()); //sync the timing so that the placeholder DIV gets\n\n      wasDragging && _dispatchEvent(self, \"dragend\", \"onDragEnd\");\n      return true;\n    },\n        updateScroll = function updateScroll(e) {\n      if (e && self.isDragging && !scrollProxy) {\n        var parent = e.target || target.parentNode,\n            deltaX = parent.scrollLeft - parent._gsScrollX,\n            deltaY = parent.scrollTop - parent._gsScrollY;\n\n        if (deltaX || deltaY) {\n          if (matrix) {\n            startPointerX -= deltaX * matrix.a + deltaY * matrix.c;\n            startPointerY -= deltaY * matrix.d + deltaX * matrix.b;\n          } else {\n            startPointerX -= deltaX;\n            startPointerY -= deltaY;\n          }\n\n          parent._gsScrollX += deltaX;\n          parent._gsScrollY += deltaY;\n          setPointerPosition(self.pointerX, self.pointerY);\n        }\n      }\n    },\n        onClick = function onClick(e) {\n      //this was a huge pain in the neck to align all the various browsers and their behaviors. Chrome, Firefox, Safari, Opera, Android, and Microsoft Edge all handle events differently! Some will only trigger native behavior (like checkbox toggling) from trusted events. Others don't even support isTrusted, but require 2 events to flow through before triggering native behavior. Edge treats everything as trusted but also mandates that 2 flow through to trigger the correct native behavior.\n      var time = _getTime(),\n          recentlyClicked = time - clickTime < 100,\n          recentlyDragged = time - dragEndTime < 50,\n          alreadyDispatched = recentlyClicked && clickDispatch === clickTime,\n          defaultPrevented = self.pointerEvent && self.pointerEvent.defaultPrevented,\n          alreadyDispatchedTrusted = recentlyClicked && trustedClickDispatch === clickTime,\n          trusted = e.isTrusted || e.isTrusted == null && recentlyClicked && alreadyDispatched; //note: Safari doesn't support isTrusted, and it won't properly execute native behavior (like toggling checkboxes) on the first synthetic \"click\" event - we must wait for the 2nd and treat it as trusted (but stop propagation at that point). Confusing, I know. Don't you love cross-browser compatibility challenges?\n\n\n      if ((alreadyDispatched || recentlyDragged && self.vars.suppressClickOnDrag !== false) && e.stopImmediatePropagation) {\n        e.stopImmediatePropagation();\n      }\n\n      if (recentlyClicked && !(self.pointerEvent && self.pointerEvent.defaultPrevented) && (!alreadyDispatched || trusted && !alreadyDispatchedTrusted)) {\n        //let the first click pass through unhindered. Let the next one only if it's trusted, then no more (stop quick-succession ones)\n        if (trusted && alreadyDispatched) {\n          trustedClickDispatch = clickTime;\n        }\n\n        clickDispatch = clickTime;\n        return;\n      }\n\n      if (self.isPressed || recentlyDragged || recentlyClicked) {\n        if (!trusted || !e.detail || !recentlyClicked || defaultPrevented) {\n          _preventDefault(e);\n        }\n      }\n\n      if (!recentlyClicked && !recentlyDragged && !dragged) {\n        // for script-triggered event dispatches, like element.click()\n        e && e.target && (self.pointerEvent = e);\n\n        _dispatchEvent(self, \"click\", \"onClick\");\n      }\n    },\n        localizePoint = function localizePoint(p) {\n      return matrix ? {\n        x: p.x * matrix.a + p.y * matrix.c + matrix.e,\n        y: p.x * matrix.b + p.y * matrix.d + matrix.f\n      } : {\n        x: p.x,\n        y: p.y\n      };\n    };\n\n    old = Draggable.get(target);\n    old && old.kill(); // avoids duplicates (an element can only be controlled by one Draggable)\n    //give the user access to start/stop dragging...\n\n    _this2.startDrag = function (event, align) {\n      var r1, r2, p1, p2;\n      onPress(event || self.pointerEvent, true); //if the pointer isn't on top of the element, adjust things accordingly\n\n      if (align && !self.hitTest(event || self.pointerEvent)) {\n        r1 = _parseRect(event || self.pointerEvent);\n        r2 = _parseRect(target);\n        p1 = localizePoint({\n          x: r1.left + r1.width / 2,\n          y: r1.top + r1.height / 2\n        });\n        p2 = localizePoint({\n          x: r2.left + r2.width / 2,\n          y: r2.top + r2.height / 2\n        });\n        startPointerX -= p1.x - p2.x;\n        startPointerY -= p1.y - p2.y;\n      }\n\n      if (!self.isDragging) {\n        self.isDragging = dragged = true;\n\n        _dispatchEvent(self, \"dragstart\", \"onDragStart\");\n      }\n    };\n\n    _this2.drag = onMove;\n\n    _this2.endDrag = function (e) {\n      return onRelease(e || self.pointerEvent, true);\n    };\n\n    _this2.timeSinceDrag = function () {\n      return self.isDragging ? 0 : (_getTime() - dragEndTime) / 1000;\n    };\n\n    _this2.timeSinceClick = function () {\n      return (_getTime() - clickTime) / 1000;\n    };\n\n    _this2.hitTest = function (target, threshold) {\n      return Draggable.hitTest(self.target, target, threshold);\n    };\n\n    _this2.getDirection = function (from, diagonalThreshold) {\n      //from can be \"start\" (default), \"velocity\", or an element\n      var mode = from === \"velocity\" && InertiaPlugin ? from : _isObject(from) && !rotationMode ? \"element\" : \"start\",\n          xChange,\n          yChange,\n          ratio,\n          direction,\n          r1,\n          r2;\n\n      if (mode === \"element\") {\n        r1 = _parseRect(self.target);\n        r2 = _parseRect(from);\n      }\n\n      xChange = mode === \"start\" ? self.x - startElementX : mode === \"velocity\" ? InertiaPlugin.getVelocity(target, xProp) : r1.left + r1.width / 2 - (r2.left + r2.width / 2);\n\n      if (rotationMode) {\n        return xChange < 0 ? \"counter-clockwise\" : \"clockwise\";\n      } else {\n        diagonalThreshold = diagonalThreshold || 2;\n        yChange = mode === \"start\" ? self.y - startElementY : mode === \"velocity\" ? InertiaPlugin.getVelocity(target, yProp) : r1.top + r1.height / 2 - (r2.top + r2.height / 2);\n        ratio = Math.abs(xChange / yChange);\n        direction = ratio < 1 / diagonalThreshold ? \"\" : xChange < 0 ? \"left\" : \"right\";\n\n        if (ratio < diagonalThreshold) {\n          if (direction !== \"\") {\n            direction += \"-\";\n          }\n\n          direction += yChange < 0 ? \"up\" : \"down\";\n        }\n      }\n\n      return direction;\n    };\n\n    _this2.applyBounds = function (newBounds, sticky) {\n      var x, y, forceZeroVelocity, e, parent, isRoot;\n\n      if (newBounds && vars.bounds !== newBounds) {\n        vars.bounds = newBounds;\n        return self.update(true, sticky);\n      }\n\n      syncXY(true);\n      calculateBounds();\n\n      if (hasBounds && !isTweening()) {\n        x = self.x;\n        y = self.y;\n\n        if (x > maxX) {\n          x = maxX;\n        } else if (x < minX) {\n          x = minX;\n        }\n\n        if (y > maxY) {\n          y = maxY;\n        } else if (y < minY) {\n          y = minY;\n        }\n\n        if (self.x !== x || self.y !== y) {\n          forceZeroVelocity = true;\n          self.x = self.endX = x;\n\n          if (rotationMode) {\n            self.endRotation = x;\n          } else {\n            self.y = self.endY = y;\n          }\n\n          dirty = true;\n          render(true);\n\n          if (self.autoScroll && !self.isDragging) {\n            _recordMaxScrolls(target.parentNode);\n\n            e = target;\n            _windowProxy.scrollTop = _win.pageYOffset != null ? _win.pageYOffset : ownerDoc.documentElement.scrollTop != null ? ownerDoc.documentElement.scrollTop : ownerDoc.body.scrollTop;\n            _windowProxy.scrollLeft = _win.pageXOffset != null ? _win.pageXOffset : ownerDoc.documentElement.scrollLeft != null ? ownerDoc.documentElement.scrollLeft : ownerDoc.body.scrollLeft;\n\n            while (e && !isRoot) {\n              //walk up the chain and sense wherever the scrollTop/scrollLeft exceeds the maximum.\n              isRoot = _isRoot(e.parentNode);\n              parent = isRoot ? _windowProxy : e.parentNode;\n\n              if (allowY && parent.scrollTop > parent._gsMaxScrollY) {\n                parent.scrollTop = parent._gsMaxScrollY;\n              }\n\n              if (allowX && parent.scrollLeft > parent._gsMaxScrollX) {\n                parent.scrollLeft = parent._gsMaxScrollX;\n              }\n\n              e = parent;\n            }\n          }\n        }\n\n        if (self.isThrowing && (forceZeroVelocity || self.endX > maxX || self.endX < minX || self.endY > maxY || self.endY < minY)) {\n          animate(vars.inertia || vars.throwProps, forceZeroVelocity);\n        }\n      }\n\n      return self;\n    };\n\n    _this2.update = function (applyBounds, sticky, ignoreExternalChanges) {\n      if (sticky && self.isPressed) {\n        // in case the element was repositioned in the document flow, thus its x/y may be identical but its position is actually quite different.\n        var m = getGlobalMatrix(target),\n            p = innerMatrix.apply({\n          x: self.x - startElementX,\n          y: self.y - startElementY\n        }),\n            m2 = getGlobalMatrix(target.parentNode, true);\n        m2.apply({\n          x: m.e - p.x,\n          y: m.f - p.y\n        }, p);\n        self.x -= p.x - m2.e;\n        self.y -= p.y - m2.f;\n        render(true);\n        recordStartPositions();\n      }\n\n      var x = self.x,\n          y = self.y;\n      updateMatrix(!sticky);\n\n      if (applyBounds) {\n        self.applyBounds();\n      } else {\n        dirty && ignoreExternalChanges && render(true);\n        syncXY(true);\n      }\n\n      if (sticky) {\n        setPointerPosition(self.pointerX, self.pointerY);\n        dirty && render(true);\n      }\n\n      if (self.isPressed && !sticky && (allowX && Math.abs(x - self.x) > 0.01 || allowY && Math.abs(y - self.y) > 0.01 && !rotationMode)) {\n        recordStartPositions();\n      }\n\n      if (self.autoScroll) {\n        _recordMaxScrolls(target.parentNode, self.isDragging);\n\n        checkAutoScrollBounds = self.isDragging;\n        render(true); //in case reparenting occurred.\n\n        _removeScrollListener(target, updateScroll);\n\n        _addScrollListener(target, updateScroll);\n      }\n\n      return self;\n    };\n\n    _this2.enable = function (type) {\n      var setVars = {\n        lazy: true\n      },\n          id,\n          i,\n          trigger;\n\n      if (vars.cursor !== false) {\n        setVars.cursor = vars.cursor || _defaultCursor;\n      }\n\n      if (gsap.utils.checkPrefix(\"touchCallout\")) {\n        setVars.touchCallout = \"none\";\n      }\n\n      if (type !== \"soft\") {\n        _setTouchActionForAllDescendants(triggers, allowX === allowY ? \"none\" : vars.allowNativeTouchScrolling && target.scrollHeight === target.clientHeight === (target.scrollWidth === target.clientHeight) || vars.allowEventDefault ? \"manipulation\" : allowX ? \"pan-y\" : \"pan-x\"); // Some browsers like Internet Explorer will fire a pointercancel event when the user attempts to drag when touchAction is \"manipulate\" because it's perceived as a pan. If the element has scrollable content in only one direction, we should use pan-x or pan-y accordingly so that the pointercancel doesn't prevent dragging.\n\n\n        i = triggers.length;\n\n        while (--i > -1) {\n          trigger = triggers[i];\n          _supportsPointer || _addListener(trigger, \"mousedown\", onPress);\n\n          _addListener(trigger, \"touchstart\", onPress);\n\n          _addListener(trigger, \"click\", onClick, true); // note: used to pass true for capture but it prevented click-to-play-video functionality in Firefox.\n\n\n          gsap.set(trigger, setVars);\n\n          if (trigger.getBBox && trigger.ownerSVGElement && allowX !== allowY) {\n            // a bug in chrome doesn't respect touch-action on SVG elements - it only works if we set it on the parent SVG.\n            gsap.set(trigger.ownerSVGElement, {\n              touchAction: vars.allowNativeTouchScrolling || vars.allowEventDefault ? \"manipulation\" : allowX ? \"pan-y\" : \"pan-x\"\n            });\n          }\n\n          vars.allowContextMenu || _addListener(trigger, \"contextmenu\", onContextMenu);\n        }\n\n        _setSelectable(triggers, false);\n      }\n\n      _addScrollListener(target, updateScroll);\n\n      enabled = true;\n\n      if (InertiaPlugin && type !== \"soft\") {\n        InertiaPlugin.track(scrollProxy || target, xyMode ? \"x,y\" : rotationMode ? \"rotation\" : \"top,left\");\n      }\n\n      target._gsDragID = id = \"d\" + _lookupCount++;\n      _lookup[id] = self;\n\n      if (scrollProxy) {\n        scrollProxy.enable();\n        scrollProxy.element._gsDragID = id;\n      }\n\n      (vars.bounds || rotationMode) && recordStartPositions();\n      vars.bounds && self.applyBounds();\n      return self;\n    };\n\n    _this2.disable = function (type) {\n      var dragging = self.isDragging,\n          i = triggers.length,\n          trigger;\n\n      while (--i > -1) {\n        _setStyle(triggers[i], \"cursor\", null);\n      }\n\n      if (type !== \"soft\") {\n        _setTouchActionForAllDescendants(triggers, null);\n\n        i = triggers.length;\n\n        while (--i > -1) {\n          trigger = triggers[i];\n\n          _setStyle(trigger, \"touchCallout\", null);\n\n          _removeListener(trigger, \"mousedown\", onPress);\n\n          _removeListener(trigger, \"touchstart\", onPress);\n\n          _removeListener(trigger, \"click\", onClick, true);\n\n          _removeListener(trigger, \"contextmenu\", onContextMenu);\n        }\n\n        _setSelectable(triggers, true);\n\n        if (touchEventTarget) {\n          _removeListener(touchEventTarget, \"touchcancel\", onRelease);\n\n          _removeListener(touchEventTarget, \"touchend\", onRelease);\n\n          _removeListener(touchEventTarget, \"touchmove\", onMove);\n        }\n\n        _removeListener(ownerDoc, \"mouseup\", onRelease);\n\n        _removeListener(ownerDoc, \"mousemove\", onMove);\n      }\n\n      _removeScrollListener(target, updateScroll);\n\n      enabled = false;\n      InertiaPlugin && type !== \"soft\" && InertiaPlugin.untrack(scrollProxy || target, xyMode ? \"x,y\" : rotationMode ? \"rotation\" : \"top,left\");\n      scrollProxy && scrollProxy.disable();\n\n      _removeFromRenderQueue(render);\n\n      self.isDragging = self.isPressed = isClicking = false;\n      dragging && _dispatchEvent(self, \"dragend\", \"onDragEnd\");\n      return self;\n    };\n\n    _this2.enabled = function (value, type) {\n      return arguments.length ? value ? self.enable(type) : self.disable(type) : enabled;\n    };\n\n    _this2.kill = function () {\n      self.isThrowing = false;\n      self.tween && self.tween.kill();\n      self.disable();\n      gsap.set(triggers, {\n        clearProps: \"userSelect\"\n      });\n      delete _lookup[target._gsDragID];\n      return self;\n    };\n\n    _this2.revert = function () {\n      this.kill();\n      this.styles && this.styles.revert();\n    };\n\n    if (~type.indexOf(\"scroll\")) {\n      scrollProxy = _this2.scrollProxy = new ScrollProxy(target, _extend({\n        onKill: function onKill() {\n          //ScrollProxy's onKill() gets called if/when the ScrollProxy senses that the user interacted with the scroll position manually (like using the scrollbar). IE9 doesn't fire the \"mouseup\" properly when users drag the scrollbar of an element, so this works around that issue.\n          self.isPressed && onRelease(null);\n        }\n      }, vars)); //a bug in many Android devices' stock browser causes scrollTop to get forced back to 0 after it is altered via JS, so we set overflow to \"hidden\" on mobile/touch devices (they hide the scroll bar anyway). That works around the bug. (This bug is discussed at https://code.google.com/p/android/issues/detail?id=19625)\n\n      target.style.overflowY = allowY && !_isTouchDevice ? \"auto\" : \"hidden\";\n      target.style.overflowX = allowX && !_isTouchDevice ? \"auto\" : \"hidden\";\n      target = scrollProxy.content;\n    }\n\n    if (rotationMode) {\n      killProps.rotation = 1;\n    } else {\n      if (allowX) {\n        killProps[xProp] = 1;\n      }\n\n      if (allowY) {\n        killProps[yProp] = 1;\n      }\n    }\n\n    gsCache.force3D = \"force3D\" in vars ? vars.force3D : true; //otherwise, normal dragging would be in 2D and then as soon as it's released and there's an inertia tween, it'd jump to 3D which can create an initial jump due to the work the browser must to do layerize it.\n\n    _context(_assertThisInitialized(_this2));\n\n    _this2.enable();\n\n    return _this2;\n  }\n\n  Draggable.register = function register(core) {\n    gsap = core;\n\n    _initCore();\n  };\n\n  Draggable.create = function create(targets, vars) {\n    _coreInitted || _initCore(true);\n    return _toArray(targets).map(function (target) {\n      return new Draggable(target, vars);\n    });\n  };\n\n  Draggable.get = function get(target) {\n    return _lookup[(_toArray(target)[0] || {})._gsDragID];\n  };\n\n  Draggable.timeSinceDrag = function timeSinceDrag() {\n    return (_getTime() - _lastDragTime) / 1000;\n  };\n\n  Draggable.hitTest = function hitTest(obj1, obj2, threshold) {\n    if (obj1 === obj2) {\n      return false;\n    }\n\n    var r1 = _parseRect(obj1),\n        r2 = _parseRect(obj2),\n        top = r1.top,\n        left = r1.left,\n        right = r1.right,\n        bottom = r1.bottom,\n        width = r1.width,\n        height = r1.height,\n        isOutside = r2.left > right || r2.right < left || r2.top > bottom || r2.bottom < top,\n        overlap,\n        area,\n        isRatio;\n\n    if (isOutside || !threshold) {\n      return !isOutside;\n    }\n\n    isRatio = (threshold + \"\").indexOf(\"%\") !== -1;\n    threshold = parseFloat(threshold) || 0;\n    overlap = {\n      left: Math.max(left, r2.left),\n      top: Math.max(top, r2.top)\n    };\n    overlap.width = Math.min(right, r2.right) - overlap.left;\n    overlap.height = Math.min(bottom, r2.bottom) - overlap.top;\n\n    if (overlap.width < 0 || overlap.height < 0) {\n      return false;\n    }\n\n    if (isRatio) {\n      threshold *= 0.01;\n      area = overlap.width * overlap.height;\n      return area >= width * height * threshold || area >= r2.width * r2.height * threshold;\n    }\n\n    return overlap.width > threshold && overlap.height > threshold;\n  };\n\n  return Draggable;\n}(EventDispatcher);\n\n_setDefaults(Draggable.prototype, {\n  pointerX: 0,\n  pointerY: 0,\n  startX: 0,\n  startY: 0,\n  deltaX: 0,\n  deltaY: 0,\n  isDragging: false,\n  isPressed: false\n});\n\nDraggable.zIndex = 1000;\nDraggable.version = \"3.11.5\";\n_getGSAP() && gsap.registerPlugin(Draggable);\nexport { Draggable as default };","/*!\n * Flip 3.11.5\n * https://greensock.com\n *\n * @license Copyright 2008-2023, GreenSock. All rights reserved.\n * Subject to the terms at https://greensock.com/standard-license or for\n * Club GreenSock members, the agreement issued with that membership.\n * @author: Jack Doyle, jack@greensock.com\n*/\n\n/* eslint-disable */\nimport { getGlobalMatrix, _getDocScrollTop, _getDocScrollLeft, Matrix2D, _setDoc, _getCTM } from \"./utils/matrix.js\";\n\nvar _id = 1,\n    _toArray,\n    gsap,\n    _batch,\n    _batchAction,\n    _body,\n    _closestTenth,\n    _getStyleSaver,\n    _forEachBatch = function _forEachBatch(batch, name) {\n  return batch.actions.forEach(function (a) {\n    return a.vars[name] && a.vars[name](a);\n  });\n},\n    _batchLookup = {},\n    _RAD2DEG = 180 / Math.PI,\n    _DEG2RAD = Math.PI / 180,\n    _emptyObj = {},\n    _dashedNameLookup = {},\n    _memoizedRemoveProps = {},\n    _listToArray = function _listToArray(list) {\n  return typeof list === \"string\" ? list.split(\" \").join(\"\").split(\",\") : list;\n},\n    // removes extra spaces contaminating the names, returns an Array.\n_callbacks = _listToArray(\"onStart,onUpdate,onComplete,onReverseComplete,onInterrupt\"),\n    _removeProps = _listToArray(\"transform,transformOrigin,width,height,position,top,left,opacity,zIndex,maxWidth,maxHeight,minWidth,minHeight\"),\n    _getEl = function _getEl(target) {\n  return _toArray(target)[0] || console.warn(\"Element not found:\", target);\n},\n    _round = function _round(value) {\n  return Math.round(value * 10000) / 10000 || 0;\n},\n    _toggleClass = function _toggleClass(targets, className, action) {\n  return targets.forEach(function (el) {\n    return el.classList[action](className);\n  });\n},\n    _reserved = {\n  zIndex: 1,\n  kill: 1,\n  simple: 1,\n  spin: 1,\n  clearProps: 1,\n  targets: 1,\n  toggleClass: 1,\n  onComplete: 1,\n  onUpdate: 1,\n  onInterrupt: 1,\n  onStart: 1,\n  delay: 1,\n  repeat: 1,\n  repeatDelay: 1,\n  yoyo: 1,\n  scale: 1,\n  fade: 1,\n  absolute: 1,\n  props: 1,\n  onEnter: 1,\n  onLeave: 1,\n  custom: 1,\n  paused: 1,\n  nested: 1,\n  prune: 1,\n  absoluteOnLeave: 1\n},\n    _fitReserved = {\n  zIndex: 1,\n  simple: 1,\n  clearProps: 1,\n  scale: 1,\n  absolute: 1,\n  fitChild: 1,\n  getVars: 1,\n  props: 1\n},\n    _camelToDashed = function _camelToDashed(p) {\n  return p.replace(/([A-Z])/g, \"-$1\").toLowerCase();\n},\n    _copy = function _copy(obj, exclude) {\n  var result = {},\n      p;\n\n  for (p in obj) {\n    exclude[p] || (result[p] = obj[p]);\n  }\n\n  return result;\n},\n    _memoizedProps = {},\n    _memoizeProps = function _memoizeProps(props) {\n  var p = _memoizedProps[props] = _listToArray(props);\n\n  _memoizedRemoveProps[props] = p.concat(_removeProps);\n  return p;\n},\n    _getInverseGlobalMatrix = function _getInverseGlobalMatrix(el) {\n  // integrates caching for improved performance\n  var cache = el._gsap || gsap.core.getCache(el);\n\n  if (cache.gmCache === gsap.ticker.frame) {\n    return cache.gMatrix;\n  }\n\n  cache.gmCache = gsap.ticker.frame;\n  return cache.gMatrix = getGlobalMatrix(el, true, false, true);\n},\n    _getDOMDepth = function _getDOMDepth(el, invert, level) {\n  if (level === void 0) {\n    level = 0;\n  }\n\n  // In invert is true, the sibling depth is increments of 1, and parent/nesting depth is increments of 1000. This lets us order elements in an Array to reflect document flow.\n  var parent = el.parentNode,\n      inc = 1000 * Math.pow(10, level) * (invert ? -1 : 1),\n      l = invert ? -inc * 900 : 0;\n\n  while (el) {\n    l += inc;\n    el = el.previousSibling;\n  }\n\n  return parent ? l + _getDOMDepth(parent, invert, level + 1) : l;\n},\n    _orderByDOMDepth = function _orderByDOMDepth(comps, invert, isElStates) {\n  comps.forEach(function (comp) {\n    return comp.d = _getDOMDepth(isElStates ? comp.element : comp.t, invert);\n  });\n  comps.sort(function (c1, c2) {\n    return c1.d - c2.d;\n  });\n  return comps;\n},\n    _recordInlineStyles = function _recordInlineStyles(elState, props) {\n  // records the current inline CSS properties into an Array in alternating name/value pairs that's stored in a \"css\" property on the state object so that we can revert later.\n  var style = elState.element.style,\n      a = elState.css = elState.css || [],\n      i = props.length,\n      p,\n      v;\n\n  while (i--) {\n    p = props[i];\n    v = style[p] || style.getPropertyValue(p);\n    a.push(v ? p : _dashedNameLookup[p] || (_dashedNameLookup[p] = _camelToDashed(p)), v);\n  }\n\n  return style;\n},\n    _applyInlineStyles = function _applyInlineStyles(state) {\n  var css = state.css,\n      style = state.element.style,\n      i = 0;\n  state.cache.uncache = 1;\n\n  for (; i < css.length; i += 2) {\n    css[i + 1] ? style[css[i]] = css[i + 1] : style.removeProperty(css[i]);\n  }\n\n  if (!css[css.indexOf(\"transform\") + 1] && style.translate) {\n    // CSSPlugin adds scale, translate, and rotate inline CSS as \"none\" in order to keep CSS rules from contaminating transforms.\n    style.removeProperty(\"translate\");\n    style.removeProperty(\"scale\");\n    style.removeProperty(\"rotate\");\n  }\n},\n    _setFinalStates = function _setFinalStates(comps, onlyTransforms) {\n  comps.forEach(function (c) {\n    return c.a.cache.uncache = 1;\n  });\n  onlyTransforms || comps.finalStates.forEach(_applyInlineStyles);\n},\n    _absoluteProps = \"paddingTop,paddingRight,paddingBottom,paddingLeft,gridArea,transition\".split(\",\"),\n    // properties that we must record just\n_makeAbsolute = function _makeAbsolute(elState, fallbackNode, ignoreBatch) {\n  var element = elState.element,\n      width = elState.width,\n      height = elState.height,\n      uncache = elState.uncache,\n      getProp = elState.getProp,\n      style = element.style,\n      i = 4,\n      result,\n      displayIsNone,\n      cs;\n  typeof fallbackNode !== \"object\" && (fallbackNode = elState);\n\n  if (_batch && ignoreBatch !== 1) {\n    _batch._abs.push({\n      t: element,\n      b: elState,\n      a: elState,\n      sd: 0\n    });\n\n    _batch._final.push(function () {\n      return (elState.cache.uncache = 1) && _applyInlineStyles(elState);\n    });\n\n    return element;\n  }\n\n  displayIsNone = getProp(\"display\") === \"none\";\n\n  if (!elState.isVisible || displayIsNone) {\n    displayIsNone && (_recordInlineStyles(elState, [\"display\"]).display = fallbackNode.display);\n    elState.matrix = fallbackNode.matrix;\n    elState.width = width = elState.width || fallbackNode.width;\n    elState.height = height = elState.height || fallbackNode.height;\n  }\n\n  _recordInlineStyles(elState, _absoluteProps);\n\n  cs = window.getComputedStyle(element);\n\n  while (i--) {\n    style[_absoluteProps[i]] = cs[_absoluteProps[i]]; // record paddings as px-based because if removed from grid, percentage-based ones could be altered.\n  }\n\n  style.gridArea = \"1 / 1 / 1 / 1\";\n  style.transition = \"none\";\n  style.position = \"absolute\";\n  style.width = width + \"px\";\n  style.height = height + \"px\";\n  style.top || (style.top = \"0px\");\n  style.left || (style.left = \"0px\");\n\n  if (uncache) {\n    result = new ElementState(element);\n  } else {\n    // better performance\n    result = _copy(elState, _emptyObj);\n    result.position = \"absolute\";\n\n    if (elState.simple) {\n      var bounds = element.getBoundingClientRect();\n      result.matrix = new Matrix2D(1, 0, 0, 1, bounds.left + _getDocScrollLeft(), bounds.top + _getDocScrollTop());\n    } else {\n      result.matrix = getGlobalMatrix(element, false, false, true);\n    }\n  }\n\n  result = _fit(result, elState, true);\n  elState.x = _closestTenth(result.x, 0.01);\n  elState.y = _closestTenth(result.y, 0.01);\n  return element;\n},\n    _filterComps = function _filterComps(comps, targets) {\n  if (targets !== true) {\n    targets = _toArray(targets);\n    comps = comps.filter(function (c) {\n      if (targets.indexOf((c.sd < 0 ? c.b : c.a).element) !== -1) {\n        return true;\n      } else {\n        c.t._gsap.renderTransform(1); // we must force transforms to render on anything that isn't being made position: absolute, otherwise the absolute position happens and then when animation begins it applies transforms which can create a new stacking context, throwing off positioning!\n\n\n        if (c.b.isVisible) {\n          c.t.style.width = c.b.width + \"px\"; // otherwise things can collapse when contents are made position: absolute.\n\n          c.t.style.height = c.b.height + \"px\";\n        }\n      }\n    });\n  }\n\n  return comps;\n},\n    _makeCompsAbsolute = function _makeCompsAbsolute(comps) {\n  return _orderByDOMDepth(comps, true).forEach(function (c) {\n    return (c.a.isVisible || c.b.isVisible) && _makeAbsolute(c.sd < 0 ? c.b : c.a, c.b, 1);\n  });\n},\n    _findElStateInState = function _findElStateInState(state, other) {\n  return other && state.idLookup[_parseElementState(other).id] || state.elementStates[0];\n},\n    _parseElementState = function _parseElementState(elOrNode, props, simple, other) {\n  return elOrNode instanceof ElementState ? elOrNode : elOrNode instanceof FlipState ? _findElStateInState(elOrNode, other) : new ElementState(typeof elOrNode === \"string\" ? _getEl(elOrNode) || console.warn(elOrNode + \" not found\") : elOrNode, props, simple);\n},\n    _recordProps = function _recordProps(elState, props) {\n  var getProp = gsap.getProperty(elState.element, null, \"native\"),\n      obj = elState.props = {},\n      i = props.length;\n\n  while (i--) {\n    obj[props[i]] = (getProp(props[i]) + \"\").trim();\n  }\n\n  obj.zIndex && (obj.zIndex = parseFloat(obj.zIndex) || 0);\n  return elState;\n},\n    _applyProps = function _applyProps(element, props) {\n  var style = element.style || element,\n      // could pass in a vars object.\n  p;\n\n  for (p in props) {\n    style[p] = props[p];\n  }\n},\n    _getID = function _getID(el) {\n  var id = el.getAttribute(\"data-flip-id\");\n  id || el.setAttribute(\"data-flip-id\", id = \"auto-\" + _id++);\n  return id;\n},\n    _elementsFromElementStates = function _elementsFromElementStates(elStates) {\n  return elStates.map(function (elState) {\n    return elState.element;\n  });\n},\n    _handleCallback = function _handleCallback(callback, elStates, tl) {\n  return callback && elStates.length && tl.add(callback(_elementsFromElementStates(elStates), tl, new FlipState(elStates, 0, true)), 0);\n},\n    _fit = function _fit(fromState, toState, scale, applyProps, fitChild, vars) {\n  var element = fromState.element,\n      cache = fromState.cache,\n      parent = fromState.parent,\n      x = fromState.x,\n      y = fromState.y,\n      width = toState.width,\n      height = toState.height,\n      scaleX = toState.scaleX,\n      scaleY = toState.scaleY,\n      rotation = toState.rotation,\n      bounds = toState.bounds,\n      styles = vars && _getStyleSaver && _getStyleSaver(element, \"transform\"),\n      dimensionState = fromState,\n      _toState$matrix = toState.matrix,\n      e = _toState$matrix.e,\n      f = _toState$matrix.f,\n      deep = fromState.bounds.width !== bounds.width || fromState.bounds.height !== bounds.height || fromState.scaleX !== scaleX || fromState.scaleY !== scaleY || fromState.rotation !== rotation,\n      simple = !deep && fromState.simple && toState.simple && !fitChild,\n      skewX,\n      fromPoint,\n      toPoint,\n      getProp,\n      parentMatrix,\n      matrix,\n      bbox;\n\n  if (simple || !parent) {\n    scaleX = scaleY = 1;\n    rotation = skewX = 0;\n  } else {\n    parentMatrix = _getInverseGlobalMatrix(parent);\n    matrix = parentMatrix.clone().multiply(toState.ctm ? toState.matrix.clone().multiply(toState.ctm) : toState.matrix); // root SVG elements have a ctm that we must factor out (for example, viewBox:\"0 0 94 94\" with a width of 200px would scale the internals by 2.127 but when we're matching the size of the root <svg> element itself, that scaling shouldn't factor in!)\n\n    rotation = _round(Math.atan2(matrix.b, matrix.a) * _RAD2DEG);\n    skewX = _round(Math.atan2(matrix.c, matrix.d) * _RAD2DEG + rotation) % 360; // in very rare cases, minor rounding might end up with 360 which should be 0.\n\n    scaleX = Math.sqrt(Math.pow(matrix.a, 2) + Math.pow(matrix.b, 2));\n    scaleY = Math.sqrt(Math.pow(matrix.c, 2) + Math.pow(matrix.d, 2)) * Math.cos(skewX * _DEG2RAD);\n\n    if (fitChild) {\n      fitChild = _toArray(fitChild)[0];\n      getProp = gsap.getProperty(fitChild);\n      bbox = fitChild.getBBox && typeof fitChild.getBBox === \"function\" && fitChild.getBBox();\n      dimensionState = {\n        scaleX: getProp(\"scaleX\"),\n        scaleY: getProp(\"scaleY\"),\n        width: bbox ? bbox.width : Math.ceil(parseFloat(getProp(\"width\", \"px\"))),\n        height: bbox ? bbox.height : parseFloat(getProp(\"height\", \"px\"))\n      };\n    }\n\n    cache.rotation = rotation + \"deg\";\n    cache.skewX = skewX + \"deg\";\n  }\n\n  if (scale) {\n    scaleX *= width === dimensionState.width || !dimensionState.width ? 1 : width / dimensionState.width; // note if widths are both 0, we should make scaleX 1 - some elements have box-sizing that incorporates padding, etc. and we don't want it to collapse in that case.\n\n    scaleY *= height === dimensionState.height || !dimensionState.height ? 1 : height / dimensionState.height;\n    cache.scaleX = scaleX;\n    cache.scaleY = scaleY;\n  } else {\n    width = _closestTenth(width * scaleX / dimensionState.scaleX, 0);\n    height = _closestTenth(height * scaleY / dimensionState.scaleY, 0);\n    element.style.width = width + \"px\";\n    element.style.height = height + \"px\";\n  } // if (fromState.isFixed) { // commented out because it's now taken care of in getGlobalMatrix() with a flag at the end.\n  // \te -= _getDocScrollLeft();\n  // \tf -= _getDocScrollTop();\n  // }\n\n\n  applyProps && _applyProps(element, toState.props);\n\n  if (simple || !parent) {\n    x += e - fromState.matrix.e;\n    y += f - fromState.matrix.f;\n  } else if (deep || parent !== toState.parent) {\n    cache.renderTransform(1, cache);\n    matrix = getGlobalMatrix(fitChild || element, false, false, true);\n    fromPoint = parentMatrix.apply({\n      x: matrix.e,\n      y: matrix.f\n    });\n    toPoint = parentMatrix.apply({\n      x: e,\n      y: f\n    });\n    x += toPoint.x - fromPoint.x;\n    y += toPoint.y - fromPoint.y;\n  } else {\n    // use a faster/cheaper algorithm if we're just moving x/y\n    parentMatrix.e = parentMatrix.f = 0;\n    toPoint = parentMatrix.apply({\n      x: e - fromState.matrix.e,\n      y: f - fromState.matrix.f\n    });\n    x += toPoint.x;\n    y += toPoint.y;\n  }\n\n  x = _closestTenth(x, 0.02);\n  y = _closestTenth(y, 0.02);\n\n  if (vars && !(vars instanceof ElementState)) {\n    // revert\n    styles && styles.revert();\n  } else {\n    // or apply the transform immediately\n    cache.x = x + \"px\";\n    cache.y = y + \"px\";\n    cache.renderTransform(1, cache);\n  }\n\n  if (vars) {\n    vars.x = x;\n    vars.y = y;\n    vars.rotation = rotation;\n    vars.skewX = skewX;\n\n    if (scale) {\n      vars.scaleX = scaleX;\n      vars.scaleY = scaleY;\n    } else {\n      vars.width = width;\n      vars.height = height;\n    }\n  }\n\n  return vars || cache;\n},\n    _parseState = function _parseState(targetsOrState, vars) {\n  return targetsOrState instanceof FlipState ? targetsOrState : new FlipState(targetsOrState, vars);\n},\n    _getChangingElState = function _getChangingElState(toState, fromState, id) {\n  var to1 = toState.idLookup[id],\n      to2 = toState.alt[id];\n  return to2.isVisible && (!(fromState.getElementState(to2.element) || to2).isVisible || !to1.isVisible) ? to2 : to1;\n},\n    _bodyMetrics = [],\n    _bodyProps = \"width,height,overflowX,overflowY\".split(\",\"),\n    _bodyLocked,\n    _lockBodyScroll = function _lockBodyScroll(lock) {\n  // if there's no scrollbar, we should lock that so that measurements don't get affected by temporary repositioning, like if something is centered in the window.\n  if (lock !== _bodyLocked) {\n    var s = _body.style,\n        w = _body.clientWidth === window.outerWidth,\n        h = _body.clientHeight === window.outerHeight,\n        i = 4;\n\n    if (lock && (w || h)) {\n      while (i--) {\n        _bodyMetrics[i] = s[_bodyProps[i]];\n      }\n\n      if (w) {\n        s.width = _body.clientWidth + \"px\";\n        s.overflowY = \"hidden\";\n      }\n\n      if (h) {\n        s.height = _body.clientHeight + \"px\";\n        s.overflowX = \"hidden\";\n      }\n\n      _bodyLocked = lock;\n    } else if (_bodyLocked) {\n      while (i--) {\n        _bodyMetrics[i] ? s[_bodyProps[i]] = _bodyMetrics[i] : s.removeProperty(_camelToDashed(_bodyProps[i]));\n      }\n\n      _bodyLocked = lock;\n    }\n  }\n},\n    _fromTo = function _fromTo(fromState, toState, vars, relative) {\n  // relative is -1 if \"from()\", and 1 if \"to()\"\n  fromState instanceof FlipState && toState instanceof FlipState || console.warn(\"Not a valid state object.\");\n  vars = vars || {};\n\n  var _vars = vars,\n      clearProps = _vars.clearProps,\n      onEnter = _vars.onEnter,\n      onLeave = _vars.onLeave,\n      absolute = _vars.absolute,\n      absoluteOnLeave = _vars.absoluteOnLeave,\n      custom = _vars.custom,\n      delay = _vars.delay,\n      paused = _vars.paused,\n      repeat = _vars.repeat,\n      repeatDelay = _vars.repeatDelay,\n      yoyo = _vars.yoyo,\n      toggleClass = _vars.toggleClass,\n      nested = _vars.nested,\n      _zIndex = _vars.zIndex,\n      scale = _vars.scale,\n      fade = _vars.fade,\n      stagger = _vars.stagger,\n      spin = _vars.spin,\n      prune = _vars.prune,\n      props = (\"props\" in vars ? vars : fromState).props,\n      tweenVars = _copy(vars, _reserved),\n      animation = gsap.timeline({\n    delay: delay,\n    paused: paused,\n    repeat: repeat,\n    repeatDelay: repeatDelay,\n    yoyo: yoyo,\n    data: \"isFlip\"\n  }),\n      remainingProps = tweenVars,\n      entering = [],\n      leaving = [],\n      comps = [],\n      swapOutTargets = [],\n      spinNum = spin === true ? 1 : spin || 0,\n      spinFunc = typeof spin === \"function\" ? spin : function () {\n    return spinNum;\n  },\n      interrupted = fromState.interrupted || toState.interrupted,\n      addFunc = animation[relative !== 1 ? \"to\" : \"from\"],\n      v,\n      p,\n      endTime,\n      i,\n      el,\n      comp,\n      state,\n      targets,\n      finalStates,\n      fromNode,\n      toNode,\n      run,\n      a,\n      b; //relative || (toState = (new FlipState(toState.targets, {props: props})).fit(toState, scale));\n\n\n  for (p in toState.idLookup) {\n    toNode = !toState.alt[p] ? toState.idLookup[p] : _getChangingElState(toState, fromState, p);\n    el = toNode.element;\n    fromNode = fromState.idLookup[p];\n    fromState.alt[p] && el === fromNode.element && (fromState.alt[p].isVisible || !toNode.isVisible) && (fromNode = fromState.alt[p]);\n\n    if (fromNode) {\n      comp = {\n        t: el,\n        b: fromNode,\n        a: toNode,\n        sd: fromNode.element === el ? 0 : toNode.isVisible ? 1 : -1\n      };\n      comps.push(comp);\n\n      if (comp.sd) {\n        if (comp.sd < 0) {\n          comp.b = toNode;\n          comp.a = fromNode;\n        } // for swapping elements that got interrupted, we must re-record the inline styles to ensure they're not tainted. Remember, .batch() permits getState() not to force in-progress flips to their end state.\n\n\n        interrupted && _recordInlineStyles(comp.b, props ? _memoizedRemoveProps[props] : _removeProps);\n        fade && comps.push(comp.swap = {\n          t: fromNode.element,\n          b: comp.b,\n          a: comp.a,\n          sd: -comp.sd,\n          swap: comp\n        });\n      }\n\n      el._flip = fromNode.element._flip = _batch ? _batch.timeline : animation;\n    } else if (toNode.isVisible) {\n      comps.push({\n        t: el,\n        b: _copy(toNode, {\n          isVisible: 1\n        }),\n        a: toNode,\n        sd: 0,\n        entering: 1\n      }); // to include it in the \"entering\" Array and do absolute positioning if necessary\n\n      el._flip = _batch ? _batch.timeline : animation;\n    }\n  }\n\n  props && (_memoizedProps[props] || _memoizeProps(props)).forEach(function (p) {\n    return tweenVars[p] = function (i) {\n      return comps[i].a.props[p];\n    };\n  });\n  comps.finalStates = finalStates = [];\n\n  run = function run() {\n    _orderByDOMDepth(comps);\n\n    _lockBodyScroll(true); // otherwise, measurements may get thrown off when things get fit.\n    // TODO: cache the matrix, especially for parent because it'll probably get reused quite a bit, but lock it to a particular cycle(?).\n\n\n    for (i = 0; i < comps.length; i++) {\n      comp = comps[i];\n      a = comp.a;\n      b = comp.b;\n\n      if (prune && !a.isDifferent(b) && !comp.entering) {\n        // only flip if things changed! Don't omit it from comps initially because that'd prevent the element from being positioned absolutely (if necessary)\n        comps.splice(i--, 1);\n      } else {\n        el = comp.t;\n        nested && !(comp.sd < 0) && i && (a.matrix = getGlobalMatrix(el, false, false, true)); // moving a parent affects the position of children\n\n        if (b.isVisible && a.isVisible) {\n          if (comp.sd < 0) {\n            // swapping OUT (swap direction of -1 is out)\n            state = new ElementState(el, props, fromState.simple);\n\n            _fit(state, a, scale, 0, 0, state);\n\n            state.matrix = getGlobalMatrix(el, false, false, true);\n            state.css = comp.b.css;\n            comp.a = a = state;\n            fade && (el.style.opacity = interrupted ? b.opacity : a.opacity);\n            stagger && swapOutTargets.push(el);\n          } else if (comp.sd > 0 && fade) {\n            // swapping IN (swap direction of 1 is in)\n            el.style.opacity = interrupted ? a.opacity - b.opacity : \"0\";\n          }\n\n          _fit(a, b, scale, props);\n        } else if (b.isVisible !== a.isVisible) {\n          // either entering or leaving (one side is invisible)\n          if (!b.isVisible) {\n            // entering\n            a.isVisible && entering.push(a);\n            comps.splice(i--, 1);\n          } else if (!a.isVisible) {\n            // leaving\n            b.css = a.css;\n            leaving.push(b);\n            comps.splice(i--, 1);\n            absolute && nested && _fit(a, b, scale, props);\n          }\n        }\n\n        if (!scale) {\n          el.style.maxWidth = Math.max(a.width, b.width) + \"px\";\n          el.style.maxHeight = Math.max(a.height, b.height) + \"px\";\n          el.style.minWidth = Math.min(a.width, b.width) + \"px\";\n          el.style.minHeight = Math.min(a.height, b.height) + \"px\";\n        }\n\n        nested && toggleClass && el.classList.add(toggleClass);\n      }\n\n      finalStates.push(a);\n    }\n\n    var classTargets;\n\n    if (toggleClass) {\n      classTargets = finalStates.map(function (s) {\n        return s.element;\n      });\n      nested && classTargets.forEach(function (e) {\n        return e.classList.remove(toggleClass);\n      }); // there could be a delay, so don't leave the classes applied (we'll do it in a timeline callback)\n    }\n\n    _lockBodyScroll(false);\n\n    if (scale) {\n      tweenVars.scaleX = function (i) {\n        return comps[i].a.scaleX;\n      };\n\n      tweenVars.scaleY = function (i) {\n        return comps[i].a.scaleY;\n      };\n    } else {\n      tweenVars.width = function (i) {\n        return comps[i].a.width + \"px\";\n      };\n\n      tweenVars.height = function (i) {\n        return comps[i].a.height + \"px\";\n      };\n\n      tweenVars.autoRound = vars.autoRound || false;\n    }\n\n    tweenVars.x = function (i) {\n      return comps[i].a.x + \"px\";\n    };\n\n    tweenVars.y = function (i) {\n      return comps[i].a.y + \"px\";\n    };\n\n    tweenVars.rotation = function (i) {\n      return comps[i].a.rotation + (spin ? spinFunc(i, targets[i], targets) * 360 : 0);\n    };\n\n    tweenVars.skewX = function (i) {\n      return comps[i].a.skewX;\n    };\n\n    targets = comps.map(function (c) {\n      return c.t;\n    });\n\n    if (_zIndex || _zIndex === 0) {\n      tweenVars.modifiers = {\n        zIndex: function zIndex() {\n          return _zIndex;\n        }\n      };\n      tweenVars.zIndex = _zIndex;\n      tweenVars.immediateRender = vars.immediateRender !== false;\n    }\n\n    fade && (tweenVars.opacity = function (i) {\n      return comps[i].sd < 0 ? 0 : comps[i].sd > 0 ? comps[i].a.opacity : \"+=0\";\n    });\n\n    if (swapOutTargets.length) {\n      stagger = gsap.utils.distribute(stagger);\n      var dummyArray = targets.slice(swapOutTargets.length);\n\n      tweenVars.stagger = function (i, el) {\n        return stagger(~swapOutTargets.indexOf(el) ? targets.indexOf(comps[i].swap.t) : i, el, dummyArray);\n      };\n    } // // for testing...\n    // gsap.delayedCall(vars.data ? 50 : 1, function() {\n    // \tanimation.eventCallback(\"onComplete\", () => _setFinalStates(comps, !clearProps));\n    // \taddFunc.call(animation, targets, tweenVars, 0).play();\n    // });\n    // return;\n\n\n    _callbacks.forEach(function (name) {\n      return vars[name] && animation.eventCallback(name, vars[name], vars[name + \"Params\"]);\n    }); // apply callbacks to the timeline, not tweens (because \"custom\" timing can make multiple tweens)\n\n\n    if (custom && targets.length) {\n      // bust out the custom properties as their own tweens so they can use different eases, durations, etc.\n      remainingProps = _copy(tweenVars, _reserved);\n\n      if (\"scale\" in custom) {\n        custom.scaleX = custom.scaleY = custom.scale;\n        delete custom.scale;\n      }\n\n      for (p in custom) {\n        v = _copy(custom[p], _fitReserved);\n        v[p] = tweenVars[p];\n        !(\"duration\" in v) && \"duration\" in tweenVars && (v.duration = tweenVars.duration);\n        v.stagger = tweenVars.stagger;\n        addFunc.call(animation, targets, v, 0);\n        delete remainingProps[p];\n      }\n    }\n\n    if (targets.length || leaving.length || entering.length) {\n      toggleClass && animation.add(function () {\n        return _toggleClass(classTargets, toggleClass, animation._zTime < 0 ? \"remove\" : \"add\");\n      }, 0) && !paused && _toggleClass(classTargets, toggleClass, \"add\");\n      targets.length && addFunc.call(animation, targets, remainingProps, 0);\n    }\n\n    _handleCallback(onEnter, entering, animation);\n\n    _handleCallback(onLeave, leaving, animation);\n\n    var batchTl = _batch && _batch.timeline;\n\n    if (batchTl) {\n      batchTl.add(animation, 0);\n\n      _batch._final.push(function () {\n        return _setFinalStates(comps, !clearProps);\n      });\n    }\n\n    endTime = animation.duration();\n    animation.call(function () {\n      var forward = animation.time() >= endTime;\n      forward && !batchTl && _setFinalStates(comps, !clearProps);\n      toggleClass && _toggleClass(classTargets, toggleClass, forward ? \"remove\" : \"add\");\n    });\n  };\n\n  absoluteOnLeave && (absolute = comps.filter(function (comp) {\n    return !comp.sd && !comp.a.isVisible && comp.b.isVisible;\n  }).map(function (comp) {\n    return comp.a.element;\n  }));\n\n  if (_batch) {\n    var _batch$_abs;\n\n    absolute && (_batch$_abs = _batch._abs).push.apply(_batch$_abs, _filterComps(comps, absolute));\n\n    _batch._run.push(run);\n  } else {\n    absolute && _makeCompsAbsolute(_filterComps(comps, absolute)); // when making absolute, we must go in a very particular order so that document flow changes don't affect things. Don't make it visible if both the before and after states are invisible! There's no point, and it could make things appear visible during the flip that shouldn't be.\n\n    run();\n  }\n\n  var anim = _batch ? _batch.timeline : animation;\n\n  anim.revert = function () {\n    return _killFlip(anim, 1);\n  }; // a Flip timeline should behave very different when reverting - it should actually jump to the end so that styles get cleared out.\n\n\n  return anim;\n},\n    _interrupt = function _interrupt(tl) {\n  tl.vars.onInterrupt && tl.vars.onInterrupt.apply(tl, tl.vars.onInterruptParams || []);\n  tl.getChildren(true, false, true).forEach(_interrupt);\n},\n    _killFlip = function _killFlip(tl, action) {\n  // action: 0 = nothing, 1 = complete, 2 = only kill (don't complete)\n  if (tl && tl.progress() < 1 && !tl.paused()) {\n    if (action) {\n      _interrupt(tl);\n\n      action < 2 && tl.progress(1); // we should also kill it in case it was added to a parent timeline.\n\n      tl.kill();\n    }\n\n    return true;\n  }\n},\n    _createLookup = function _createLookup(state) {\n  var lookup = state.idLookup = {},\n      alt = state.alt = {},\n      elStates = state.elementStates,\n      i = elStates.length,\n      elState;\n\n  while (i--) {\n    elState = elStates[i];\n    lookup[elState.id] ? alt[elState.id] = elState : lookup[elState.id] = elState;\n  }\n};\n\nvar FlipState = /*#__PURE__*/function () {\n  function FlipState(targets, vars, targetsAreElementStates) {\n    this.props = vars && vars.props;\n    this.simple = !!(vars && vars.simple);\n\n    if (targetsAreElementStates) {\n      this.targets = _elementsFromElementStates(targets);\n      this.elementStates = targets;\n\n      _createLookup(this);\n    } else {\n      this.targets = _toArray(targets);\n      var soft = vars && (vars.kill === false || vars.batch && !vars.kill);\n      _batch && !soft && _batch._kill.push(this);\n      this.update(soft || !!_batch); // when batching, don't force in-progress flips to their end; we need to do that AFTER all getStates() are called.\n    }\n  }\n\n  var _proto = FlipState.prototype;\n\n  _proto.update = function update(soft) {\n    var _this = this;\n\n    this.elementStates = this.targets.map(function (el) {\n      return new ElementState(el, _this.props, _this.simple);\n    });\n\n    _createLookup(this);\n\n    this.interrupt(soft);\n    this.recordInlineStyles();\n    return this;\n  };\n\n  _proto.clear = function clear() {\n    this.targets.length = this.elementStates.length = 0;\n\n    _createLookup(this);\n\n    return this;\n  };\n\n  _proto.fit = function fit(state, scale, nested) {\n    var elStatesInOrder = _orderByDOMDepth(this.elementStates.slice(0), false, true),\n        toElStates = (state || this).idLookup,\n        i = 0,\n        fromNode,\n        toNode;\n\n    for (; i < elStatesInOrder.length; i++) {\n      fromNode = elStatesInOrder[i];\n      nested && (fromNode.matrix = getGlobalMatrix(fromNode.element, false, false, true)); // moving a parent affects the position of children\n\n      toNode = toElStates[fromNode.id];\n      toNode && _fit(fromNode, toNode, scale, true, 0, fromNode);\n      fromNode.matrix = getGlobalMatrix(fromNode.element, false, false, true);\n    }\n\n    return this;\n  };\n\n  _proto.getProperty = function getProperty(element, property) {\n    var es = this.getElementState(element) || _emptyObj;\n\n    return (property in es ? es : es.props || _emptyObj)[property];\n  };\n\n  _proto.add = function add(state) {\n    var i = state.targets.length,\n        lookup = this.idLookup,\n        alt = this.alt,\n        index,\n        es,\n        es2;\n\n    while (i--) {\n      es = state.elementStates[i];\n      es2 = lookup[es.id];\n\n      if (es2 && (es.element === es2.element || alt[es.id] && alt[es.id].element === es.element)) {\n        // if the flip id is already in this FlipState, replace it!\n        index = this.elementStates.indexOf(es.element === es2.element ? es2 : alt[es.id]);\n        this.targets.splice(index, 1, state.targets[i]);\n        this.elementStates.splice(index, 1, es);\n      } else {\n        this.targets.push(state.targets[i]);\n        this.elementStates.push(es);\n      }\n    }\n\n    state.interrupted && (this.interrupted = true);\n    state.simple || (this.simple = false);\n\n    _createLookup(this);\n\n    return this;\n  };\n\n  _proto.compare = function compare(state) {\n    var l1 = state.idLookup,\n        l2 = this.idLookup,\n        unchanged = [],\n        changed = [],\n        enter = [],\n        leave = [],\n        targets = [],\n        a1 = state.alt,\n        a2 = this.alt,\n        place = function place(s1, s2, el) {\n      return (s1.isVisible !== s2.isVisible ? s1.isVisible ? enter : leave : s1.isVisible ? changed : unchanged).push(el) && targets.push(el);\n    },\n        placeIfDoesNotExist = function placeIfDoesNotExist(s1, s2, el) {\n      return targets.indexOf(el) < 0 && place(s1, s2, el);\n    },\n        s1,\n        s2,\n        p,\n        el,\n        s1Alt,\n        s2Alt,\n        c1,\n        c2;\n\n    for (p in l1) {\n      s1Alt = a1[p];\n      s2Alt = a2[p];\n      s1 = !s1Alt ? l1[p] : _getChangingElState(state, this, p);\n      el = s1.element;\n      s2 = l2[p];\n\n      if (s2Alt) {\n        c2 = s2.isVisible || !s2Alt.isVisible && el === s2.element ? s2 : s2Alt;\n        c1 = s1Alt && !s1.isVisible && !s1Alt.isVisible && c2.element === s1Alt.element ? s1Alt : s1; //c1.element !== c2.element && c1.element === s2.element && (c2 = s2);\n\n        if (c1.isVisible && c2.isVisible && c1.element !== c2.element) {\n          // swapping, so force into \"changed\" array\n          (c1.isDifferent(c2) ? changed : unchanged).push(c1.element, c2.element);\n          targets.push(c1.element, c2.element);\n        } else {\n          place(c1, c2, c1.element);\n        }\n\n        s1Alt && c1.element === s1Alt.element && (s1Alt = l1[p]);\n        placeIfDoesNotExist(c1.element !== s2.element && s1Alt ? s1Alt : c1, s2, s2.element);\n        placeIfDoesNotExist(s1Alt && s1Alt.element === s2Alt.element ? s1Alt : c1, s2Alt, s2Alt.element);\n        s1Alt && placeIfDoesNotExist(s1Alt, s2Alt.element === s1Alt.element ? s2Alt : s2, s1Alt.element);\n      } else {\n        !s2 ? enter.push(el) : !s2.isDifferent(s1) ? unchanged.push(el) : place(s1, s2, el);\n        s1Alt && placeIfDoesNotExist(s1Alt, s2, s1Alt.element);\n      }\n    }\n\n    for (p in l2) {\n      if (!l1[p]) {\n        leave.push(l2[p].element);\n        a2[p] && leave.push(a2[p].element);\n      }\n    }\n\n    return {\n      changed: changed,\n      unchanged: unchanged,\n      enter: enter,\n      leave: leave\n    };\n  };\n\n  _proto.recordInlineStyles = function recordInlineStyles() {\n    var props = _memoizedRemoveProps[this.props] || _removeProps,\n        i = this.elementStates.length;\n\n    while (i--) {\n      _recordInlineStyles(this.elementStates[i], props);\n    }\n  };\n\n  _proto.interrupt = function interrupt(soft) {\n    var _this2 = this;\n\n    // soft = DON'T force in-progress flip animations to completion (like when running a batch, we can't immediately kill flips when getting states because it could contaminate positioning and other .getState() calls that will run in the batch (we kill AFTER all the .getState() calls complete).\n    var timelines = [];\n    this.targets.forEach(function (t) {\n      var tl = t._flip,\n          foundInProgress = _killFlip(tl, soft ? 0 : 1);\n\n      soft && foundInProgress && timelines.indexOf(tl) < 0 && tl.add(function () {\n        return _this2.updateVisibility();\n      });\n      foundInProgress && timelines.push(tl);\n    });\n    !soft && timelines.length && this.updateVisibility(); // if we found an in-progress Flip animation, we must record all the values in their current state at that point BUT we should update the isVisible value AFTER pushing that flip to completion so that elements that are entering or leaving will populate those Arrays properly.\n\n    this.interrupted || (this.interrupted = !!timelines.length);\n  };\n\n  _proto.updateVisibility = function updateVisibility() {\n    this.elementStates.forEach(function (es) {\n      var b = es.element.getBoundingClientRect();\n      es.isVisible = !!(b.width || b.height || b.top || b.left);\n      es.uncache = 1;\n    });\n  };\n\n  _proto.getElementState = function getElementState(element) {\n    return this.elementStates[this.targets.indexOf(_getEl(element))];\n  };\n\n  _proto.makeAbsolute = function makeAbsolute() {\n    return _orderByDOMDepth(this.elementStates.slice(0), true, true).map(_makeAbsolute);\n  };\n\n  return FlipState;\n}();\n\nvar ElementState = /*#__PURE__*/function () {\n  function ElementState(element, props, simple) {\n    this.element = element;\n    this.update(props, simple);\n  }\n\n  var _proto2 = ElementState.prototype;\n\n  _proto2.isDifferent = function isDifferent(state) {\n    var b1 = this.bounds,\n        b2 = state.bounds;\n    return b1.top !== b2.top || b1.left !== b2.left || b1.width !== b2.width || b1.height !== b2.height || !this.matrix.equals(state.matrix) || this.opacity !== state.opacity || this.props && state.props && JSON.stringify(this.props) !== JSON.stringify(state.props);\n  };\n\n  _proto2.update = function update(props, simple) {\n    var self = this,\n        element = self.element,\n        getProp = gsap.getProperty(element),\n        cache = gsap.core.getCache(element),\n        bounds = element.getBoundingClientRect(),\n        bbox = element.getBBox && typeof element.getBBox === \"function\" && element.nodeName.toLowerCase() !== \"svg\" && element.getBBox(),\n        m = simple ? new Matrix2D(1, 0, 0, 1, bounds.left + _getDocScrollLeft(), bounds.top + _getDocScrollTop()) : getGlobalMatrix(element, false, false, true);\n    self.getProp = getProp;\n    self.element = element;\n    self.id = _getID(element);\n    self.matrix = m;\n    self.cache = cache;\n    self.bounds = bounds;\n    self.isVisible = !!(bounds.width || bounds.height || bounds.left || bounds.top);\n    self.display = getProp(\"display\");\n    self.position = getProp(\"position\");\n    self.parent = element.parentNode;\n    self.x = getProp(\"x\");\n    self.y = getProp(\"y\");\n    self.scaleX = cache.scaleX;\n    self.scaleY = cache.scaleY;\n    self.rotation = getProp(\"rotation\");\n    self.skewX = getProp(\"skewX\");\n    self.opacity = getProp(\"opacity\");\n    self.width = bbox ? bbox.width : _closestTenth(getProp(\"width\", \"px\"), 0.04); // round up to the closest 0.1 so that text doesn't wrap.\n\n    self.height = bbox ? bbox.height : _closestTenth(getProp(\"height\", \"px\"), 0.04);\n    props && _recordProps(self, _memoizedProps[props] || _memoizeProps(props));\n    self.ctm = element.getCTM && element.nodeName.toLowerCase() === \"svg\" && _getCTM(element).inverse();\n    self.simple = simple || _round(m.a) === 1 && !_round(m.b) && !_round(m.c) && _round(m.d) === 1; // allows us to speed through some other tasks if it's not scale/rotated\n\n    self.uncache = 0;\n  };\n\n  return ElementState;\n}();\n\nvar FlipAction = /*#__PURE__*/function () {\n  function FlipAction(vars, batch) {\n    this.vars = vars;\n    this.batch = batch;\n    this.states = [];\n    this.timeline = batch.timeline;\n  }\n\n  var _proto3 = FlipAction.prototype;\n\n  _proto3.getStateById = function getStateById(id) {\n    var i = this.states.length;\n\n    while (i--) {\n      if (this.states[i].idLookup[id]) {\n        return this.states[i];\n      }\n    }\n  };\n\n  _proto3.kill = function kill() {\n    this.batch.remove(this);\n  };\n\n  return FlipAction;\n}();\n\nvar FlipBatch = /*#__PURE__*/function () {\n  function FlipBatch(id) {\n    this.id = id;\n    this.actions = [];\n    this._kill = [];\n    this._final = [];\n    this._abs = [];\n    this._run = [];\n    this.data = {};\n    this.state = new FlipState();\n    this.timeline = gsap.timeline();\n  }\n\n  var _proto4 = FlipBatch.prototype;\n\n  _proto4.add = function add(config) {\n    var result = this.actions.filter(function (action) {\n      return action.vars === config;\n    });\n\n    if (result.length) {\n      return result[0];\n    }\n\n    result = new FlipAction(typeof config === \"function\" ? {\n      animate: config\n    } : config, this);\n    this.actions.push(result);\n    return result;\n  };\n\n  _proto4.remove = function remove(action) {\n    var i = this.actions.indexOf(action);\n    i >= 0 && this.actions.splice(i, 1);\n    return this;\n  };\n\n  _proto4.getState = function getState(merge) {\n    var _this3 = this;\n\n    var prevBatch = _batch,\n        prevAction = _batchAction;\n    _batch = this;\n    this.state.clear();\n    this._kill.length = 0;\n    this.actions.forEach(function (action) {\n      if (action.vars.getState) {\n        action.states.length = 0;\n        _batchAction = action;\n        action.state = action.vars.getState(action);\n      }\n\n      merge && action.states.forEach(function (s) {\n        return _this3.state.add(s);\n      });\n    });\n    _batchAction = prevAction;\n    _batch = prevBatch;\n    this.killConflicts();\n    return this;\n  };\n\n  _proto4.animate = function animate() {\n    var _this4 = this;\n\n    var prevBatch = _batch,\n        tl = this.timeline,\n        i = this.actions.length,\n        finalStates,\n        endTime;\n    _batch = this;\n    tl.clear();\n    this._abs.length = this._final.length = this._run.length = 0;\n    this.actions.forEach(function (a) {\n      a.vars.animate && a.vars.animate(a);\n      var onEnter = a.vars.onEnter,\n          onLeave = a.vars.onLeave,\n          targets = a.targets,\n          s,\n          result;\n\n      if (targets && targets.length && (onEnter || onLeave)) {\n        s = new FlipState();\n        a.states.forEach(function (state) {\n          return s.add(state);\n        });\n        result = s.compare(Flip.getState(targets));\n        result.enter.length && onEnter && onEnter(result.enter);\n        result.leave.length && onLeave && onLeave(result.leave);\n      }\n    });\n\n    _makeCompsAbsolute(this._abs);\n\n    this._run.forEach(function (f) {\n      return f();\n    });\n\n    endTime = tl.duration();\n    finalStates = this._final.slice(0);\n    tl.add(function () {\n      if (endTime <= tl.time()) {\n        // only call if moving forward in the timeline (in case it's nested in a timeline that gets reversed)\n        finalStates.forEach(function (f) {\n          return f();\n        });\n\n        _forEachBatch(_this4, \"onComplete\");\n      }\n    });\n    _batch = prevBatch;\n\n    while (i--) {\n      this.actions[i].vars.once && this.actions[i].kill();\n    }\n\n    _forEachBatch(this, \"onStart\");\n\n    tl.restart();\n    return this;\n  };\n\n  _proto4.loadState = function loadState(done) {\n    done || (done = function done() {\n      return 0;\n    });\n    var queue = [];\n    this.actions.forEach(function (c) {\n      if (c.vars.loadState) {\n        var i,\n            f = function f(targets) {\n          targets && (c.targets = targets);\n          i = queue.indexOf(f);\n\n          if (~i) {\n            queue.splice(i, 1);\n            queue.length || done();\n          }\n        };\n\n        queue.push(f);\n        c.vars.loadState(f);\n      }\n    });\n    queue.length || done();\n    return this;\n  };\n\n  _proto4.setState = function setState() {\n    this.actions.forEach(function (c) {\n      return c.targets = c.vars.setState && c.vars.setState(c);\n    });\n    return this;\n  };\n\n  _proto4.killConflicts = function killConflicts(soft) {\n    this.state.interrupt(soft);\n\n    this._kill.forEach(function (state) {\n      return state.interrupt(soft);\n    });\n\n    return this;\n  };\n\n  _proto4.run = function run(skipGetState, merge) {\n    var _this5 = this;\n\n    if (this !== _batch) {\n      skipGetState || this.getState(merge);\n      this.loadState(function () {\n        if (!_this5._killed) {\n          _this5.setState();\n\n          _this5.animate();\n        }\n      });\n    }\n\n    return this;\n  };\n\n  _proto4.clear = function clear(stateOnly) {\n    this.state.clear();\n    stateOnly || (this.actions.length = 0);\n  };\n\n  _proto4.getStateById = function getStateById(id) {\n    var i = this.actions.length,\n        s;\n\n    while (i--) {\n      s = this.actions[i].getStateById(id);\n\n      if (s) {\n        return s;\n      }\n    }\n\n    return this.state.idLookup[id] && this.state;\n  };\n\n  _proto4.kill = function kill() {\n    this._killed = 1;\n    this.clear();\n    delete _batchLookup[this.id];\n  };\n\n  return FlipBatch;\n}();\n\nexport var Flip = /*#__PURE__*/function () {\n  function Flip() {}\n\n  Flip.getState = function getState(targets, vars) {\n    var state = _parseState(targets, vars);\n\n    _batchAction && _batchAction.states.push(state);\n    vars && vars.batch && Flip.batch(vars.batch).state.add(state);\n    return state;\n  };\n\n  Flip.from = function from(state, vars) {\n    vars = vars || {};\n    \"clearProps\" in vars || (vars.clearProps = true);\n    return _fromTo(state, _parseState(vars.targets || state.targets, {\n      props: vars.props || state.props,\n      simple: vars.simple,\n      kill: !!vars.kill\n    }), vars, -1);\n  };\n\n  Flip.to = function to(state, vars) {\n    return _fromTo(state, _parseState(vars.targets || state.targets, {\n      props: vars.props || state.props,\n      simple: vars.simple,\n      kill: !!vars.kill\n    }), vars, 1);\n  };\n\n  Flip.fromTo = function fromTo(fromState, toState, vars) {\n    return _fromTo(fromState, toState, vars);\n  };\n\n  Flip.fit = function fit(fromEl, toEl, vars) {\n    var v = vars ? _copy(vars, _fitReserved) : {},\n        _ref = vars || v,\n        absolute = _ref.absolute,\n        scale = _ref.scale,\n        getVars = _ref.getVars,\n        props = _ref.props,\n        runBackwards = _ref.runBackwards,\n        onComplete = _ref.onComplete,\n        simple = _ref.simple,\n        fitChild = vars && vars.fitChild && _getEl(vars.fitChild),\n        before = _parseElementState(toEl, props, simple, fromEl),\n        after = _parseElementState(fromEl, 0, simple, before),\n        inlineProps = props ? _memoizedRemoveProps[props] : _removeProps;\n\n    props && _applyProps(v, before.props);\n\n    if (runBackwards) {\n      _recordInlineStyles(after, inlineProps);\n\n      \"immediateRender\" in v || (v.immediateRender = true);\n\n      v.onComplete = function () {\n        _applyInlineStyles(after);\n\n        onComplete && onComplete.apply(this, arguments);\n      };\n    }\n\n    absolute && _makeAbsolute(after, before);\n    v = _fit(after, before, scale || fitChild, props, fitChild, v.duration || getVars ? v : 0);\n    return getVars ? v : v.duration ? gsap.to(after.element, v) : null;\n  };\n\n  Flip.makeAbsolute = function makeAbsolute(targetsOrStates, vars) {\n    return (targetsOrStates instanceof FlipState ? targetsOrStates : new FlipState(targetsOrStates, vars)).makeAbsolute();\n  };\n\n  Flip.batch = function batch(id) {\n    id || (id = \"default\");\n    return _batchLookup[id] || (_batchLookup[id] = new FlipBatch(id));\n  };\n\n  Flip.killFlipsOf = function killFlipsOf(targets, complete) {\n    (targets instanceof FlipState ? targets.targets : _toArray(targets)).forEach(function (t) {\n      return t && _killFlip(t._flip, complete !== false ? 1 : 2);\n    });\n  };\n\n  Flip.isFlipping = function isFlipping(target) {\n    var f = Flip.getByTarget(target);\n    return !!f && f.isActive();\n  };\n\n  Flip.getByTarget = function getByTarget(target) {\n    return (_getEl(target) || _emptyObj)._flip;\n  };\n\n  Flip.getElementState = function getElementState(target, props) {\n    return new ElementState(_getEl(target), props);\n  };\n\n  Flip.convertCoordinates = function convertCoordinates(fromElement, toElement, point) {\n    var m = getGlobalMatrix(toElement, true, true).multiply(getGlobalMatrix(fromElement));\n    return point ? m.apply(point) : m;\n  };\n\n  Flip.register = function register(core) {\n    _body = typeof document !== \"undefined\" && document.body;\n\n    if (_body) {\n      gsap = core;\n\n      _setDoc(_body);\n\n      _toArray = gsap.utils.toArray;\n      _getStyleSaver = gsap.core.getStyleSaver;\n      var snap = gsap.utils.snap(0.1);\n\n      _closestTenth = function _closestTenth(value, add) {\n        return snap(parseFloat(value) + add);\n      };\n    }\n  };\n\n  return Flip;\n}();\nFlip.version = \"3.11.5\"; // function whenImagesLoad(el, func) {\n// \tlet pending = [],\n// \t\tonLoad = e => {\n// \t\t\tpending.splice(pending.indexOf(e.target), 1);\n// \t\t\te.target.removeEventListener(\"load\", onLoad);\n// \t\t\tpending.length || func();\n// \t\t};\n// \tgsap.utils.toArray(el.tagName.toLowerCase() === \"img\" ? el : el.querySelectorAll(\"img\")).forEach(img => img.complete || img.addEventListener(\"load\", onLoad) || pending.push(img));\n// \tpending.length || func();\n// }\n\ntypeof window !== \"undefined\" && window.gsap && window.gsap.registerPlugin(Flip);\nexport { Flip as default };","(function (global, factory) {\n  typeof exports === 'object' && typeof module !== 'undefined' ? factory(exports) :\n  typeof define === 'function' && define.amd ? define(['exports'], factory) :\n  (global = global || self, factory(global.window = global.window || {}));\n}(this, (function (exports) { 'use strict';\n\n  function _inheritsLoose(subClass, superClass) {\n    subClass.prototype = Object.create(superClass.prototype);\n    subClass.prototype.constructor = subClass;\n    subClass.__proto__ = superClass;\n  }\n\n  function _assertThisInitialized(self) {\n    if (self === void 0) {\n      throw new ReferenceError(\"this hasn't been initialised - super() hasn't been called\");\n    }\n\n    return self;\n  }\n\n  /*!\n   * GSAP 3.11.5\n   * https://greensock.com\n   *\n   * @license Copyright 2008-2023, GreenSock. All rights reserved.\n   * Subject to the terms at https://greensock.com/standard-license or for\n   * Club GreenSock members, the agreement issued with that membership.\n   * @author: Jack Doyle, jack@greensock.com\n  */\n  var _config = {\n    autoSleep: 120,\n    force3D: \"auto\",\n    nullTargetWarn: 1,\n    units: {\n      lineHeight: \"\"\n    }\n  },\n      _defaults = {\n    duration: .5,\n    overwrite: false,\n    delay: 0\n  },\n      _suppressOverwrites,\n      _reverting,\n      _context,\n      _bigNum = 1e8,\n      _tinyNum = 1 / _bigNum,\n      _2PI = Math.PI * 2,\n      _HALF_PI = _2PI / 4,\n      _gsID = 0,\n      _sqrt = Math.sqrt,\n      _cos = Math.cos,\n      _sin = Math.sin,\n      _isString = function _isString(value) {\n    return typeof value === \"string\";\n  },\n      _isFunction = function _isFunction(value) {\n    return typeof value === \"function\";\n  },\n      _isNumber = function _isNumber(value) {\n    return typeof value === \"number\";\n  },\n      _isUndefined = function _isUndefined(value) {\n    return typeof value === \"undefined\";\n  },\n      _isObject = function _isObject(value) {\n    return typeof value === \"object\";\n  },\n      _isNotFalse = function _isNotFalse(value) {\n    return value !== false;\n  },\n      _windowExists = function _windowExists() {\n    return typeof window !== \"undefined\";\n  },\n      _isFuncOrString = function _isFuncOrString(value) {\n    return _isFunction(value) || _isString(value);\n  },\n      _isTypedArray = typeof ArrayBuffer === \"function\" && ArrayBuffer.isView || function () {},\n      _isArray = Array.isArray,\n      _strictNumExp = /(?:-?\\.?\\d|\\.)+/gi,\n      _numExp = /[-+=.]*\\d+[.e\\-+]*\\d*[e\\-+]*\\d*/g,\n      _numWithUnitExp = /[-+=.]*\\d+[.e-]*\\d*[a-z%]*/g,\n      _complexStringNumExp = /[-+=.]*\\d+\\.?\\d*(?:e-|e\\+)?\\d*/gi,\n      _relExp = /[+-]=-?[.\\d]+/,\n      _delimitedValueExp = /[^,'\"\\[\\]\\s]+/gi,\n      _unitExp = /^[+\\-=e\\s\\d]*\\d+[.\\d]*([a-z]*|%)\\s*$/i,\n      _globalTimeline,\n      _win,\n      _coreInitted,\n      _doc,\n      _globals = {},\n      _installScope = {},\n      _coreReady,\n      _install = function _install(scope) {\n    return (_installScope = _merge(scope, _globals)) && gsap;\n  },\n      _missingPlugin = function _missingPlugin(property, value) {\n    return console.warn(\"Invalid property\", property, \"set to\", value, \"Missing plugin? gsap.registerPlugin()\");\n  },\n      _warn = function _warn(message, suppress) {\n    return !suppress && console.warn(message);\n  },\n      _addGlobal = function _addGlobal(name, obj) {\n    return name && (_globals[name] = obj) && _installScope && (_installScope[name] = obj) || _globals;\n  },\n      _emptyFunc = function _emptyFunc() {\n    return 0;\n  },\n      _startAtRevertConfig = {\n    suppressEvents: true,\n    isStart: true,\n    kill: false\n  },\n      _revertConfigNoKill = {\n    suppressEvents: true,\n    kill: false\n  },\n      _revertConfig = {\n    suppressEvents: true\n  },\n      _reservedProps = {},\n      _lazyTweens = [],\n      _lazyLookup = {},\n      _lastRenderedFrame,\n      _plugins = {},\n      _effects = {},\n      _nextGCFrame = 30,\n      _harnessPlugins = [],\n      _callbackNames = \"\",\n      _harness = function _harness(targets) {\n    var target = targets[0],\n        harnessPlugin,\n        i;\n    _isObject(target) || _isFunction(target) || (targets = [targets]);\n\n    if (!(harnessPlugin = (target._gsap || {}).harness)) {\n      i = _harnessPlugins.length;\n\n      while (i-- && !_harnessPlugins[i].targetTest(target)) {}\n\n      harnessPlugin = _harnessPlugins[i];\n    }\n\n    i = targets.length;\n\n    while (i--) {\n      targets[i] && (targets[i]._gsap || (targets[i]._gsap = new GSCache(targets[i], harnessPlugin))) || targets.splice(i, 1);\n    }\n\n    return targets;\n  },\n      _getCache = function _getCache(target) {\n    return target._gsap || _harness(toArray(target))[0]._gsap;\n  },\n      _getProperty = function _getProperty(target, property, v) {\n    return (v = target[property]) && _isFunction(v) ? target[property]() : _isUndefined(v) && target.getAttribute && target.getAttribute(property) || v;\n  },\n      _forEachName = function _forEachName(names, func) {\n    return (names = names.split(\",\")).forEach(func) || names;\n  },\n      _round = function _round(value) {\n    return Math.round(value * 100000) / 100000 || 0;\n  },\n      _roundPrecise = function _roundPrecise(value) {\n    return Math.round(value * 10000000) / 10000000 || 0;\n  },\n      _parseRelative = function _parseRelative(start, value) {\n    var operator = value.charAt(0),\n        end = parseFloat(value.substr(2));\n    start = parseFloat(start);\n    return operator === \"+\" ? start + end : operator === \"-\" ? start - end : operator === \"*\" ? start * end : start / end;\n  },\n      _arrayContainsAny = function _arrayContainsAny(toSearch, toFind) {\n    var l = toFind.length,\n        i = 0;\n\n    for (; toSearch.indexOf(toFind[i]) < 0 && ++i < l;) {}\n\n    return i < l;\n  },\n      _lazyRender = function _lazyRender() {\n    var l = _lazyTweens.length,\n        a = _lazyTweens.slice(0),\n        i,\n        tween;\n\n    _lazyLookup = {};\n    _lazyTweens.length = 0;\n\n    for (i = 0; i < l; i++) {\n      tween = a[i];\n      tween && tween._lazy && (tween.render(tween._lazy[0], tween._lazy[1], true)._lazy = 0);\n    }\n  },\n      _lazySafeRender = function _lazySafeRender(animation, time, suppressEvents, force) {\n    _lazyTweens.length && !_reverting && _lazyRender();\n    animation.render(time, suppressEvents, force || _reverting && time < 0 && (animation._initted || animation._startAt));\n    _lazyTweens.length && !_reverting && _lazyRender();\n  },\n      _numericIfPossible = function _numericIfPossible(value) {\n    var n = parseFloat(value);\n    return (n || n === 0) && (value + \"\").match(_delimitedValueExp).length < 2 ? n : _isString(value) ? value.trim() : value;\n  },\n      _passThrough = function _passThrough(p) {\n    return p;\n  },\n      _setDefaults = function _setDefaults(obj, defaults) {\n    for (var p in defaults) {\n      p in obj || (obj[p] = defaults[p]);\n    }\n\n    return obj;\n  },\n      _setKeyframeDefaults = function _setKeyframeDefaults(excludeDuration) {\n    return function (obj, defaults) {\n      for (var p in defaults) {\n        p in obj || p === \"duration\" && excludeDuration || p === \"ease\" || (obj[p] = defaults[p]);\n      }\n    };\n  },\n      _merge = function _merge(base, toMerge) {\n    for (var p in toMerge) {\n      base[p] = toMerge[p];\n    }\n\n    return base;\n  },\n      _mergeDeep = function _mergeDeep(base, toMerge) {\n    for (var p in toMerge) {\n      p !== \"__proto__\" && p !== \"constructor\" && p !== \"prototype\" && (base[p] = _isObject(toMerge[p]) ? _mergeDeep(base[p] || (base[p] = {}), toMerge[p]) : toMerge[p]);\n    }\n\n    return base;\n  },\n      _copyExcluding = function _copyExcluding(obj, excluding) {\n    var copy = {},\n        p;\n\n    for (p in obj) {\n      p in excluding || (copy[p] = obj[p]);\n    }\n\n    return copy;\n  },\n      _inheritDefaults = function _inheritDefaults(vars) {\n    var parent = vars.parent || _globalTimeline,\n        func = vars.keyframes ? _setKeyframeDefaults(_isArray(vars.keyframes)) : _setDefaults;\n\n    if (_isNotFalse(vars.inherit)) {\n      while (parent) {\n        func(vars, parent.vars.defaults);\n        parent = parent.parent || parent._dp;\n      }\n    }\n\n    return vars;\n  },\n      _arraysMatch = function _arraysMatch(a1, a2) {\n    var i = a1.length,\n        match = i === a2.length;\n\n    while (match && i-- && a1[i] === a2[i]) {}\n\n    return i < 0;\n  },\n      _addLinkedListItem = function _addLinkedListItem(parent, child, firstProp, lastProp, sortBy) {\n    if (firstProp === void 0) {\n      firstProp = \"_first\";\n    }\n\n    if (lastProp === void 0) {\n      lastProp = \"_last\";\n    }\n\n    var prev = parent[lastProp],\n        t;\n\n    if (sortBy) {\n      t = child[sortBy];\n\n      while (prev && prev[sortBy] > t) {\n        prev = prev._prev;\n      }\n    }\n\n    if (prev) {\n      child._next = prev._next;\n      prev._next = child;\n    } else {\n      child._next = parent[firstProp];\n      parent[firstProp] = child;\n    }\n\n    if (child._next) {\n      child._next._prev = child;\n    } else {\n      parent[lastProp] = child;\n    }\n\n    child._prev = prev;\n    child.parent = child._dp = parent;\n    return child;\n  },\n      _removeLinkedListItem = function _removeLinkedListItem(parent, child, firstProp, lastProp) {\n    if (firstProp === void 0) {\n      firstProp = \"_first\";\n    }\n\n    if (lastProp === void 0) {\n      lastProp = \"_last\";\n    }\n\n    var prev = child._prev,\n        next = child._next;\n\n    if (prev) {\n      prev._next = next;\n    } else if (parent[firstProp] === child) {\n      parent[firstProp] = next;\n    }\n\n    if (next) {\n      next._prev = prev;\n    } else if (parent[lastProp] === child) {\n      parent[lastProp] = prev;\n    }\n\n    child._next = child._prev = child.parent = null;\n  },\n      _removeFromParent = function _removeFromParent(child, onlyIfParentHasAutoRemove) {\n    child.parent && (!onlyIfParentHasAutoRemove || child.parent.autoRemoveChildren) && child.parent.remove(child);\n    child._act = 0;\n  },\n      _uncache = function _uncache(animation, child) {\n    if (animation && (!child || child._end > animation._dur || child._start < 0)) {\n      var a = animation;\n\n      while (a) {\n        a._dirty = 1;\n        a = a.parent;\n      }\n    }\n\n    return animation;\n  },\n      _recacheAncestors = function _recacheAncestors(animation) {\n    var parent = animation.parent;\n\n    while (parent && parent.parent) {\n      parent._dirty = 1;\n      parent.totalDuration();\n      parent = parent.parent;\n    }\n\n    return animation;\n  },\n      _rewindStartAt = function _rewindStartAt(tween, totalTime, suppressEvents, force) {\n    return tween._startAt && (_reverting ? tween._startAt.revert(_revertConfigNoKill) : tween.vars.immediateRender && !tween.vars.autoRevert || tween._startAt.render(totalTime, true, force));\n  },\n      _hasNoPausedAncestors = function _hasNoPausedAncestors(animation) {\n    return !animation || animation._ts && _hasNoPausedAncestors(animation.parent);\n  },\n      _elapsedCycleDuration = function _elapsedCycleDuration(animation) {\n    return animation._repeat ? _animationCycle(animation._tTime, animation = animation.duration() + animation._rDelay) * animation : 0;\n  },\n      _animationCycle = function _animationCycle(tTime, cycleDuration) {\n    var whole = Math.floor(tTime /= cycleDuration);\n    return tTime && whole === tTime ? whole - 1 : whole;\n  },\n      _parentToChildTotalTime = function _parentToChildTotalTime(parentTime, child) {\n    return (parentTime - child._start) * child._ts + (child._ts >= 0 ? 0 : child._dirty ? child.totalDuration() : child._tDur);\n  },\n      _setEnd = function _setEnd(animation) {\n    return animation._end = _roundPrecise(animation._start + (animation._tDur / Math.abs(animation._ts || animation._rts || _tinyNum) || 0));\n  },\n      _alignPlayhead = function _alignPlayhead(animation, totalTime) {\n    var parent = animation._dp;\n\n    if (parent && parent.smoothChildTiming && animation._ts) {\n      animation._start = _roundPrecise(parent._time - (animation._ts > 0 ? totalTime / animation._ts : ((animation._dirty ? animation.totalDuration() : animation._tDur) - totalTime) / -animation._ts));\n\n      _setEnd(animation);\n\n      parent._dirty || _uncache(parent, animation);\n    }\n\n    return animation;\n  },\n      _postAddChecks = function _postAddChecks(timeline, child) {\n    var t;\n\n    if (child._time || child._initted && !child._dur) {\n      t = _parentToChildTotalTime(timeline.rawTime(), child);\n\n      if (!child._dur || _clamp(0, child.totalDuration(), t) - child._tTime > _tinyNum) {\n        child.render(t, true);\n      }\n    }\n\n    if (_uncache(timeline, child)._dp && timeline._initted && timeline._time >= timeline._dur && timeline._ts) {\n      if (timeline._dur < timeline.duration()) {\n        t = timeline;\n\n        while (t._dp) {\n          t.rawTime() >= 0 && t.totalTime(t._tTime);\n          t = t._dp;\n        }\n      }\n\n      timeline._zTime = -_tinyNum;\n    }\n  },\n      _addToTimeline = function _addToTimeline(timeline, child, position, skipChecks) {\n    child.parent && _removeFromParent(child);\n    child._start = _roundPrecise((_isNumber(position) ? position : position || timeline !== _globalTimeline ? _parsePosition(timeline, position, child) : timeline._time) + child._delay);\n    child._end = _roundPrecise(child._start + (child.totalDuration() / Math.abs(child.timeScale()) || 0));\n\n    _addLinkedListItem(timeline, child, \"_first\", \"_last\", timeline._sort ? \"_start\" : 0);\n\n    _isFromOrFromStart(child) || (timeline._recent = child);\n    skipChecks || _postAddChecks(timeline, child);\n    timeline._ts < 0 && _alignPlayhead(timeline, timeline._tTime);\n    return timeline;\n  },\n      _scrollTrigger = function _scrollTrigger(animation, trigger) {\n    return (_globals.ScrollTrigger || _missingPlugin(\"scrollTrigger\", trigger)) && _globals.ScrollTrigger.create(trigger, animation);\n  },\n      _attemptInitTween = function _attemptInitTween(tween, time, force, suppressEvents, tTime) {\n    _initTween(tween, time, tTime);\n\n    if (!tween._initted) {\n      return 1;\n    }\n\n    if (!force && tween._pt && !_reverting && (tween._dur && tween.vars.lazy !== false || !tween._dur && tween.vars.lazy) && _lastRenderedFrame !== _ticker.frame) {\n      _lazyTweens.push(tween);\n\n      tween._lazy = [tTime, suppressEvents];\n      return 1;\n    }\n  },\n      _parentPlayheadIsBeforeStart = function _parentPlayheadIsBeforeStart(_ref) {\n    var parent = _ref.parent;\n    return parent && parent._ts && parent._initted && !parent._lock && (parent.rawTime() < 0 || _parentPlayheadIsBeforeStart(parent));\n  },\n      _isFromOrFromStart = function _isFromOrFromStart(_ref2) {\n    var data = _ref2.data;\n    return data === \"isFromStart\" || data === \"isStart\";\n  },\n      _renderZeroDurationTween = function _renderZeroDurationTween(tween, totalTime, suppressEvents, force) {\n    var prevRatio = tween.ratio,\n        ratio = totalTime < 0 || !totalTime && (!tween._start && _parentPlayheadIsBeforeStart(tween) && !(!tween._initted && _isFromOrFromStart(tween)) || (tween._ts < 0 || tween._dp._ts < 0) && !_isFromOrFromStart(tween)) ? 0 : 1,\n        repeatDelay = tween._rDelay,\n        tTime = 0,\n        pt,\n        iteration,\n        prevIteration;\n\n    if (repeatDelay && tween._repeat) {\n      tTime = _clamp(0, tween._tDur, totalTime);\n      iteration = _animationCycle(tTime, repeatDelay);\n      tween._yoyo && iteration & 1 && (ratio = 1 - ratio);\n\n      if (iteration !== _animationCycle(tween._tTime, repeatDelay)) {\n        prevRatio = 1 - ratio;\n        tween.vars.repeatRefresh && tween._initted && tween.invalidate();\n      }\n    }\n\n    if (ratio !== prevRatio || _reverting || force || tween._zTime === _tinyNum || !totalTime && tween._zTime) {\n      if (!tween._initted && _attemptInitTween(tween, totalTime, force, suppressEvents, tTime)) {\n        return;\n      }\n\n      prevIteration = tween._zTime;\n      tween._zTime = totalTime || (suppressEvents ? _tinyNum : 0);\n      suppressEvents || (suppressEvents = totalTime && !prevIteration);\n      tween.ratio = ratio;\n      tween._from && (ratio = 1 - ratio);\n      tween._time = 0;\n      tween._tTime = tTime;\n      pt = tween._pt;\n\n      while (pt) {\n        pt.r(ratio, pt.d);\n        pt = pt._next;\n      }\n\n      totalTime < 0 && _rewindStartAt(tween, totalTime, suppressEvents, true);\n      tween._onUpdate && !suppressEvents && _callback(tween, \"onUpdate\");\n      tTime && tween._repeat && !suppressEvents && tween.parent && _callback(tween, \"onRepeat\");\n\n      if ((totalTime >= tween._tDur || totalTime < 0) && tween.ratio === ratio) {\n        ratio && _removeFromParent(tween, 1);\n\n        if (!suppressEvents && !_reverting) {\n          _callback(tween, ratio ? \"onComplete\" : \"onReverseComplete\", true);\n\n          tween._prom && tween._prom();\n        }\n      }\n    } else if (!tween._zTime) {\n      tween._zTime = totalTime;\n    }\n  },\n      _findNextPauseTween = function _findNextPauseTween(animation, prevTime, time) {\n    var child;\n\n    if (time > prevTime) {\n      child = animation._first;\n\n      while (child && child._start <= time) {\n        if (child.data === \"isPause\" && child._start > prevTime) {\n          return child;\n        }\n\n        child = child._next;\n      }\n    } else {\n      child = animation._last;\n\n      while (child && child._start >= time) {\n        if (child.data === \"isPause\" && child._start < prevTime) {\n          return child;\n        }\n\n        child = child._prev;\n      }\n    }\n  },\n      _setDuration = function _setDuration(animation, duration, skipUncache, leavePlayhead) {\n    var repeat = animation._repeat,\n        dur = _roundPrecise(duration) || 0,\n        totalProgress = animation._tTime / animation._tDur;\n    totalProgress && !leavePlayhead && (animation._time *= dur / animation._dur);\n    animation._dur = dur;\n    animation._tDur = !repeat ? dur : repeat < 0 ? 1e10 : _roundPrecise(dur * (repeat + 1) + animation._rDelay * repeat);\n    totalProgress > 0 && !leavePlayhead && _alignPlayhead(animation, animation._tTime = animation._tDur * totalProgress);\n    animation.parent && _setEnd(animation);\n    skipUncache || _uncache(animation.parent, animation);\n    return animation;\n  },\n      _onUpdateTotalDuration = function _onUpdateTotalDuration(animation) {\n    return animation instanceof Timeline ? _uncache(animation) : _setDuration(animation, animation._dur);\n  },\n      _zeroPosition = {\n    _start: 0,\n    endTime: _emptyFunc,\n    totalDuration: _emptyFunc\n  },\n      _parsePosition = function _parsePosition(animation, position, percentAnimation) {\n    var labels = animation.labels,\n        recent = animation._recent || _zeroPosition,\n        clippedDuration = animation.duration() >= _bigNum ? recent.endTime(false) : animation._dur,\n        i,\n        offset,\n        isPercent;\n\n    if (_isString(position) && (isNaN(position) || position in labels)) {\n      offset = position.charAt(0);\n      isPercent = position.substr(-1) === \"%\";\n      i = position.indexOf(\"=\");\n\n      if (offset === \"<\" || offset === \">\") {\n        i >= 0 && (position = position.replace(/=/, \"\"));\n        return (offset === \"<\" ? recent._start : recent.endTime(recent._repeat >= 0)) + (parseFloat(position.substr(1)) || 0) * (isPercent ? (i < 0 ? recent : percentAnimation).totalDuration() / 100 : 1);\n      }\n\n      if (i < 0) {\n        position in labels || (labels[position] = clippedDuration);\n        return labels[position];\n      }\n\n      offset = parseFloat(position.charAt(i - 1) + position.substr(i + 1));\n\n      if (isPercent && percentAnimation) {\n        offset = offset / 100 * (_isArray(percentAnimation) ? percentAnimation[0] : percentAnimation).totalDuration();\n      }\n\n      return i > 1 ? _parsePosition(animation, position.substr(0, i - 1), percentAnimation) + offset : clippedDuration + offset;\n    }\n\n    return position == null ? clippedDuration : +position;\n  },\n      _createTweenType = function _createTweenType(type, params, timeline) {\n    var isLegacy = _isNumber(params[1]),\n        varsIndex = (isLegacy ? 2 : 1) + (type < 2 ? 0 : 1),\n        vars = params[varsIndex],\n        irVars,\n        parent;\n\n    isLegacy && (vars.duration = params[1]);\n    vars.parent = timeline;\n\n    if (type) {\n      irVars = vars;\n      parent = timeline;\n\n      while (parent && !(\"immediateRender\" in irVars)) {\n        irVars = parent.vars.defaults || {};\n        parent = _isNotFalse(parent.vars.inherit) && parent.parent;\n      }\n\n      vars.immediateRender = _isNotFalse(irVars.immediateRender);\n      type < 2 ? vars.runBackwards = 1 : vars.startAt = params[varsIndex - 1];\n    }\n\n    return new Tween(params[0], vars, params[varsIndex + 1]);\n  },\n      _conditionalReturn = function _conditionalReturn(value, func) {\n    return value || value === 0 ? func(value) : func;\n  },\n      _clamp = function _clamp(min, max, value) {\n    return value < min ? min : value > max ? max : value;\n  },\n      getUnit = function getUnit(value, v) {\n    return !_isString(value) || !(v = _unitExp.exec(value)) ? \"\" : v[1];\n  },\n      clamp = function clamp(min, max, value) {\n    return _conditionalReturn(value, function (v) {\n      return _clamp(min, max, v);\n    });\n  },\n      _slice = [].slice,\n      _isArrayLike = function _isArrayLike(value, nonEmpty) {\n    return value && _isObject(value) && \"length\" in value && (!nonEmpty && !value.length || value.length - 1 in value && _isObject(value[0])) && !value.nodeType && value !== _win;\n  },\n      _flatten = function _flatten(ar, leaveStrings, accumulator) {\n    if (accumulator === void 0) {\n      accumulator = [];\n    }\n\n    return ar.forEach(function (value) {\n      var _accumulator;\n\n      return _isString(value) && !leaveStrings || _isArrayLike(value, 1) ? (_accumulator = accumulator).push.apply(_accumulator, toArray(value)) : accumulator.push(value);\n    }) || accumulator;\n  },\n      toArray = function toArray(value, scope, leaveStrings) {\n    return _context && !scope && _context.selector ? _context.selector(value) : _isString(value) && !leaveStrings && (_coreInitted || !_wake()) ? _slice.call((scope || _doc).querySelectorAll(value), 0) : _isArray(value) ? _flatten(value, leaveStrings) : _isArrayLike(value) ? _slice.call(value, 0) : value ? [value] : [];\n  },\n      selector = function selector(value) {\n    value = toArray(value)[0] || _warn(\"Invalid scope\") || {};\n    return function (v) {\n      var el = value.current || value.nativeElement || value;\n      return toArray(v, el.querySelectorAll ? el : el === value ? _warn(\"Invalid scope\") || _doc.createElement(\"div\") : value);\n    };\n  },\n      shuffle = function shuffle(a) {\n    return a.sort(function () {\n      return .5 - Math.random();\n    });\n  },\n      distribute = function distribute(v) {\n    if (_isFunction(v)) {\n      return v;\n    }\n\n    var vars = _isObject(v) ? v : {\n      each: v\n    },\n        ease = _parseEase(vars.ease),\n        from = vars.from || 0,\n        base = parseFloat(vars.base) || 0,\n        cache = {},\n        isDecimal = from > 0 && from < 1,\n        ratios = isNaN(from) || isDecimal,\n        axis = vars.axis,\n        ratioX = from,\n        ratioY = from;\n\n    if (_isString(from)) {\n      ratioX = ratioY = {\n        center: .5,\n        edges: .5,\n        end: 1\n      }[from] || 0;\n    } else if (!isDecimal && ratios) {\n      ratioX = from[0];\n      ratioY = from[1];\n    }\n\n    return function (i, target, a) {\n      var l = (a || vars).length,\n          distances = cache[l],\n          originX,\n          originY,\n          x,\n          y,\n          d,\n          j,\n          max,\n          min,\n          wrapAt;\n\n      if (!distances) {\n        wrapAt = vars.grid === \"auto\" ? 0 : (vars.grid || [1, _bigNum])[1];\n\n        if (!wrapAt) {\n          max = -_bigNum;\n\n          while (max < (max = a[wrapAt++].getBoundingClientRect().left) && wrapAt < l) {}\n\n          wrapAt--;\n        }\n\n        distances = cache[l] = [];\n        originX = ratios ? Math.min(wrapAt, l) * ratioX - .5 : from % wrapAt;\n        originY = wrapAt === _bigNum ? 0 : ratios ? l * ratioY / wrapAt - .5 : from / wrapAt | 0;\n        max = 0;\n        min = _bigNum;\n\n        for (j = 0; j < l; j++) {\n          x = j % wrapAt - originX;\n          y = originY - (j / wrapAt | 0);\n          distances[j] = d = !axis ? _sqrt(x * x + y * y) : Math.abs(axis === \"y\" ? y : x);\n          d > max && (max = d);\n          d < min && (min = d);\n        }\n\n        from === \"random\" && shuffle(distances);\n        distances.max = max - min;\n        distances.min = min;\n        distances.v = l = (parseFloat(vars.amount) || parseFloat(vars.each) * (wrapAt > l ? l - 1 : !axis ? Math.max(wrapAt, l / wrapAt) : axis === \"y\" ? l / wrapAt : wrapAt) || 0) * (from === \"edges\" ? -1 : 1);\n        distances.b = l < 0 ? base - l : base;\n        distances.u = getUnit(vars.amount || vars.each) || 0;\n        ease = ease && l < 0 ? _invertEase(ease) : ease;\n      }\n\n      l = (distances[i] - distances.min) / distances.max || 0;\n      return _roundPrecise(distances.b + (ease ? ease(l) : l) * distances.v) + distances.u;\n    };\n  },\n      _roundModifier = function _roundModifier(v) {\n    var p = Math.pow(10, ((v + \"\").split(\".\")[1] || \"\").length);\n    return function (raw) {\n      var n = _roundPrecise(Math.round(parseFloat(raw) / v) * v * p);\n\n      return (n - n % 1) / p + (_isNumber(raw) ? 0 : getUnit(raw));\n    };\n  },\n      snap = function snap(snapTo, value) {\n    var isArray = _isArray(snapTo),\n        radius,\n        is2D;\n\n    if (!isArray && _isObject(snapTo)) {\n      radius = isArray = snapTo.radius || _bigNum;\n\n      if (snapTo.values) {\n        snapTo = toArray(snapTo.values);\n\n        if (is2D = !_isNumber(snapTo[0])) {\n          radius *= radius;\n        }\n      } else {\n        snapTo = _roundModifier(snapTo.increment);\n      }\n    }\n\n    return _conditionalReturn(value, !isArray ? _roundModifier(snapTo) : _isFunction(snapTo) ? function (raw) {\n      is2D = snapTo(raw);\n      return Math.abs(is2D - raw) <= radius ? is2D : raw;\n    } : function (raw) {\n      var x = parseFloat(is2D ? raw.x : raw),\n          y = parseFloat(is2D ? raw.y : 0),\n          min = _bigNum,\n          closest = 0,\n          i = snapTo.length,\n          dx,\n          dy;\n\n      while (i--) {\n        if (is2D) {\n          dx = snapTo[i].x - x;\n          dy = snapTo[i].y - y;\n          dx = dx * dx + dy * dy;\n        } else {\n          dx = Math.abs(snapTo[i] - x);\n        }\n\n        if (dx < min) {\n          min = dx;\n          closest = i;\n        }\n      }\n\n      closest = !radius || min <= radius ? snapTo[closest] : raw;\n      return is2D || closest === raw || _isNumber(raw) ? closest : closest + getUnit(raw);\n    });\n  },\n      random = function random(min, max, roundingIncrement, returnFunction) {\n    return _conditionalReturn(_isArray(min) ? !max : roundingIncrement === true ? !!(roundingIncrement = 0) : !returnFunction, function () {\n      return _isArray(min) ? min[~~(Math.random() * min.length)] : (roundingIncrement = roundingIncrement || 1e-5) && (returnFunction = roundingIncrement < 1 ? Math.pow(10, (roundingIncrement + \"\").length - 2) : 1) && Math.floor(Math.round((min - roundingIncrement / 2 + Math.random() * (max - min + roundingIncrement * .99)) / roundingIncrement) * roundingIncrement * returnFunction) / returnFunction;\n    });\n  },\n      pipe = function pipe() {\n    for (var _len = arguments.length, functions = new Array(_len), _key = 0; _key < _len; _key++) {\n      functions[_key] = arguments[_key];\n    }\n\n    return function (value) {\n      return functions.reduce(function (v, f) {\n        return f(v);\n      }, value);\n    };\n  },\n      unitize = function unitize(func, unit) {\n    return function (value) {\n      return func(parseFloat(value)) + (unit || getUnit(value));\n    };\n  },\n      normalize = function normalize(min, max, value) {\n    return mapRange(min, max, 0, 1, value);\n  },\n      _wrapArray = function _wrapArray(a, wrapper, value) {\n    return _conditionalReturn(value, function (index) {\n      return a[~~wrapper(index)];\n    });\n  },\n      wrap = function wrap(min, max, value) {\n    var range = max - min;\n    return _isArray(min) ? _wrapArray(min, wrap(0, min.length), max) : _conditionalReturn(value, function (value) {\n      return (range + (value - min) % range) % range + min;\n    });\n  },\n      wrapYoyo = function wrapYoyo(min, max, value) {\n    var range = max - min,\n        total = range * 2;\n    return _isArray(min) ? _wrapArray(min, wrapYoyo(0, min.length - 1), max) : _conditionalReturn(value, function (value) {\n      value = (total + (value - min) % total) % total || 0;\n      return min + (value > range ? total - value : value);\n    });\n  },\n      _replaceRandom = function _replaceRandom(value) {\n    var prev = 0,\n        s = \"\",\n        i,\n        nums,\n        end,\n        isArray;\n\n    while (~(i = value.indexOf(\"random(\", prev))) {\n      end = value.indexOf(\")\", i);\n      isArray = value.charAt(i + 7) === \"[\";\n      nums = value.substr(i + 7, end - i - 7).match(isArray ? _delimitedValueExp : _strictNumExp);\n      s += value.substr(prev, i - prev) + random(isArray ? nums : +nums[0], isArray ? 0 : +nums[1], +nums[2] || 1e-5);\n      prev = end + 1;\n    }\n\n    return s + value.substr(prev, value.length - prev);\n  },\n      mapRange = function mapRange(inMin, inMax, outMin, outMax, value) {\n    var inRange = inMax - inMin,\n        outRange = outMax - outMin;\n    return _conditionalReturn(value, function (value) {\n      return outMin + ((value - inMin) / inRange * outRange || 0);\n    });\n  },\n      interpolate = function interpolate(start, end, progress, mutate) {\n    var func = isNaN(start + end) ? 0 : function (p) {\n      return (1 - p) * start + p * end;\n    };\n\n    if (!func) {\n      var isString = _isString(start),\n          master = {},\n          p,\n          i,\n          interpolators,\n          l,\n          il;\n\n      progress === true && (mutate = 1) && (progress = null);\n\n      if (isString) {\n        start = {\n          p: start\n        };\n        end = {\n          p: end\n        };\n      } else if (_isArray(start) && !_isArray(end)) {\n        interpolators = [];\n        l = start.length;\n        il = l - 2;\n\n        for (i = 1; i < l; i++) {\n          interpolators.push(interpolate(start[i - 1], start[i]));\n        }\n\n        l--;\n\n        func = function func(p) {\n          p *= l;\n          var i = Math.min(il, ~~p);\n          return interpolators[i](p - i);\n        };\n\n        progress = end;\n      } else if (!mutate) {\n        start = _merge(_isArray(start) ? [] : {}, start);\n      }\n\n      if (!interpolators) {\n        for (p in end) {\n          _addPropTween.call(master, start, p, \"get\", end[p]);\n        }\n\n        func = function func(p) {\n          return _renderPropTweens(p, master) || (isString ? start.p : start);\n        };\n      }\n    }\n\n    return _conditionalReturn(progress, func);\n  },\n      _getLabelInDirection = function _getLabelInDirection(timeline, fromTime, backward) {\n    var labels = timeline.labels,\n        min = _bigNum,\n        p,\n        distance,\n        label;\n\n    for (p in labels) {\n      distance = labels[p] - fromTime;\n\n      if (distance < 0 === !!backward && distance && min > (distance = Math.abs(distance))) {\n        label = p;\n        min = distance;\n      }\n    }\n\n    return label;\n  },\n      _callback = function _callback(animation, type, executeLazyFirst) {\n    var v = animation.vars,\n        callback = v[type],\n        prevContext = _context,\n        context = animation._ctx,\n        params,\n        scope,\n        result;\n\n    if (!callback) {\n      return;\n    }\n\n    params = v[type + \"Params\"];\n    scope = v.callbackScope || animation;\n    executeLazyFirst && _lazyTweens.length && _lazyRender();\n    context && (_context = context);\n    result = params ? callback.apply(scope, params) : callback.call(scope);\n    _context = prevContext;\n    return result;\n  },\n      _interrupt = function _interrupt(animation) {\n    _removeFromParent(animation);\n\n    animation.scrollTrigger && animation.scrollTrigger.kill(!!_reverting);\n    animation.progress() < 1 && _callback(animation, \"onInterrupt\");\n    return animation;\n  },\n      _quickTween,\n      _registerPluginQueue = [],\n      _createPlugin = function _createPlugin(config) {\n    if (!_windowExists()) {\n      _registerPluginQueue.push(config);\n\n      return;\n    }\n\n    config = !config.name && config[\"default\"] || config;\n\n    var name = config.name,\n        isFunc = _isFunction(config),\n        Plugin = name && !isFunc && config.init ? function () {\n      this._props = [];\n    } : config,\n        instanceDefaults = {\n      init: _emptyFunc,\n      render: _renderPropTweens,\n      add: _addPropTween,\n      kill: _killPropTweensOf,\n      modifier: _addPluginModifier,\n      rawVars: 0\n    },\n        statics = {\n      targetTest: 0,\n      get: 0,\n      getSetter: _getSetter,\n      aliases: {},\n      register: 0\n    };\n\n    _wake();\n\n    if (config !== Plugin) {\n      if (_plugins[name]) {\n        return;\n      }\n\n      _setDefaults(Plugin, _setDefaults(_copyExcluding(config, instanceDefaults), statics));\n\n      _merge(Plugin.prototype, _merge(instanceDefaults, _copyExcluding(config, statics)));\n\n      _plugins[Plugin.prop = name] = Plugin;\n\n      if (config.targetTest) {\n        _harnessPlugins.push(Plugin);\n\n        _reservedProps[name] = 1;\n      }\n\n      name = (name === \"css\" ? \"CSS\" : name.charAt(0).toUpperCase() + name.substr(1)) + \"Plugin\";\n    }\n\n    _addGlobal(name, Plugin);\n\n    config.register && config.register(gsap, Plugin, PropTween);\n  },\n      _255 = 255,\n      _colorLookup = {\n    aqua: [0, _255, _255],\n    lime: [0, _255, 0],\n    silver: [192, 192, 192],\n    black: [0, 0, 0],\n    maroon: [128, 0, 0],\n    teal: [0, 128, 128],\n    blue: [0, 0, _255],\n    navy: [0, 0, 128],\n    white: [_255, _255, _255],\n    olive: [128, 128, 0],\n    yellow: [_255, _255, 0],\n    orange: [_255, 165, 0],\n    gray: [128, 128, 128],\n    purple: [128, 0, 128],\n    green: [0, 128, 0],\n    red: [_255, 0, 0],\n    pink: [_255, 192, 203],\n    cyan: [0, _255, _255],\n    transparent: [_255, _255, _255, 0]\n  },\n      _hue = function _hue(h, m1, m2) {\n    h += h < 0 ? 1 : h > 1 ? -1 : 0;\n    return (h * 6 < 1 ? m1 + (m2 - m1) * h * 6 : h < .5 ? m2 : h * 3 < 2 ? m1 + (m2 - m1) * (2 / 3 - h) * 6 : m1) * _255 + .5 | 0;\n  },\n      splitColor = function splitColor(v, toHSL, forceAlpha) {\n    var a = !v ? _colorLookup.black : _isNumber(v) ? [v >> 16, v >> 8 & _255, v & _255] : 0,\n        r,\n        g,\n        b,\n        h,\n        s,\n        l,\n        max,\n        min,\n        d,\n        wasHSL;\n\n    if (!a) {\n      if (v.substr(-1) === \",\") {\n        v = v.substr(0, v.length - 1);\n      }\n\n      if (_colorLookup[v]) {\n        a = _colorLookup[v];\n      } else if (v.charAt(0) === \"#\") {\n        if (v.length < 6) {\n          r = v.charAt(1);\n          g = v.charAt(2);\n          b = v.charAt(3);\n          v = \"#\" + r + r + g + g + b + b + (v.length === 5 ? v.charAt(4) + v.charAt(4) : \"\");\n        }\n\n        if (v.length === 9) {\n          a = parseInt(v.substr(1, 6), 16);\n          return [a >> 16, a >> 8 & _255, a & _255, parseInt(v.substr(7), 16) / 255];\n        }\n\n        v = parseInt(v.substr(1), 16);\n        a = [v >> 16, v >> 8 & _255, v & _255];\n      } else if (v.substr(0, 3) === \"hsl\") {\n        a = wasHSL = v.match(_strictNumExp);\n\n        if (!toHSL) {\n          h = +a[0] % 360 / 360;\n          s = +a[1] / 100;\n          l = +a[2] / 100;\n          g = l <= .5 ? l * (s + 1) : l + s - l * s;\n          r = l * 2 - g;\n          a.length > 3 && (a[3] *= 1);\n          a[0] = _hue(h + 1 / 3, r, g);\n          a[1] = _hue(h, r, g);\n          a[2] = _hue(h - 1 / 3, r, g);\n        } else if (~v.indexOf(\"=\")) {\n          a = v.match(_numExp);\n          forceAlpha && a.length < 4 && (a[3] = 1);\n          return a;\n        }\n      } else {\n        a = v.match(_strictNumExp) || _colorLookup.transparent;\n      }\n\n      a = a.map(Number);\n    }\n\n    if (toHSL && !wasHSL) {\n      r = a[0] / _255;\n      g = a[1] / _255;\n      b = a[2] / _255;\n      max = Math.max(r, g, b);\n      min = Math.min(r, g, b);\n      l = (max + min) / 2;\n\n      if (max === min) {\n        h = s = 0;\n      } else {\n        d = max - min;\n        s = l > 0.5 ? d / (2 - max - min) : d / (max + min);\n        h = max === r ? (g - b) / d + (g < b ? 6 : 0) : max === g ? (b - r) / d + 2 : (r - g) / d + 4;\n        h *= 60;\n      }\n\n      a[0] = ~~(h + .5);\n      a[1] = ~~(s * 100 + .5);\n      a[2] = ~~(l * 100 + .5);\n    }\n\n    forceAlpha && a.length < 4 && (a[3] = 1);\n    return a;\n  },\n      _colorOrderData = function _colorOrderData(v) {\n    var values = [],\n        c = [],\n        i = -1;\n    v.split(_colorExp).forEach(function (v) {\n      var a = v.match(_numWithUnitExp) || [];\n      values.push.apply(values, a);\n      c.push(i += a.length + 1);\n    });\n    values.c = c;\n    return values;\n  },\n      _formatColors = function _formatColors(s, toHSL, orderMatchData) {\n    var result = \"\",\n        colors = (s + result).match(_colorExp),\n        type = toHSL ? \"hsla(\" : \"rgba(\",\n        i = 0,\n        c,\n        shell,\n        d,\n        l;\n\n    if (!colors) {\n      return s;\n    }\n\n    colors = colors.map(function (color) {\n      return (color = splitColor(color, toHSL, 1)) && type + (toHSL ? color[0] + \",\" + color[1] + \"%,\" + color[2] + \"%,\" + color[3] : color.join(\",\")) + \")\";\n    });\n\n    if (orderMatchData) {\n      d = _colorOrderData(s);\n      c = orderMatchData.c;\n\n      if (c.join(result) !== d.c.join(result)) {\n        shell = s.replace(_colorExp, \"1\").split(_numWithUnitExp);\n        l = shell.length - 1;\n\n        for (; i < l; i++) {\n          result += shell[i] + (~c.indexOf(i) ? colors.shift() || type + \"0,0,0,0)\" : (d.length ? d : colors.length ? colors : orderMatchData).shift());\n        }\n      }\n    }\n\n    if (!shell) {\n      shell = s.split(_colorExp);\n      l = shell.length - 1;\n\n      for (; i < l; i++) {\n        result += shell[i] + colors[i];\n      }\n    }\n\n    return result + shell[l];\n  },\n      _colorExp = function () {\n    var s = \"(?:\\\\b(?:(?:rgb|rgba|hsl|hsla)\\\\(.+?\\\\))|\\\\B#(?:[0-9a-f]{3,4}){1,2}\\\\b\",\n        p;\n\n    for (p in _colorLookup) {\n      s += \"|\" + p + \"\\\\b\";\n    }\n\n    return new RegExp(s + \")\", \"gi\");\n  }(),\n      _hslExp = /hsl[a]?\\(/,\n      _colorStringFilter = function _colorStringFilter(a) {\n    var combined = a.join(\" \"),\n        toHSL;\n    _colorExp.lastIndex = 0;\n\n    if (_colorExp.test(combined)) {\n      toHSL = _hslExp.test(combined);\n      a[1] = _formatColors(a[1], toHSL);\n      a[0] = _formatColors(a[0], toHSL, _colorOrderData(a[1]));\n      return true;\n    }\n  },\n      _tickerActive,\n      _ticker = function () {\n    var _getTime = Date.now,\n        _lagThreshold = 500,\n        _adjustedLag = 33,\n        _startTime = _getTime(),\n        _lastUpdate = _startTime,\n        _gap = 1000 / 240,\n        _nextTime = _gap,\n        _listeners = [],\n        _id,\n        _req,\n        _raf,\n        _self,\n        _delta,\n        _i,\n        _tick = function _tick(v) {\n      var elapsed = _getTime() - _lastUpdate,\n          manual = v === true,\n          overlap,\n          dispatch,\n          time,\n          frame;\n\n      elapsed > _lagThreshold && (_startTime += elapsed - _adjustedLag);\n      _lastUpdate += elapsed;\n      time = _lastUpdate - _startTime;\n      overlap = time - _nextTime;\n\n      if (overlap > 0 || manual) {\n        frame = ++_self.frame;\n        _delta = time - _self.time * 1000;\n        _self.time = time = time / 1000;\n        _nextTime += overlap + (overlap >= _gap ? 4 : _gap - overlap);\n        dispatch = 1;\n      }\n\n      manual || (_id = _req(_tick));\n\n      if (dispatch) {\n        for (_i = 0; _i < _listeners.length; _i++) {\n          _listeners[_i](time, _delta, frame, v);\n        }\n      }\n    };\n\n    _self = {\n      time: 0,\n      frame: 0,\n      tick: function tick() {\n        _tick(true);\n      },\n      deltaRatio: function deltaRatio(fps) {\n        return _delta / (1000 / (fps || 60));\n      },\n      wake: function wake() {\n        if (_coreReady) {\n          if (!_coreInitted && _windowExists()) {\n            _win = _coreInitted = window;\n            _doc = _win.document || {};\n            _globals.gsap = gsap;\n            (_win.gsapVersions || (_win.gsapVersions = [])).push(gsap.version);\n\n            _install(_installScope || _win.GreenSockGlobals || !_win.gsap && _win || {});\n\n            _raf = _win.requestAnimationFrame;\n\n            _registerPluginQueue.forEach(_createPlugin);\n          }\n\n          _id && _self.sleep();\n\n          _req = _raf || function (f) {\n            return setTimeout(f, _nextTime - _self.time * 1000 + 1 | 0);\n          };\n\n          _tickerActive = 1;\n\n          _tick(2);\n        }\n      },\n      sleep: function sleep() {\n        (_raf ? _win.cancelAnimationFrame : clearTimeout)(_id);\n        _tickerActive = 0;\n        _req = _emptyFunc;\n      },\n      lagSmoothing: function lagSmoothing(threshold, adjustedLag) {\n        _lagThreshold = threshold || Infinity;\n        _adjustedLag = Math.min(adjustedLag || 33, _lagThreshold);\n      },\n      fps: function fps(_fps) {\n        _gap = 1000 / (_fps || 240);\n        _nextTime = _self.time * 1000 + _gap;\n      },\n      add: function add(callback, once, prioritize) {\n        var func = once ? function (t, d, f, v) {\n          callback(t, d, f, v);\n\n          _self.remove(func);\n        } : callback;\n\n        _self.remove(callback);\n\n        _listeners[prioritize ? \"unshift\" : \"push\"](func);\n\n        _wake();\n\n        return func;\n      },\n      remove: function remove(callback, i) {\n        ~(i = _listeners.indexOf(callback)) && _listeners.splice(i, 1) && _i >= i && _i--;\n      },\n      _listeners: _listeners\n    };\n    return _self;\n  }(),\n      _wake = function _wake() {\n    return !_tickerActive && _ticker.wake();\n  },\n      _easeMap = {},\n      _customEaseExp = /^[\\d.\\-M][\\d.\\-,\\s]/,\n      _quotesExp = /[\"']/g,\n      _parseObjectInString = function _parseObjectInString(value) {\n    var obj = {},\n        split = value.substr(1, value.length - 3).split(\":\"),\n        key = split[0],\n        i = 1,\n        l = split.length,\n        index,\n        val,\n        parsedVal;\n\n    for (; i < l; i++) {\n      val = split[i];\n      index = i !== l - 1 ? val.lastIndexOf(\",\") : val.length;\n      parsedVal = val.substr(0, index);\n      obj[key] = isNaN(parsedVal) ? parsedVal.replace(_quotesExp, \"\").trim() : +parsedVal;\n      key = val.substr(index + 1).trim();\n    }\n\n    return obj;\n  },\n      _valueInParentheses = function _valueInParentheses(value) {\n    var open = value.indexOf(\"(\") + 1,\n        close = value.indexOf(\")\"),\n        nested = value.indexOf(\"(\", open);\n    return value.substring(open, ~nested && nested < close ? value.indexOf(\")\", close + 1) : close);\n  },\n      _configEaseFromString = function _configEaseFromString(name) {\n    var split = (name + \"\").split(\"(\"),\n        ease = _easeMap[split[0]];\n    return ease && split.length > 1 && ease.config ? ease.config.apply(null, ~name.indexOf(\"{\") ? [_parseObjectInString(split[1])] : _valueInParentheses(name).split(\",\").map(_numericIfPossible)) : _easeMap._CE && _customEaseExp.test(name) ? _easeMap._CE(\"\", name) : ease;\n  },\n      _invertEase = function _invertEase(ease) {\n    return function (p) {\n      return 1 - ease(1 - p);\n    };\n  },\n      _propagateYoyoEase = function _propagateYoyoEase(timeline, isYoyo) {\n    var child = timeline._first,\n        ease;\n\n    while (child) {\n      if (child instanceof Timeline) {\n        _propagateYoyoEase(child, isYoyo);\n      } else if (child.vars.yoyoEase && (!child._yoyo || !child._repeat) && child._yoyo !== isYoyo) {\n        if (child.timeline) {\n          _propagateYoyoEase(child.timeline, isYoyo);\n        } else {\n          ease = child._ease;\n          child._ease = child._yEase;\n          child._yEase = ease;\n          child._yoyo = isYoyo;\n        }\n      }\n\n      child = child._next;\n    }\n  },\n      _parseEase = function _parseEase(ease, defaultEase) {\n    return !ease ? defaultEase : (_isFunction(ease) ? ease : _easeMap[ease] || _configEaseFromString(ease)) || defaultEase;\n  },\n      _insertEase = function _insertEase(names, easeIn, easeOut, easeInOut) {\n    if (easeOut === void 0) {\n      easeOut = function easeOut(p) {\n        return 1 - easeIn(1 - p);\n      };\n    }\n\n    if (easeInOut === void 0) {\n      easeInOut = function easeInOut(p) {\n        return p < .5 ? easeIn(p * 2) / 2 : 1 - easeIn((1 - p) * 2) / 2;\n      };\n    }\n\n    var ease = {\n      easeIn: easeIn,\n      easeOut: easeOut,\n      easeInOut: easeInOut\n    },\n        lowercaseName;\n\n    _forEachName(names, function (name) {\n      _easeMap[name] = _globals[name] = ease;\n      _easeMap[lowercaseName = name.toLowerCase()] = easeOut;\n\n      for (var p in ease) {\n        _easeMap[lowercaseName + (p === \"easeIn\" ? \".in\" : p === \"easeOut\" ? \".out\" : \".inOut\")] = _easeMap[name + \".\" + p] = ease[p];\n      }\n    });\n\n    return ease;\n  },\n      _easeInOutFromOut = function _easeInOutFromOut(easeOut) {\n    return function (p) {\n      return p < .5 ? (1 - easeOut(1 - p * 2)) / 2 : .5 + easeOut((p - .5) * 2) / 2;\n    };\n  },\n      _configElastic = function _configElastic(type, amplitude, period) {\n    var p1 = amplitude >= 1 ? amplitude : 1,\n        p2 = (period || (type ? .3 : .45)) / (amplitude < 1 ? amplitude : 1),\n        p3 = p2 / _2PI * (Math.asin(1 / p1) || 0),\n        easeOut = function easeOut(p) {\n      return p === 1 ? 1 : p1 * Math.pow(2, -10 * p) * _sin((p - p3) * p2) + 1;\n    },\n        ease = type === \"out\" ? easeOut : type === \"in\" ? function (p) {\n      return 1 - easeOut(1 - p);\n    } : _easeInOutFromOut(easeOut);\n\n    p2 = _2PI / p2;\n\n    ease.config = function (amplitude, period) {\n      return _configElastic(type, amplitude, period);\n    };\n\n    return ease;\n  },\n      _configBack = function _configBack(type, overshoot) {\n    if (overshoot === void 0) {\n      overshoot = 1.70158;\n    }\n\n    var easeOut = function easeOut(p) {\n      return p ? --p * p * ((overshoot + 1) * p + overshoot) + 1 : 0;\n    },\n        ease = type === \"out\" ? easeOut : type === \"in\" ? function (p) {\n      return 1 - easeOut(1 - p);\n    } : _easeInOutFromOut(easeOut);\n\n    ease.config = function (overshoot) {\n      return _configBack(type, overshoot);\n    };\n\n    return ease;\n  };\n\n  _forEachName(\"Linear,Quad,Cubic,Quart,Quint,Strong\", function (name, i) {\n    var power = i < 5 ? i + 1 : i;\n\n    _insertEase(name + \",Power\" + (power - 1), i ? function (p) {\n      return Math.pow(p, power);\n    } : function (p) {\n      return p;\n    }, function (p) {\n      return 1 - Math.pow(1 - p, power);\n    }, function (p) {\n      return p < .5 ? Math.pow(p * 2, power) / 2 : 1 - Math.pow((1 - p) * 2, power) / 2;\n    });\n  });\n\n  _easeMap.Linear.easeNone = _easeMap.none = _easeMap.Linear.easeIn;\n\n  _insertEase(\"Elastic\", _configElastic(\"in\"), _configElastic(\"out\"), _configElastic());\n\n  (function (n, c) {\n    var n1 = 1 / c,\n        n2 = 2 * n1,\n        n3 = 2.5 * n1,\n        easeOut = function easeOut(p) {\n      return p < n1 ? n * p * p : p < n2 ? n * Math.pow(p - 1.5 / c, 2) + .75 : p < n3 ? n * (p -= 2.25 / c) * p + .9375 : n * Math.pow(p - 2.625 / c, 2) + .984375;\n    };\n\n    _insertEase(\"Bounce\", function (p) {\n      return 1 - easeOut(1 - p);\n    }, easeOut);\n  })(7.5625, 2.75);\n\n  _insertEase(\"Expo\", function (p) {\n    return p ? Math.pow(2, 10 * (p - 1)) : 0;\n  });\n\n  _insertEase(\"Circ\", function (p) {\n    return -(_sqrt(1 - p * p) - 1);\n  });\n\n  _insertEase(\"Sine\", function (p) {\n    return p === 1 ? 1 : -_cos(p * _HALF_PI) + 1;\n  });\n\n  _insertEase(\"Back\", _configBack(\"in\"), _configBack(\"out\"), _configBack());\n\n  _easeMap.SteppedEase = _easeMap.steps = _globals.SteppedEase = {\n    config: function config(steps, immediateStart) {\n      if (steps === void 0) {\n        steps = 1;\n      }\n\n      var p1 = 1 / steps,\n          p2 = steps + (immediateStart ? 0 : 1),\n          p3 = immediateStart ? 1 : 0,\n          max = 1 - _tinyNum;\n      return function (p) {\n        return ((p2 * _clamp(0, max, p) | 0) + p3) * p1;\n      };\n    }\n  };\n  _defaults.ease = _easeMap[\"quad.out\"];\n\n  _forEachName(\"onComplete,onUpdate,onStart,onRepeat,onReverseComplete,onInterrupt\", function (name) {\n    return _callbackNames += name + \",\" + name + \"Params,\";\n  });\n\n  var GSCache = function GSCache(target, harness) {\n    this.id = _gsID++;\n    target._gsap = this;\n    this.target = target;\n    this.harness = harness;\n    this.get = harness ? harness.get : _getProperty;\n    this.set = harness ? harness.getSetter : _getSetter;\n  };\n  var Animation = function () {\n    function Animation(vars) {\n      this.vars = vars;\n      this._delay = +vars.delay || 0;\n\n      if (this._repeat = vars.repeat === Infinity ? -2 : vars.repeat || 0) {\n        this._rDelay = vars.repeatDelay || 0;\n        this._yoyo = !!vars.yoyo || !!vars.yoyoEase;\n      }\n\n      this._ts = 1;\n\n      _setDuration(this, +vars.duration, 1, 1);\n\n      this.data = vars.data;\n\n      if (_context) {\n        this._ctx = _context;\n\n        _context.data.push(this);\n      }\n\n      _tickerActive || _ticker.wake();\n    }\n\n    var _proto = Animation.prototype;\n\n    _proto.delay = function delay(value) {\n      if (value || value === 0) {\n        this.parent && this.parent.smoothChildTiming && this.startTime(this._start + value - this._delay);\n        this._delay = value;\n        return this;\n      }\n\n      return this._delay;\n    };\n\n    _proto.duration = function duration(value) {\n      return arguments.length ? this.totalDuration(this._repeat > 0 ? value + (value + this._rDelay) * this._repeat : value) : this.totalDuration() && this._dur;\n    };\n\n    _proto.totalDuration = function totalDuration(value) {\n      if (!arguments.length) {\n        return this._tDur;\n      }\n\n      this._dirty = 0;\n      return _setDuration(this, this._repeat < 0 ? value : (value - this._repeat * this._rDelay) / (this._repeat + 1));\n    };\n\n    _proto.totalTime = function totalTime(_totalTime, suppressEvents) {\n      _wake();\n\n      if (!arguments.length) {\n        return this._tTime;\n      }\n\n      var parent = this._dp;\n\n      if (parent && parent.smoothChildTiming && this._ts) {\n        _alignPlayhead(this, _totalTime);\n\n        !parent._dp || parent.parent || _postAddChecks(parent, this);\n\n        while (parent && parent.parent) {\n          if (parent.parent._time !== parent._start + (parent._ts >= 0 ? parent._tTime / parent._ts : (parent.totalDuration() - parent._tTime) / -parent._ts)) {\n            parent.totalTime(parent._tTime, true);\n          }\n\n          parent = parent.parent;\n        }\n\n        if (!this.parent && this._dp.autoRemoveChildren && (this._ts > 0 && _totalTime < this._tDur || this._ts < 0 && _totalTime > 0 || !this._tDur && !_totalTime)) {\n          _addToTimeline(this._dp, this, this._start - this._delay);\n        }\n      }\n\n      if (this._tTime !== _totalTime || !this._dur && !suppressEvents || this._initted && Math.abs(this._zTime) === _tinyNum || !_totalTime && !this._initted && (this.add || this._ptLookup)) {\n        this._ts || (this._pTime = _totalTime);\n\n        _lazySafeRender(this, _totalTime, suppressEvents);\n      }\n\n      return this;\n    };\n\n    _proto.time = function time(value, suppressEvents) {\n      return arguments.length ? this.totalTime(Math.min(this.totalDuration(), value + _elapsedCycleDuration(this)) % (this._dur + this._rDelay) || (value ? this._dur : 0), suppressEvents) : this._time;\n    };\n\n    _proto.totalProgress = function totalProgress(value, suppressEvents) {\n      return arguments.length ? this.totalTime(this.totalDuration() * value, suppressEvents) : this.totalDuration() ? Math.min(1, this._tTime / this._tDur) : this.ratio;\n    };\n\n    _proto.progress = function progress(value, suppressEvents) {\n      return arguments.length ? this.totalTime(this.duration() * (this._yoyo && !(this.iteration() & 1) ? 1 - value : value) + _elapsedCycleDuration(this), suppressEvents) : this.duration() ? Math.min(1, this._time / this._dur) : this.ratio;\n    };\n\n    _proto.iteration = function iteration(value, suppressEvents) {\n      var cycleDuration = this.duration() + this._rDelay;\n\n      return arguments.length ? this.totalTime(this._time + (value - 1) * cycleDuration, suppressEvents) : this._repeat ? _animationCycle(this._tTime, cycleDuration) + 1 : 1;\n    };\n\n    _proto.timeScale = function timeScale(value) {\n      if (!arguments.length) {\n        return this._rts === -_tinyNum ? 0 : this._rts;\n      }\n\n      if (this._rts === value) {\n        return this;\n      }\n\n      var tTime = this.parent && this._ts ? _parentToChildTotalTime(this.parent._time, this) : this._tTime;\n      this._rts = +value || 0;\n      this._ts = this._ps || value === -_tinyNum ? 0 : this._rts;\n      this.totalTime(_clamp(-Math.abs(this._delay), this._tDur, tTime), true);\n\n      _setEnd(this);\n\n      return _recacheAncestors(this);\n    };\n\n    _proto.paused = function paused(value) {\n      if (!arguments.length) {\n        return this._ps;\n      }\n\n      if (this._ps !== value) {\n        this._ps = value;\n\n        if (value) {\n          this._pTime = this._tTime || Math.max(-this._delay, this.rawTime());\n          this._ts = this._act = 0;\n        } else {\n          _wake();\n\n          this._ts = this._rts;\n          this.totalTime(this.parent && !this.parent.smoothChildTiming ? this.rawTime() : this._tTime || this._pTime, this.progress() === 1 && Math.abs(this._zTime) !== _tinyNum && (this._tTime -= _tinyNum));\n        }\n      }\n\n      return this;\n    };\n\n    _proto.startTime = function startTime(value) {\n      if (arguments.length) {\n        this._start = value;\n        var parent = this.parent || this._dp;\n        parent && (parent._sort || !this.parent) && _addToTimeline(parent, this, value - this._delay);\n        return this;\n      }\n\n      return this._start;\n    };\n\n    _proto.endTime = function endTime(includeRepeats) {\n      return this._start + (_isNotFalse(includeRepeats) ? this.totalDuration() : this.duration()) / Math.abs(this._ts || 1);\n    };\n\n    _proto.rawTime = function rawTime(wrapRepeats) {\n      var parent = this.parent || this._dp;\n      return !parent ? this._tTime : wrapRepeats && (!this._ts || this._repeat && this._time && this.totalProgress() < 1) ? this._tTime % (this._dur + this._rDelay) : !this._ts ? this._tTime : _parentToChildTotalTime(parent.rawTime(wrapRepeats), this);\n    };\n\n    _proto.revert = function revert(config) {\n      if (config === void 0) {\n        config = _revertConfig;\n      }\n\n      var prevIsReverting = _reverting;\n      _reverting = config;\n\n      if (this._initted || this._startAt) {\n        this.timeline && this.timeline.revert(config);\n        this.totalTime(-0.01, config.suppressEvents);\n      }\n\n      this.data !== \"nested\" && config.kill !== false && this.kill();\n      _reverting = prevIsReverting;\n      return this;\n    };\n\n    _proto.globalTime = function globalTime(rawTime) {\n      var animation = this,\n          time = arguments.length ? rawTime : animation.rawTime();\n\n      while (animation) {\n        time = animation._start + time / (animation._ts || 1);\n        animation = animation._dp;\n      }\n\n      return !this.parent && this._sat ? this._sat.vars.immediateRender ? -1 : this._sat.globalTime(rawTime) : time;\n    };\n\n    _proto.repeat = function repeat(value) {\n      if (arguments.length) {\n        this._repeat = value === Infinity ? -2 : value;\n        return _onUpdateTotalDuration(this);\n      }\n\n      return this._repeat === -2 ? Infinity : this._repeat;\n    };\n\n    _proto.repeatDelay = function repeatDelay(value) {\n      if (arguments.length) {\n        var time = this._time;\n        this._rDelay = value;\n\n        _onUpdateTotalDuration(this);\n\n        return time ? this.time(time) : this;\n      }\n\n      return this._rDelay;\n    };\n\n    _proto.yoyo = function yoyo(value) {\n      if (arguments.length) {\n        this._yoyo = value;\n        return this;\n      }\n\n      return this._yoyo;\n    };\n\n    _proto.seek = function seek(position, suppressEvents) {\n      return this.totalTime(_parsePosition(this, position), _isNotFalse(suppressEvents));\n    };\n\n    _proto.restart = function restart(includeDelay, suppressEvents) {\n      return this.play().totalTime(includeDelay ? -this._delay : 0, _isNotFalse(suppressEvents));\n    };\n\n    _proto.play = function play(from, suppressEvents) {\n      from != null && this.seek(from, suppressEvents);\n      return this.reversed(false).paused(false);\n    };\n\n    _proto.reverse = function reverse(from, suppressEvents) {\n      from != null && this.seek(from || this.totalDuration(), suppressEvents);\n      return this.reversed(true).paused(false);\n    };\n\n    _proto.pause = function pause(atTime, suppressEvents) {\n      atTime != null && this.seek(atTime, suppressEvents);\n      return this.paused(true);\n    };\n\n    _proto.resume = function resume() {\n      return this.paused(false);\n    };\n\n    _proto.reversed = function reversed(value) {\n      if (arguments.length) {\n        !!value !== this.reversed() && this.timeScale(-this._rts || (value ? -_tinyNum : 0));\n        return this;\n      }\n\n      return this._rts < 0;\n    };\n\n    _proto.invalidate = function invalidate() {\n      this._initted = this._act = 0;\n      this._zTime = -_tinyNum;\n      return this;\n    };\n\n    _proto.isActive = function isActive() {\n      var parent = this.parent || this._dp,\n          start = this._start,\n          rawTime;\n      return !!(!parent || this._ts && this._initted && parent.isActive() && (rawTime = parent.rawTime(true)) >= start && rawTime < this.endTime(true) - _tinyNum);\n    };\n\n    _proto.eventCallback = function eventCallback(type, callback, params) {\n      var vars = this.vars;\n\n      if (arguments.length > 1) {\n        if (!callback) {\n          delete vars[type];\n        } else {\n          vars[type] = callback;\n          params && (vars[type + \"Params\"] = params);\n          type === \"onUpdate\" && (this._onUpdate = callback);\n        }\n\n        return this;\n      }\n\n      return vars[type];\n    };\n\n    _proto.then = function then(onFulfilled) {\n      var self = this;\n      return new Promise(function (resolve) {\n        var f = _isFunction(onFulfilled) ? onFulfilled : _passThrough,\n            _resolve = function _resolve() {\n          var _then = self.then;\n          self.then = null;\n          _isFunction(f) && (f = f(self)) && (f.then || f === self) && (self.then = _then);\n          resolve(f);\n          self.then = _then;\n        };\n\n        if (self._initted && self.totalProgress() === 1 && self._ts >= 0 || !self._tTime && self._ts < 0) {\n          _resolve();\n        } else {\n          self._prom = _resolve;\n        }\n      });\n    };\n\n    _proto.kill = function kill() {\n      _interrupt(this);\n    };\n\n    return Animation;\n  }();\n\n  _setDefaults(Animation.prototype, {\n    _time: 0,\n    _start: 0,\n    _end: 0,\n    _tTime: 0,\n    _tDur: 0,\n    _dirty: 0,\n    _repeat: 0,\n    _yoyo: false,\n    parent: null,\n    _initted: false,\n    _rDelay: 0,\n    _ts: 1,\n    _dp: 0,\n    ratio: 0,\n    _zTime: -_tinyNum,\n    _prom: 0,\n    _ps: false,\n    _rts: 1\n  });\n\n  var Timeline = function (_Animation) {\n    _inheritsLoose(Timeline, _Animation);\n\n    function Timeline(vars, position) {\n      var _this;\n\n      if (vars === void 0) {\n        vars = {};\n      }\n\n      _this = _Animation.call(this, vars) || this;\n      _this.labels = {};\n      _this.smoothChildTiming = !!vars.smoothChildTiming;\n      _this.autoRemoveChildren = !!vars.autoRemoveChildren;\n      _this._sort = _isNotFalse(vars.sortChildren);\n      _globalTimeline && _addToTimeline(vars.parent || _globalTimeline, _assertThisInitialized(_this), position);\n      vars.reversed && _this.reverse();\n      vars.paused && _this.paused(true);\n      vars.scrollTrigger && _scrollTrigger(_assertThisInitialized(_this), vars.scrollTrigger);\n      return _this;\n    }\n\n    var _proto2 = Timeline.prototype;\n\n    _proto2.to = function to(targets, vars, position) {\n      _createTweenType(0, arguments, this);\n\n      return this;\n    };\n\n    _proto2.from = function from(targets, vars, position) {\n      _createTweenType(1, arguments, this);\n\n      return this;\n    };\n\n    _proto2.fromTo = function fromTo(targets, fromVars, toVars, position) {\n      _createTweenType(2, arguments, this);\n\n      return this;\n    };\n\n    _proto2.set = function set(targets, vars, position) {\n      vars.duration = 0;\n      vars.parent = this;\n      _inheritDefaults(vars).repeatDelay || (vars.repeat = 0);\n      vars.immediateRender = !!vars.immediateRender;\n      new Tween(targets, vars, _parsePosition(this, position), 1);\n      return this;\n    };\n\n    _proto2.call = function call(callback, params, position) {\n      return _addToTimeline(this, Tween.delayedCall(0, callback, params), position);\n    };\n\n    _proto2.staggerTo = function staggerTo(targets, duration, vars, stagger, position, onCompleteAll, onCompleteAllParams) {\n      vars.duration = duration;\n      vars.stagger = vars.stagger || stagger;\n      vars.onComplete = onCompleteAll;\n      vars.onCompleteParams = onCompleteAllParams;\n      vars.parent = this;\n      new Tween(targets, vars, _parsePosition(this, position));\n      return this;\n    };\n\n    _proto2.staggerFrom = function staggerFrom(targets, duration, vars, stagger, position, onCompleteAll, onCompleteAllParams) {\n      vars.runBackwards = 1;\n      _inheritDefaults(vars).immediateRender = _isNotFalse(vars.immediateRender);\n      return this.staggerTo(targets, duration, vars, stagger, position, onCompleteAll, onCompleteAllParams);\n    };\n\n    _proto2.staggerFromTo = function staggerFromTo(targets, duration, fromVars, toVars, stagger, position, onCompleteAll, onCompleteAllParams) {\n      toVars.startAt = fromVars;\n      _inheritDefaults(toVars).immediateRender = _isNotFalse(toVars.immediateRender);\n      return this.staggerTo(targets, duration, toVars, stagger, position, onCompleteAll, onCompleteAllParams);\n    };\n\n    _proto2.render = function render(totalTime, suppressEvents, force) {\n      var prevTime = this._time,\n          tDur = this._dirty ? this.totalDuration() : this._tDur,\n          dur = this._dur,\n          tTime = totalTime <= 0 ? 0 : _roundPrecise(totalTime),\n          crossingStart = this._zTime < 0 !== totalTime < 0 && (this._initted || !dur),\n          time,\n          child,\n          next,\n          iteration,\n          cycleDuration,\n          prevPaused,\n          pauseTween,\n          timeScale,\n          prevStart,\n          prevIteration,\n          yoyo,\n          isYoyo;\n      this !== _globalTimeline && tTime > tDur && totalTime >= 0 && (tTime = tDur);\n\n      if (tTime !== this._tTime || force || crossingStart) {\n        if (prevTime !== this._time && dur) {\n          tTime += this._time - prevTime;\n          totalTime += this._time - prevTime;\n        }\n\n        time = tTime;\n        prevStart = this._start;\n        timeScale = this._ts;\n        prevPaused = !timeScale;\n\n        if (crossingStart) {\n          dur || (prevTime = this._zTime);\n          (totalTime || !suppressEvents) && (this._zTime = totalTime);\n        }\n\n        if (this._repeat) {\n          yoyo = this._yoyo;\n          cycleDuration = dur + this._rDelay;\n\n          if (this._repeat < -1 && totalTime < 0) {\n            return this.totalTime(cycleDuration * 100 + totalTime, suppressEvents, force);\n          }\n\n          time = _roundPrecise(tTime % cycleDuration);\n\n          if (tTime === tDur) {\n            iteration = this._repeat;\n            time = dur;\n          } else {\n            iteration = ~~(tTime / cycleDuration);\n\n            if (iteration && iteration === tTime / cycleDuration) {\n              time = dur;\n              iteration--;\n            }\n\n            time > dur && (time = dur);\n          }\n\n          prevIteration = _animationCycle(this._tTime, cycleDuration);\n          !prevTime && this._tTime && prevIteration !== iteration && this._tTime - prevIteration * cycleDuration - this._dur <= 0 && (prevIteration = iteration);\n\n          if (yoyo && iteration & 1) {\n            time = dur - time;\n            isYoyo = 1;\n          }\n\n          if (iteration !== prevIteration && !this._lock) {\n            var rewinding = yoyo && prevIteration & 1,\n                doesWrap = rewinding === (yoyo && iteration & 1);\n            iteration < prevIteration && (rewinding = !rewinding);\n            prevTime = rewinding ? 0 : dur;\n            this._lock = 1;\n            this.render(prevTime || (isYoyo ? 0 : _roundPrecise(iteration * cycleDuration)), suppressEvents, !dur)._lock = 0;\n            this._tTime = tTime;\n            !suppressEvents && this.parent && _callback(this, \"onRepeat\");\n            this.vars.repeatRefresh && !isYoyo && (this.invalidate()._lock = 1);\n\n            if (prevTime && prevTime !== this._time || prevPaused !== !this._ts || this.vars.onRepeat && !this.parent && !this._act) {\n              return this;\n            }\n\n            dur = this._dur;\n            tDur = this._tDur;\n\n            if (doesWrap) {\n              this._lock = 2;\n              prevTime = rewinding ? dur : -0.0001;\n              this.render(prevTime, true);\n              this.vars.repeatRefresh && !isYoyo && this.invalidate();\n            }\n\n            this._lock = 0;\n\n            if (!this._ts && !prevPaused) {\n              return this;\n            }\n\n            _propagateYoyoEase(this, isYoyo);\n          }\n        }\n\n        if (this._hasPause && !this._forcing && this._lock < 2) {\n          pauseTween = _findNextPauseTween(this, _roundPrecise(prevTime), _roundPrecise(time));\n\n          if (pauseTween) {\n            tTime -= time - (time = pauseTween._start);\n          }\n        }\n\n        this._tTime = tTime;\n        this._time = time;\n        this._act = !timeScale;\n\n        if (!this._initted) {\n          this._onUpdate = this.vars.onUpdate;\n          this._initted = 1;\n          this._zTime = totalTime;\n          prevTime = 0;\n        }\n\n        if (!prevTime && time && !suppressEvents && !iteration) {\n          _callback(this, \"onStart\");\n\n          if (this._tTime !== tTime) {\n            return this;\n          }\n        }\n\n        if (time >= prevTime && totalTime >= 0) {\n          child = this._first;\n\n          while (child) {\n            next = child._next;\n\n            if ((child._act || time >= child._start) && child._ts && pauseTween !== child) {\n              if (child.parent !== this) {\n                return this.render(totalTime, suppressEvents, force);\n              }\n\n              child.render(child._ts > 0 ? (time - child._start) * child._ts : (child._dirty ? child.totalDuration() : child._tDur) + (time - child._start) * child._ts, suppressEvents, force);\n\n              if (time !== this._time || !this._ts && !prevPaused) {\n                pauseTween = 0;\n                next && (tTime += this._zTime = -_tinyNum);\n                break;\n              }\n            }\n\n            child = next;\n          }\n        } else {\n          child = this._last;\n          var adjustedTime = totalTime < 0 ? totalTime : time;\n\n          while (child) {\n            next = child._prev;\n\n            if ((child._act || adjustedTime <= child._end) && child._ts && pauseTween !== child) {\n              if (child.parent !== this) {\n                return this.render(totalTime, suppressEvents, force);\n              }\n\n              child.render(child._ts > 0 ? (adjustedTime - child._start) * child._ts : (child._dirty ? child.totalDuration() : child._tDur) + (adjustedTime - child._start) * child._ts, suppressEvents, force || _reverting && (child._initted || child._startAt));\n\n              if (time !== this._time || !this._ts && !prevPaused) {\n                pauseTween = 0;\n                next && (tTime += this._zTime = adjustedTime ? -_tinyNum : _tinyNum);\n                break;\n              }\n            }\n\n            child = next;\n          }\n        }\n\n        if (pauseTween && !suppressEvents) {\n          this.pause();\n          pauseTween.render(time >= prevTime ? 0 : -_tinyNum)._zTime = time >= prevTime ? 1 : -1;\n\n          if (this._ts) {\n            this._start = prevStart;\n\n            _setEnd(this);\n\n            return this.render(totalTime, suppressEvents, force);\n          }\n        }\n\n        this._onUpdate && !suppressEvents && _callback(this, \"onUpdate\", true);\n        if (tTime === tDur && this._tTime >= this.totalDuration() || !tTime && prevTime) if (prevStart === this._start || Math.abs(timeScale) !== Math.abs(this._ts)) if (!this._lock) {\n          (totalTime || !dur) && (tTime === tDur && this._ts > 0 || !tTime && this._ts < 0) && _removeFromParent(this, 1);\n\n          if (!suppressEvents && !(totalTime < 0 && !prevTime) && (tTime || prevTime || !tDur)) {\n            _callback(this, tTime === tDur && totalTime >= 0 ? \"onComplete\" : \"onReverseComplete\", true);\n\n            this._prom && !(tTime < tDur && this.timeScale() > 0) && this._prom();\n          }\n        }\n      }\n\n      return this;\n    };\n\n    _proto2.add = function add(child, position) {\n      var _this2 = this;\n\n      _isNumber(position) || (position = _parsePosition(this, position, child));\n\n      if (!(child instanceof Animation)) {\n        if (_isArray(child)) {\n          child.forEach(function (obj) {\n            return _this2.add(obj, position);\n          });\n          return this;\n        }\n\n        if (_isString(child)) {\n          return this.addLabel(child, position);\n        }\n\n        if (_isFunction(child)) {\n          child = Tween.delayedCall(0, child);\n        } else {\n          return this;\n        }\n      }\n\n      return this !== child ? _addToTimeline(this, child, position) : this;\n    };\n\n    _proto2.getChildren = function getChildren(nested, tweens, timelines, ignoreBeforeTime) {\n      if (nested === void 0) {\n        nested = true;\n      }\n\n      if (tweens === void 0) {\n        tweens = true;\n      }\n\n      if (timelines === void 0) {\n        timelines = true;\n      }\n\n      if (ignoreBeforeTime === void 0) {\n        ignoreBeforeTime = -_bigNum;\n      }\n\n      var a = [],\n          child = this._first;\n\n      while (child) {\n        if (child._start >= ignoreBeforeTime) {\n          if (child instanceof Tween) {\n            tweens && a.push(child);\n          } else {\n            timelines && a.push(child);\n            nested && a.push.apply(a, child.getChildren(true, tweens, timelines));\n          }\n        }\n\n        child = child._next;\n      }\n\n      return a;\n    };\n\n    _proto2.getById = function getById(id) {\n      var animations = this.getChildren(1, 1, 1),\n          i = animations.length;\n\n      while (i--) {\n        if (animations[i].vars.id === id) {\n          return animations[i];\n        }\n      }\n    };\n\n    _proto2.remove = function remove(child) {\n      if (_isString(child)) {\n        return this.removeLabel(child);\n      }\n\n      if (_isFunction(child)) {\n        return this.killTweensOf(child);\n      }\n\n      _removeLinkedListItem(this, child);\n\n      if (child === this._recent) {\n        this._recent = this._last;\n      }\n\n      return _uncache(this);\n    };\n\n    _proto2.totalTime = function totalTime(_totalTime2, suppressEvents) {\n      if (!arguments.length) {\n        return this._tTime;\n      }\n\n      this._forcing = 1;\n\n      if (!this._dp && this._ts) {\n        this._start = _roundPrecise(_ticker.time - (this._ts > 0 ? _totalTime2 / this._ts : (this.totalDuration() - _totalTime2) / -this._ts));\n      }\n\n      _Animation.prototype.totalTime.call(this, _totalTime2, suppressEvents);\n\n      this._forcing = 0;\n      return this;\n    };\n\n    _proto2.addLabel = function addLabel(label, position) {\n      this.labels[label] = _parsePosition(this, position);\n      return this;\n    };\n\n    _proto2.removeLabel = function removeLabel(label) {\n      delete this.labels[label];\n      return this;\n    };\n\n    _proto2.addPause = function addPause(position, callback, params) {\n      var t = Tween.delayedCall(0, callback || _emptyFunc, params);\n      t.data = \"isPause\";\n      this._hasPause = 1;\n      return _addToTimeline(this, t, _parsePosition(this, position));\n    };\n\n    _proto2.removePause = function removePause(position) {\n      var child = this._first;\n      position = _parsePosition(this, position);\n\n      while (child) {\n        if (child._start === position && child.data === \"isPause\") {\n          _removeFromParent(child);\n        }\n\n        child = child._next;\n      }\n    };\n\n    _proto2.killTweensOf = function killTweensOf(targets, props, onlyActive) {\n      var tweens = this.getTweensOf(targets, onlyActive),\n          i = tweens.length;\n\n      while (i--) {\n        _overwritingTween !== tweens[i] && tweens[i].kill(targets, props);\n      }\n\n      return this;\n    };\n\n    _proto2.getTweensOf = function getTweensOf(targets, onlyActive) {\n      var a = [],\n          parsedTargets = toArray(targets),\n          child = this._first,\n          isGlobalTime = _isNumber(onlyActive),\n          children;\n\n      while (child) {\n        if (child instanceof Tween) {\n          if (_arrayContainsAny(child._targets, parsedTargets) && (isGlobalTime ? (!_overwritingTween || child._initted && child._ts) && child.globalTime(0) <= onlyActive && child.globalTime(child.totalDuration()) > onlyActive : !onlyActive || child.isActive())) {\n            a.push(child);\n          }\n        } else if ((children = child.getTweensOf(parsedTargets, onlyActive)).length) {\n          a.push.apply(a, children);\n        }\n\n        child = child._next;\n      }\n\n      return a;\n    };\n\n    _proto2.tweenTo = function tweenTo(position, vars) {\n      vars = vars || {};\n\n      var tl = this,\n          endTime = _parsePosition(tl, position),\n          _vars = vars,\n          startAt = _vars.startAt,\n          _onStart = _vars.onStart,\n          onStartParams = _vars.onStartParams,\n          immediateRender = _vars.immediateRender,\n          initted,\n          tween = Tween.to(tl, _setDefaults({\n        ease: vars.ease || \"none\",\n        lazy: false,\n        immediateRender: false,\n        time: endTime,\n        overwrite: \"auto\",\n        duration: vars.duration || Math.abs((endTime - (startAt && \"time\" in startAt ? startAt.time : tl._time)) / tl.timeScale()) || _tinyNum,\n        onStart: function onStart() {\n          tl.pause();\n\n          if (!initted) {\n            var duration = vars.duration || Math.abs((endTime - (startAt && \"time\" in startAt ? startAt.time : tl._time)) / tl.timeScale());\n            tween._dur !== duration && _setDuration(tween, duration, 0, 1).render(tween._time, true, true);\n            initted = 1;\n          }\n\n          _onStart && _onStart.apply(tween, onStartParams || []);\n        }\n      }, vars));\n\n      return immediateRender ? tween.render(0) : tween;\n    };\n\n    _proto2.tweenFromTo = function tweenFromTo(fromPosition, toPosition, vars) {\n      return this.tweenTo(toPosition, _setDefaults({\n        startAt: {\n          time: _parsePosition(this, fromPosition)\n        }\n      }, vars));\n    };\n\n    _proto2.recent = function recent() {\n      return this._recent;\n    };\n\n    _proto2.nextLabel = function nextLabel(afterTime) {\n      if (afterTime === void 0) {\n        afterTime = this._time;\n      }\n\n      return _getLabelInDirection(this, _parsePosition(this, afterTime));\n    };\n\n    _proto2.previousLabel = function previousLabel(beforeTime) {\n      if (beforeTime === void 0) {\n        beforeTime = this._time;\n      }\n\n      return _getLabelInDirection(this, _parsePosition(this, beforeTime), 1);\n    };\n\n    _proto2.currentLabel = function currentLabel(value) {\n      return arguments.length ? this.seek(value, true) : this.previousLabel(this._time + _tinyNum);\n    };\n\n    _proto2.shiftChildren = function shiftChildren(amount, adjustLabels, ignoreBeforeTime) {\n      if (ignoreBeforeTime === void 0) {\n        ignoreBeforeTime = 0;\n      }\n\n      var child = this._first,\n          labels = this.labels,\n          p;\n\n      while (child) {\n        if (child._start >= ignoreBeforeTime) {\n          child._start += amount;\n          child._end += amount;\n        }\n\n        child = child._next;\n      }\n\n      if (adjustLabels) {\n        for (p in labels) {\n          if (labels[p] >= ignoreBeforeTime) {\n            labels[p] += amount;\n          }\n        }\n      }\n\n      return _uncache(this);\n    };\n\n    _proto2.invalidate = function invalidate(soft) {\n      var child = this._first;\n      this._lock = 0;\n\n      while (child) {\n        child.invalidate(soft);\n        child = child._next;\n      }\n\n      return _Animation.prototype.invalidate.call(this, soft);\n    };\n\n    _proto2.clear = function clear(includeLabels) {\n      if (includeLabels === void 0) {\n        includeLabels = true;\n      }\n\n      var child = this._first,\n          next;\n\n      while (child) {\n        next = child._next;\n        this.remove(child);\n        child = next;\n      }\n\n      this._dp && (this._time = this._tTime = this._pTime = 0);\n      includeLabels && (this.labels = {});\n      return _uncache(this);\n    };\n\n    _proto2.totalDuration = function totalDuration(value) {\n      var max = 0,\n          self = this,\n          child = self._last,\n          prevStart = _bigNum,\n          prev,\n          start,\n          parent;\n\n      if (arguments.length) {\n        return self.timeScale((self._repeat < 0 ? self.duration() : self.totalDuration()) / (self.reversed() ? -value : value));\n      }\n\n      if (self._dirty) {\n        parent = self.parent;\n\n        while (child) {\n          prev = child._prev;\n          child._dirty && child.totalDuration();\n          start = child._start;\n\n          if (start > prevStart && self._sort && child._ts && !self._lock) {\n            self._lock = 1;\n            _addToTimeline(self, child, start - child._delay, 1)._lock = 0;\n          } else {\n            prevStart = start;\n          }\n\n          if (start < 0 && child._ts) {\n            max -= start;\n\n            if (!parent && !self._dp || parent && parent.smoothChildTiming) {\n              self._start += start / self._ts;\n              self._time -= start;\n              self._tTime -= start;\n            }\n\n            self.shiftChildren(-start, false, -1e999);\n            prevStart = 0;\n          }\n\n          child._end > max && child._ts && (max = child._end);\n          child = prev;\n        }\n\n        _setDuration(self, self === _globalTimeline && self._time > max ? self._time : max, 1, 1);\n\n        self._dirty = 0;\n      }\n\n      return self._tDur;\n    };\n\n    Timeline.updateRoot = function updateRoot(time) {\n      if (_globalTimeline._ts) {\n        _lazySafeRender(_globalTimeline, _parentToChildTotalTime(time, _globalTimeline));\n\n        _lastRenderedFrame = _ticker.frame;\n      }\n\n      if (_ticker.frame >= _nextGCFrame) {\n        _nextGCFrame += _config.autoSleep || 120;\n        var child = _globalTimeline._first;\n        if (!child || !child._ts) if (_config.autoSleep && _ticker._listeners.length < 2) {\n          while (child && !child._ts) {\n            child = child._next;\n          }\n\n          child || _ticker.sleep();\n        }\n      }\n    };\n\n    return Timeline;\n  }(Animation);\n\n  _setDefaults(Timeline.prototype, {\n    _lock: 0,\n    _hasPause: 0,\n    _forcing: 0\n  });\n\n  var _addComplexStringPropTween = function _addComplexStringPropTween(target, prop, start, end, setter, stringFilter, funcParam) {\n    var pt = new PropTween(this._pt, target, prop, 0, 1, _renderComplexString, null, setter),\n        index = 0,\n        matchIndex = 0,\n        result,\n        startNums,\n        color,\n        endNum,\n        chunk,\n        startNum,\n        hasRandom,\n        a;\n    pt.b = start;\n    pt.e = end;\n    start += \"\";\n    end += \"\";\n\n    if (hasRandom = ~end.indexOf(\"random(\")) {\n      end = _replaceRandom(end);\n    }\n\n    if (stringFilter) {\n      a = [start, end];\n      stringFilter(a, target, prop);\n      start = a[0];\n      end = a[1];\n    }\n\n    startNums = start.match(_complexStringNumExp) || [];\n\n    while (result = _complexStringNumExp.exec(end)) {\n      endNum = result[0];\n      chunk = end.substring(index, result.index);\n\n      if (color) {\n        color = (color + 1) % 5;\n      } else if (chunk.substr(-5) === \"rgba(\") {\n        color = 1;\n      }\n\n      if (endNum !== startNums[matchIndex++]) {\n        startNum = parseFloat(startNums[matchIndex - 1]) || 0;\n        pt._pt = {\n          _next: pt._pt,\n          p: chunk || matchIndex === 1 ? chunk : \",\",\n          s: startNum,\n          c: endNum.charAt(1) === \"=\" ? _parseRelative(startNum, endNum) - startNum : parseFloat(endNum) - startNum,\n          m: color && color < 4 ? Math.round : 0\n        };\n        index = _complexStringNumExp.lastIndex;\n      }\n    }\n\n    pt.c = index < end.length ? end.substring(index, end.length) : \"\";\n    pt.fp = funcParam;\n\n    if (_relExp.test(end) || hasRandom) {\n      pt.e = 0;\n    }\n\n    this._pt = pt;\n    return pt;\n  },\n      _addPropTween = function _addPropTween(target, prop, start, end, index, targets, modifier, stringFilter, funcParam, optional) {\n    _isFunction(end) && (end = end(index || 0, target, targets));\n    var currentValue = target[prop],\n        parsedStart = start !== \"get\" ? start : !_isFunction(currentValue) ? currentValue : funcParam ? target[prop.indexOf(\"set\") || !_isFunction(target[\"get\" + prop.substr(3)]) ? prop : \"get\" + prop.substr(3)](funcParam) : target[prop](),\n        setter = !_isFunction(currentValue) ? _setterPlain : funcParam ? _setterFuncWithParam : _setterFunc,\n        pt;\n\n    if (_isString(end)) {\n      if (~end.indexOf(\"random(\")) {\n        end = _replaceRandom(end);\n      }\n\n      if (end.charAt(1) === \"=\") {\n        pt = _parseRelative(parsedStart, end) + (getUnit(parsedStart) || 0);\n\n        if (pt || pt === 0) {\n          end = pt;\n        }\n      }\n    }\n\n    if (!optional || parsedStart !== end || _forceAllPropTweens) {\n      if (!isNaN(parsedStart * end) && end !== \"\") {\n        pt = new PropTween(this._pt, target, prop, +parsedStart || 0, end - (parsedStart || 0), typeof currentValue === \"boolean\" ? _renderBoolean : _renderPlain, 0, setter);\n        funcParam && (pt.fp = funcParam);\n        modifier && pt.modifier(modifier, this, target);\n        return this._pt = pt;\n      }\n\n      !currentValue && !(prop in target) && _missingPlugin(prop, end);\n      return _addComplexStringPropTween.call(this, target, prop, parsedStart, end, setter, stringFilter || _config.stringFilter, funcParam);\n    }\n  },\n      _processVars = function _processVars(vars, index, target, targets, tween) {\n    _isFunction(vars) && (vars = _parseFuncOrString(vars, tween, index, target, targets));\n\n    if (!_isObject(vars) || vars.style && vars.nodeType || _isArray(vars) || _isTypedArray(vars)) {\n      return _isString(vars) ? _parseFuncOrString(vars, tween, index, target, targets) : vars;\n    }\n\n    var copy = {},\n        p;\n\n    for (p in vars) {\n      copy[p] = _parseFuncOrString(vars[p], tween, index, target, targets);\n    }\n\n    return copy;\n  },\n      _checkPlugin = function _checkPlugin(property, vars, tween, index, target, targets) {\n    var plugin, pt, ptLookup, i;\n\n    if (_plugins[property] && (plugin = new _plugins[property]()).init(target, plugin.rawVars ? vars[property] : _processVars(vars[property], index, target, targets, tween), tween, index, targets) !== false) {\n      tween._pt = pt = new PropTween(tween._pt, target, property, 0, 1, plugin.render, plugin, 0, plugin.priority);\n\n      if (tween !== _quickTween) {\n        ptLookup = tween._ptLookup[tween._targets.indexOf(target)];\n        i = plugin._props.length;\n\n        while (i--) {\n          ptLookup[plugin._props[i]] = pt;\n        }\n      }\n    }\n\n    return plugin;\n  },\n      _overwritingTween,\n      _forceAllPropTweens,\n      _initTween = function _initTween(tween, time, tTime) {\n    var vars = tween.vars,\n        ease = vars.ease,\n        startAt = vars.startAt,\n        immediateRender = vars.immediateRender,\n        lazy = vars.lazy,\n        onUpdate = vars.onUpdate,\n        onUpdateParams = vars.onUpdateParams,\n        callbackScope = vars.callbackScope,\n        runBackwards = vars.runBackwards,\n        yoyoEase = vars.yoyoEase,\n        keyframes = vars.keyframes,\n        autoRevert = vars.autoRevert,\n        dur = tween._dur,\n        prevStartAt = tween._startAt,\n        targets = tween._targets,\n        parent = tween.parent,\n        fullTargets = parent && parent.data === \"nested\" ? parent.vars.targets : targets,\n        autoOverwrite = tween._overwrite === \"auto\" && !_suppressOverwrites,\n        tl = tween.timeline,\n        cleanVars,\n        i,\n        p,\n        pt,\n        target,\n        hasPriority,\n        gsData,\n        harness,\n        plugin,\n        ptLookup,\n        index,\n        harnessVars,\n        overwritten;\n    tl && (!keyframes || !ease) && (ease = \"none\");\n    tween._ease = _parseEase(ease, _defaults.ease);\n    tween._yEase = yoyoEase ? _invertEase(_parseEase(yoyoEase === true ? ease : yoyoEase, _defaults.ease)) : 0;\n\n    if (yoyoEase && tween._yoyo && !tween._repeat) {\n      yoyoEase = tween._yEase;\n      tween._yEase = tween._ease;\n      tween._ease = yoyoEase;\n    }\n\n    tween._from = !tl && !!vars.runBackwards;\n\n    if (!tl || keyframes && !vars.stagger) {\n      harness = targets[0] ? _getCache(targets[0]).harness : 0;\n      harnessVars = harness && vars[harness.prop];\n      cleanVars = _copyExcluding(vars, _reservedProps);\n\n      if (prevStartAt) {\n        prevStartAt._zTime < 0 && prevStartAt.progress(1);\n        time < 0 && runBackwards && immediateRender && !autoRevert ? prevStartAt.render(-1, true) : prevStartAt.revert(runBackwards && dur ? _revertConfigNoKill : _startAtRevertConfig);\n        prevStartAt._lazy = 0;\n      }\n\n      if (startAt) {\n        _removeFromParent(tween._startAt = Tween.set(targets, _setDefaults({\n          data: \"isStart\",\n          overwrite: false,\n          parent: parent,\n          immediateRender: true,\n          lazy: !prevStartAt && _isNotFalse(lazy),\n          startAt: null,\n          delay: 0,\n          onUpdate: onUpdate,\n          onUpdateParams: onUpdateParams,\n          callbackScope: callbackScope,\n          stagger: 0\n        }, startAt)));\n\n        tween._startAt._dp = 0;\n        tween._startAt._sat = tween;\n        time < 0 && (_reverting || !immediateRender && !autoRevert) && tween._startAt.revert(_revertConfigNoKill);\n\n        if (immediateRender) {\n          if (dur && time <= 0 && tTime <= 0) {\n            time && (tween._zTime = time);\n            return;\n          }\n        }\n      } else if (runBackwards && dur) {\n        if (!prevStartAt) {\n          time && (immediateRender = false);\n          p = _setDefaults({\n            overwrite: false,\n            data: \"isFromStart\",\n            lazy: immediateRender && !prevStartAt && _isNotFalse(lazy),\n            immediateRender: immediateRender,\n            stagger: 0,\n            parent: parent\n          }, cleanVars);\n          harnessVars && (p[harness.prop] = harnessVars);\n\n          _removeFromParent(tween._startAt = Tween.set(targets, p));\n\n          tween._startAt._dp = 0;\n          tween._startAt._sat = tween;\n          time < 0 && (_reverting ? tween._startAt.revert(_revertConfigNoKill) : tween._startAt.render(-1, true));\n          tween._zTime = time;\n\n          if (!immediateRender) {\n            _initTween(tween._startAt, _tinyNum, _tinyNum);\n          } else if (!time) {\n            return;\n          }\n        }\n      }\n\n      tween._pt = tween._ptCache = 0;\n      lazy = dur && _isNotFalse(lazy) || lazy && !dur;\n\n      for (i = 0; i < targets.length; i++) {\n        target = targets[i];\n        gsData = target._gsap || _harness(targets)[i]._gsap;\n        tween._ptLookup[i] = ptLookup = {};\n        _lazyLookup[gsData.id] && _lazyTweens.length && _lazyRender();\n        index = fullTargets === targets ? i : fullTargets.indexOf(target);\n\n        if (harness && (plugin = new harness()).init(target, harnessVars || cleanVars, tween, index, fullTargets) !== false) {\n          tween._pt = pt = new PropTween(tween._pt, target, plugin.name, 0, 1, plugin.render, plugin, 0, plugin.priority);\n\n          plugin._props.forEach(function (name) {\n            ptLookup[name] = pt;\n          });\n\n          plugin.priority && (hasPriority = 1);\n        }\n\n        if (!harness || harnessVars) {\n          for (p in cleanVars) {\n            if (_plugins[p] && (plugin = _checkPlugin(p, cleanVars, tween, index, target, fullTargets))) {\n              plugin.priority && (hasPriority = 1);\n            } else {\n              ptLookup[p] = pt = _addPropTween.call(tween, target, p, \"get\", cleanVars[p], index, fullTargets, 0, vars.stringFilter);\n            }\n          }\n        }\n\n        tween._op && tween._op[i] && tween.kill(target, tween._op[i]);\n\n        if (autoOverwrite && tween._pt) {\n          _overwritingTween = tween;\n\n          _globalTimeline.killTweensOf(target, ptLookup, tween.globalTime(time));\n\n          overwritten = !tween.parent;\n          _overwritingTween = 0;\n        }\n\n        tween._pt && lazy && (_lazyLookup[gsData.id] = 1);\n      }\n\n      hasPriority && _sortPropTweensByPriority(tween);\n      tween._onInit && tween._onInit(tween);\n    }\n\n    tween._onUpdate = onUpdate;\n    tween._initted = (!tween._op || tween._pt) && !overwritten;\n    keyframes && time <= 0 && tl.render(_bigNum, true, true);\n  },\n      _updatePropTweens = function _updatePropTweens(tween, property, value, start, startIsRelative, ratio, time) {\n    var ptCache = (tween._pt && tween._ptCache || (tween._ptCache = {}))[property],\n        pt,\n        rootPT,\n        lookup,\n        i;\n\n    if (!ptCache) {\n      ptCache = tween._ptCache[property] = [];\n      lookup = tween._ptLookup;\n      i = tween._targets.length;\n\n      while (i--) {\n        pt = lookup[i][property];\n\n        if (pt && pt.d && pt.d._pt) {\n          pt = pt.d._pt;\n\n          while (pt && pt.p !== property && pt.fp !== property) {\n            pt = pt._next;\n          }\n        }\n\n        if (!pt) {\n          _forceAllPropTweens = 1;\n          tween.vars[property] = \"+=0\";\n\n          _initTween(tween, time);\n\n          _forceAllPropTweens = 0;\n          return 1;\n        }\n\n        ptCache.push(pt);\n      }\n    }\n\n    i = ptCache.length;\n\n    while (i--) {\n      rootPT = ptCache[i];\n      pt = rootPT._pt || rootPT;\n      pt.s = (start || start === 0) && !startIsRelative ? start : pt.s + (start || 0) + ratio * pt.c;\n      pt.c = value - pt.s;\n      rootPT.e && (rootPT.e = _round(value) + getUnit(rootPT.e));\n      rootPT.b && (rootPT.b = pt.s + getUnit(rootPT.b));\n    }\n  },\n      _addAliasesToVars = function _addAliasesToVars(targets, vars) {\n    var harness = targets[0] ? _getCache(targets[0]).harness : 0,\n        propertyAliases = harness && harness.aliases,\n        copy,\n        p,\n        i,\n        aliases;\n\n    if (!propertyAliases) {\n      return vars;\n    }\n\n    copy = _merge({}, vars);\n\n    for (p in propertyAliases) {\n      if (p in copy) {\n        aliases = propertyAliases[p].split(\",\");\n        i = aliases.length;\n\n        while (i--) {\n          copy[aliases[i]] = copy[p];\n        }\n      }\n    }\n\n    return copy;\n  },\n      _parseKeyframe = function _parseKeyframe(prop, obj, allProps, easeEach) {\n    var ease = obj.ease || easeEach || \"power1.inOut\",\n        p,\n        a;\n\n    if (_isArray(obj)) {\n      a = allProps[prop] || (allProps[prop] = []);\n      obj.forEach(function (value, i) {\n        return a.push({\n          t: i / (obj.length - 1) * 100,\n          v: value,\n          e: ease\n        });\n      });\n    } else {\n      for (p in obj) {\n        a = allProps[p] || (allProps[p] = []);\n        p === \"ease\" || a.push({\n          t: parseFloat(prop),\n          v: obj[p],\n          e: ease\n        });\n      }\n    }\n  },\n      _parseFuncOrString = function _parseFuncOrString(value, tween, i, target, targets) {\n    return _isFunction(value) ? value.call(tween, i, target, targets) : _isString(value) && ~value.indexOf(\"random(\") ? _replaceRandom(value) : value;\n  },\n      _staggerTweenProps = _callbackNames + \"repeat,repeatDelay,yoyo,repeatRefresh,yoyoEase,autoRevert\",\n      _staggerPropsToSkip = {};\n\n  _forEachName(_staggerTweenProps + \",id,stagger,delay,duration,paused,scrollTrigger\", function (name) {\n    return _staggerPropsToSkip[name] = 1;\n  });\n\n  var Tween = function (_Animation2) {\n    _inheritsLoose(Tween, _Animation2);\n\n    function Tween(targets, vars, position, skipInherit) {\n      var _this3;\n\n      if (typeof vars === \"number\") {\n        position.duration = vars;\n        vars = position;\n        position = null;\n      }\n\n      _this3 = _Animation2.call(this, skipInherit ? vars : _inheritDefaults(vars)) || this;\n      var _this3$vars = _this3.vars,\n          duration = _this3$vars.duration,\n          delay = _this3$vars.delay,\n          immediateRender = _this3$vars.immediateRender,\n          stagger = _this3$vars.stagger,\n          overwrite = _this3$vars.overwrite,\n          keyframes = _this3$vars.keyframes,\n          defaults = _this3$vars.defaults,\n          scrollTrigger = _this3$vars.scrollTrigger,\n          yoyoEase = _this3$vars.yoyoEase,\n          parent = vars.parent || _globalTimeline,\n          parsedTargets = (_isArray(targets) || _isTypedArray(targets) ? _isNumber(targets[0]) : \"length\" in vars) ? [targets] : toArray(targets),\n          tl,\n          i,\n          copy,\n          l,\n          p,\n          curTarget,\n          staggerFunc,\n          staggerVarsToMerge;\n      _this3._targets = parsedTargets.length ? _harness(parsedTargets) : _warn(\"GSAP target \" + targets + \" not found. https://greensock.com\", !_config.nullTargetWarn) || [];\n      _this3._ptLookup = [];\n      _this3._overwrite = overwrite;\n\n      if (keyframes || stagger || _isFuncOrString(duration) || _isFuncOrString(delay)) {\n        vars = _this3.vars;\n        tl = _this3.timeline = new Timeline({\n          data: \"nested\",\n          defaults: defaults || {},\n          targets: parent && parent.data === \"nested\" ? parent.vars.targets : parsedTargets\n        });\n        tl.kill();\n        tl.parent = tl._dp = _assertThisInitialized(_this3);\n        tl._start = 0;\n\n        if (stagger || _isFuncOrString(duration) || _isFuncOrString(delay)) {\n          l = parsedTargets.length;\n          staggerFunc = stagger && distribute(stagger);\n\n          if (_isObject(stagger)) {\n            for (p in stagger) {\n              if (~_staggerTweenProps.indexOf(p)) {\n                staggerVarsToMerge || (staggerVarsToMerge = {});\n                staggerVarsToMerge[p] = stagger[p];\n              }\n            }\n          }\n\n          for (i = 0; i < l; i++) {\n            copy = _copyExcluding(vars, _staggerPropsToSkip);\n            copy.stagger = 0;\n            yoyoEase && (copy.yoyoEase = yoyoEase);\n            staggerVarsToMerge && _merge(copy, staggerVarsToMerge);\n            curTarget = parsedTargets[i];\n            copy.duration = +_parseFuncOrString(duration, _assertThisInitialized(_this3), i, curTarget, parsedTargets);\n            copy.delay = (+_parseFuncOrString(delay, _assertThisInitialized(_this3), i, curTarget, parsedTargets) || 0) - _this3._delay;\n\n            if (!stagger && l === 1 && copy.delay) {\n              _this3._delay = delay = copy.delay;\n              _this3._start += delay;\n              copy.delay = 0;\n            }\n\n            tl.to(curTarget, copy, staggerFunc ? staggerFunc(i, curTarget, parsedTargets) : 0);\n            tl._ease = _easeMap.none;\n          }\n\n          tl.duration() ? duration = delay = 0 : _this3.timeline = 0;\n        } else if (keyframes) {\n          _inheritDefaults(_setDefaults(tl.vars.defaults, {\n            ease: \"none\"\n          }));\n\n          tl._ease = _parseEase(keyframes.ease || vars.ease || \"none\");\n          var time = 0,\n              a,\n              kf,\n              v;\n\n          if (_isArray(keyframes)) {\n            keyframes.forEach(function (frame) {\n              return tl.to(parsedTargets, frame, \">\");\n            });\n            tl.duration();\n          } else {\n            copy = {};\n\n            for (p in keyframes) {\n              p === \"ease\" || p === \"easeEach\" || _parseKeyframe(p, keyframes[p], copy, keyframes.easeEach);\n            }\n\n            for (p in copy) {\n              a = copy[p].sort(function (a, b) {\n                return a.t - b.t;\n              });\n              time = 0;\n\n              for (i = 0; i < a.length; i++) {\n                kf = a[i];\n                v = {\n                  ease: kf.e,\n                  duration: (kf.t - (i ? a[i - 1].t : 0)) / 100 * duration\n                };\n                v[p] = kf.v;\n                tl.to(parsedTargets, v, time);\n                time += v.duration;\n              }\n            }\n\n            tl.duration() < duration && tl.to({}, {\n              duration: duration - tl.duration()\n            });\n          }\n        }\n\n        duration || _this3.duration(duration = tl.duration());\n      } else {\n        _this3.timeline = 0;\n      }\n\n      if (overwrite === true && !_suppressOverwrites) {\n        _overwritingTween = _assertThisInitialized(_this3);\n\n        _globalTimeline.killTweensOf(parsedTargets);\n\n        _overwritingTween = 0;\n      }\n\n      _addToTimeline(parent, _assertThisInitialized(_this3), position);\n\n      vars.reversed && _this3.reverse();\n      vars.paused && _this3.paused(true);\n\n      if (immediateRender || !duration && !keyframes && _this3._start === _roundPrecise(parent._time) && _isNotFalse(immediateRender) && _hasNoPausedAncestors(_assertThisInitialized(_this3)) && parent.data !== \"nested\") {\n        _this3._tTime = -_tinyNum;\n\n        _this3.render(Math.max(0, -delay) || 0);\n      }\n\n      scrollTrigger && _scrollTrigger(_assertThisInitialized(_this3), scrollTrigger);\n      return _this3;\n    }\n\n    var _proto3 = Tween.prototype;\n\n    _proto3.render = function render(totalTime, suppressEvents, force) {\n      var prevTime = this._time,\n          tDur = this._tDur,\n          dur = this._dur,\n          isNegative = totalTime < 0,\n          tTime = totalTime > tDur - _tinyNum && !isNegative ? tDur : totalTime < _tinyNum ? 0 : totalTime,\n          time,\n          pt,\n          iteration,\n          cycleDuration,\n          prevIteration,\n          isYoyo,\n          ratio,\n          timeline,\n          yoyoEase;\n\n      if (!dur) {\n        _renderZeroDurationTween(this, totalTime, suppressEvents, force);\n      } else if (tTime !== this._tTime || !totalTime || force || !this._initted && this._tTime || this._startAt && this._zTime < 0 !== isNegative) {\n        time = tTime;\n        timeline = this.timeline;\n\n        if (this._repeat) {\n          cycleDuration = dur + this._rDelay;\n\n          if (this._repeat < -1 && isNegative) {\n            return this.totalTime(cycleDuration * 100 + totalTime, suppressEvents, force);\n          }\n\n          time = _roundPrecise(tTime % cycleDuration);\n\n          if (tTime === tDur) {\n            iteration = this._repeat;\n            time = dur;\n          } else {\n            iteration = ~~(tTime / cycleDuration);\n\n            if (iteration && iteration === tTime / cycleDuration) {\n              time = dur;\n              iteration--;\n            }\n\n            time > dur && (time = dur);\n          }\n\n          isYoyo = this._yoyo && iteration & 1;\n\n          if (isYoyo) {\n            yoyoEase = this._yEase;\n            time = dur - time;\n          }\n\n          prevIteration = _animationCycle(this._tTime, cycleDuration);\n\n          if (time === prevTime && !force && this._initted) {\n            this._tTime = tTime;\n            return this;\n          }\n\n          if (iteration !== prevIteration) {\n            timeline && this._yEase && _propagateYoyoEase(timeline, isYoyo);\n\n            if (this.vars.repeatRefresh && !isYoyo && !this._lock) {\n              this._lock = force = 1;\n              this.render(_roundPrecise(cycleDuration * iteration), true).invalidate()._lock = 0;\n            }\n          }\n        }\n\n        if (!this._initted) {\n          if (_attemptInitTween(this, isNegative ? totalTime : time, force, suppressEvents, tTime)) {\n            this._tTime = 0;\n            return this;\n          }\n\n          if (prevTime !== this._time) {\n            return this;\n          }\n\n          if (dur !== this._dur) {\n            return this.render(totalTime, suppressEvents, force);\n          }\n        }\n\n        this._tTime = tTime;\n        this._time = time;\n\n        if (!this._act && this._ts) {\n          this._act = 1;\n          this._lazy = 0;\n        }\n\n        this.ratio = ratio = (yoyoEase || this._ease)(time / dur);\n\n        if (this._from) {\n          this.ratio = ratio = 1 - ratio;\n        }\n\n        if (time && !prevTime && !suppressEvents && !iteration) {\n          _callback(this, \"onStart\");\n\n          if (this._tTime !== tTime) {\n            return this;\n          }\n        }\n\n        pt = this._pt;\n\n        while (pt) {\n          pt.r(ratio, pt.d);\n          pt = pt._next;\n        }\n\n        timeline && timeline.render(totalTime < 0 ? totalTime : !time && isYoyo ? -_tinyNum : timeline._dur * timeline._ease(time / this._dur), suppressEvents, force) || this._startAt && (this._zTime = totalTime);\n\n        if (this._onUpdate && !suppressEvents) {\n          isNegative && _rewindStartAt(this, totalTime, suppressEvents, force);\n\n          _callback(this, \"onUpdate\");\n        }\n\n        this._repeat && iteration !== prevIteration && this.vars.onRepeat && !suppressEvents && this.parent && _callback(this, \"onRepeat\");\n\n        if ((tTime === this._tDur || !tTime) && this._tTime === tTime) {\n          isNegative && !this._onUpdate && _rewindStartAt(this, totalTime, true, true);\n          (totalTime || !dur) && (tTime === this._tDur && this._ts > 0 || !tTime && this._ts < 0) && _removeFromParent(this, 1);\n\n          if (!suppressEvents && !(isNegative && !prevTime) && (tTime || prevTime || isYoyo)) {\n            _callback(this, tTime === tDur ? \"onComplete\" : \"onReverseComplete\", true);\n\n            this._prom && !(tTime < tDur && this.timeScale() > 0) && this._prom();\n          }\n        }\n      }\n\n      return this;\n    };\n\n    _proto3.targets = function targets() {\n      return this._targets;\n    };\n\n    _proto3.invalidate = function invalidate(soft) {\n      (!soft || !this.vars.runBackwards) && (this._startAt = 0);\n      this._pt = this._op = this._onUpdate = this._lazy = this.ratio = 0;\n      this._ptLookup = [];\n      this.timeline && this.timeline.invalidate(soft);\n      return _Animation2.prototype.invalidate.call(this, soft);\n    };\n\n    _proto3.resetTo = function resetTo(property, value, start, startIsRelative) {\n      _tickerActive || _ticker.wake();\n      this._ts || this.play();\n      var time = Math.min(this._dur, (this._dp._time - this._start) * this._ts),\n          ratio;\n      this._initted || _initTween(this, time);\n      ratio = this._ease(time / this._dur);\n\n      if (_updatePropTweens(this, property, value, start, startIsRelative, ratio, time)) {\n        return this.resetTo(property, value, start, startIsRelative);\n      }\n\n      _alignPlayhead(this, 0);\n\n      this.parent || _addLinkedListItem(this._dp, this, \"_first\", \"_last\", this._dp._sort ? \"_start\" : 0);\n      return this.render(0);\n    };\n\n    _proto3.kill = function kill(targets, vars) {\n      if (vars === void 0) {\n        vars = \"all\";\n      }\n\n      if (!targets && (!vars || vars === \"all\")) {\n        this._lazy = this._pt = 0;\n        return this.parent ? _interrupt(this) : this;\n      }\n\n      if (this.timeline) {\n        var tDur = this.timeline.totalDuration();\n        this.timeline.killTweensOf(targets, vars, _overwritingTween && _overwritingTween.vars.overwrite !== true)._first || _interrupt(this);\n        this.parent && tDur !== this.timeline.totalDuration() && _setDuration(this, this._dur * this.timeline._tDur / tDur, 0, 1);\n        return this;\n      }\n\n      var parsedTargets = this._targets,\n          killingTargets = targets ? toArray(targets) : parsedTargets,\n          propTweenLookup = this._ptLookup,\n          firstPT = this._pt,\n          overwrittenProps,\n          curLookup,\n          curOverwriteProps,\n          props,\n          p,\n          pt,\n          i;\n\n      if ((!vars || vars === \"all\") && _arraysMatch(parsedTargets, killingTargets)) {\n        vars === \"all\" && (this._pt = 0);\n        return _interrupt(this);\n      }\n\n      overwrittenProps = this._op = this._op || [];\n\n      if (vars !== \"all\") {\n        if (_isString(vars)) {\n          p = {};\n\n          _forEachName(vars, function (name) {\n            return p[name] = 1;\n          });\n\n          vars = p;\n        }\n\n        vars = _addAliasesToVars(parsedTargets, vars);\n      }\n\n      i = parsedTargets.length;\n\n      while (i--) {\n        if (~killingTargets.indexOf(parsedTargets[i])) {\n          curLookup = propTweenLookup[i];\n\n          if (vars === \"all\") {\n            overwrittenProps[i] = vars;\n            props = curLookup;\n            curOverwriteProps = {};\n          } else {\n            curOverwriteProps = overwrittenProps[i] = overwrittenProps[i] || {};\n            props = vars;\n          }\n\n          for (p in props) {\n            pt = curLookup && curLookup[p];\n\n            if (pt) {\n              if (!(\"kill\" in pt.d) || pt.d.kill(p) === true) {\n                _removeLinkedListItem(this, pt, \"_pt\");\n              }\n\n              delete curLookup[p];\n            }\n\n            if (curOverwriteProps !== \"all\") {\n              curOverwriteProps[p] = 1;\n            }\n          }\n        }\n      }\n\n      this._initted && !this._pt && firstPT && _interrupt(this);\n      return this;\n    };\n\n    Tween.to = function to(targets, vars) {\n      return new Tween(targets, vars, arguments[2]);\n    };\n\n    Tween.from = function from(targets, vars) {\n      return _createTweenType(1, arguments);\n    };\n\n    Tween.delayedCall = function delayedCall(delay, callback, params, scope) {\n      return new Tween(callback, 0, {\n        immediateRender: false,\n        lazy: false,\n        overwrite: false,\n        delay: delay,\n        onComplete: callback,\n        onReverseComplete: callback,\n        onCompleteParams: params,\n        onReverseCompleteParams: params,\n        callbackScope: scope\n      });\n    };\n\n    Tween.fromTo = function fromTo(targets, fromVars, toVars) {\n      return _createTweenType(2, arguments);\n    };\n\n    Tween.set = function set(targets, vars) {\n      vars.duration = 0;\n      vars.repeatDelay || (vars.repeat = 0);\n      return new Tween(targets, vars);\n    };\n\n    Tween.killTweensOf = function killTweensOf(targets, props, onlyActive) {\n      return _globalTimeline.killTweensOf(targets, props, onlyActive);\n    };\n\n    return Tween;\n  }(Animation);\n\n  _setDefaults(Tween.prototype, {\n    _targets: [],\n    _lazy: 0,\n    _startAt: 0,\n    _op: 0,\n    _onInit: 0\n  });\n\n  _forEachName(\"staggerTo,staggerFrom,staggerFromTo\", function (name) {\n    Tween[name] = function () {\n      var tl = new Timeline(),\n          params = _slice.call(arguments, 0);\n\n      params.splice(name === \"staggerFromTo\" ? 5 : 4, 0, 0);\n      return tl[name].apply(tl, params);\n    };\n  });\n\n  var _setterPlain = function _setterPlain(target, property, value) {\n    return target[property] = value;\n  },\n      _setterFunc = function _setterFunc(target, property, value) {\n    return target[property](value);\n  },\n      _setterFuncWithParam = function _setterFuncWithParam(target, property, value, data) {\n    return target[property](data.fp, value);\n  },\n      _setterAttribute = function _setterAttribute(target, property, value) {\n    return target.setAttribute(property, value);\n  },\n      _getSetter = function _getSetter(target, property) {\n    return _isFunction(target[property]) ? _setterFunc : _isUndefined(target[property]) && target.setAttribute ? _setterAttribute : _setterPlain;\n  },\n      _renderPlain = function _renderPlain(ratio, data) {\n    return data.set(data.t, data.p, Math.round((data.s + data.c * ratio) * 1000000) / 1000000, data);\n  },\n      _renderBoolean = function _renderBoolean(ratio, data) {\n    return data.set(data.t, data.p, !!(data.s + data.c * ratio), data);\n  },\n      _renderComplexString = function _renderComplexString(ratio, data) {\n    var pt = data._pt,\n        s = \"\";\n\n    if (!ratio && data.b) {\n      s = data.b;\n    } else if (ratio === 1 && data.e) {\n      s = data.e;\n    } else {\n      while (pt) {\n        s = pt.p + (pt.m ? pt.m(pt.s + pt.c * ratio) : Math.round((pt.s + pt.c * ratio) * 10000) / 10000) + s;\n        pt = pt._next;\n      }\n\n      s += data.c;\n    }\n\n    data.set(data.t, data.p, s, data);\n  },\n      _renderPropTweens = function _renderPropTweens(ratio, data) {\n    var pt = data._pt;\n\n    while (pt) {\n      pt.r(ratio, pt.d);\n      pt = pt._next;\n    }\n  },\n      _addPluginModifier = function _addPluginModifier(modifier, tween, target, property) {\n    var pt = this._pt,\n        next;\n\n    while (pt) {\n      next = pt._next;\n      pt.p === property && pt.modifier(modifier, tween, target);\n      pt = next;\n    }\n  },\n      _killPropTweensOf = function _killPropTweensOf(property) {\n    var pt = this._pt,\n        hasNonDependentRemaining,\n        next;\n\n    while (pt) {\n      next = pt._next;\n\n      if (pt.p === property && !pt.op || pt.op === property) {\n        _removeLinkedListItem(this, pt, \"_pt\");\n      } else if (!pt.dep) {\n        hasNonDependentRemaining = 1;\n      }\n\n      pt = next;\n    }\n\n    return !hasNonDependentRemaining;\n  },\n      _setterWithModifier = function _setterWithModifier(target, property, value, data) {\n    data.mSet(target, property, data.m.call(data.tween, value, data.mt), data);\n  },\n      _sortPropTweensByPriority = function _sortPropTweensByPriority(parent) {\n    var pt = parent._pt,\n        next,\n        pt2,\n        first,\n        last;\n\n    while (pt) {\n      next = pt._next;\n      pt2 = first;\n\n      while (pt2 && pt2.pr > pt.pr) {\n        pt2 = pt2._next;\n      }\n\n      if (pt._prev = pt2 ? pt2._prev : last) {\n        pt._prev._next = pt;\n      } else {\n        first = pt;\n      }\n\n      if (pt._next = pt2) {\n        pt2._prev = pt;\n      } else {\n        last = pt;\n      }\n\n      pt = next;\n    }\n\n    parent._pt = first;\n  };\n\n  var PropTween = function () {\n    function PropTween(next, target, prop, start, change, renderer, data, setter, priority) {\n      this.t = target;\n      this.s = start;\n      this.c = change;\n      this.p = prop;\n      this.r = renderer || _renderPlain;\n      this.d = data || this;\n      this.set = setter || _setterPlain;\n      this.pr = priority || 0;\n      this._next = next;\n\n      if (next) {\n        next._prev = this;\n      }\n    }\n\n    var _proto4 = PropTween.prototype;\n\n    _proto4.modifier = function modifier(func, tween, target) {\n      this.mSet = this.mSet || this.set;\n      this.set = _setterWithModifier;\n      this.m = func;\n      this.mt = target;\n      this.tween = tween;\n    };\n\n    return PropTween;\n  }();\n\n  _forEachName(_callbackNames + \"parent,duration,ease,delay,overwrite,runBackwards,startAt,yoyo,immediateRender,repeat,repeatDelay,data,paused,reversed,lazy,callbackScope,stringFilter,id,yoyoEase,stagger,inherit,repeatRefresh,keyframes,autoRevert,scrollTrigger\", function (name) {\n    return _reservedProps[name] = 1;\n  });\n\n  _globals.TweenMax = _globals.TweenLite = Tween;\n  _globals.TimelineLite = _globals.TimelineMax = Timeline;\n  _globalTimeline = new Timeline({\n    sortChildren: false,\n    defaults: _defaults,\n    autoRemoveChildren: true,\n    id: \"root\",\n    smoothChildTiming: true\n  });\n  _config.stringFilter = _colorStringFilter;\n\n  var _media = [],\n      _listeners = {},\n      _emptyArray = [],\n      _lastMediaTime = 0,\n      _dispatch = function _dispatch(type) {\n    return (_listeners[type] || _emptyArray).map(function (f) {\n      return f();\n    });\n  },\n      _onMediaChange = function _onMediaChange() {\n    var time = Date.now(),\n        matches = [];\n\n    if (time - _lastMediaTime > 2) {\n      _dispatch(\"matchMediaInit\");\n\n      _media.forEach(function (c) {\n        var queries = c.queries,\n            conditions = c.conditions,\n            match,\n            p,\n            anyMatch,\n            toggled;\n\n        for (p in queries) {\n          match = _win.matchMedia(queries[p]).matches;\n          match && (anyMatch = 1);\n\n          if (match !== conditions[p]) {\n            conditions[p] = match;\n            toggled = 1;\n          }\n        }\n\n        if (toggled) {\n          c.revert();\n          anyMatch && matches.push(c);\n        }\n      });\n\n      _dispatch(\"matchMediaRevert\");\n\n      matches.forEach(function (c) {\n        return c.onMatch(c);\n      });\n      _lastMediaTime = time;\n\n      _dispatch(\"matchMedia\");\n    }\n  };\n\n  var Context = function () {\n    function Context(func, scope) {\n      this.selector = scope && selector(scope);\n      this.data = [];\n      this._r = [];\n      this.isReverted = false;\n      func && this.add(func);\n    }\n\n    var _proto5 = Context.prototype;\n\n    _proto5.add = function add(name, func, scope) {\n      if (_isFunction(name)) {\n        scope = func;\n        func = name;\n        name = _isFunction;\n      }\n\n      var self = this,\n          f = function f() {\n        var prev = _context,\n            prevSelector = self.selector,\n            result;\n        prev && prev !== self && prev.data.push(self);\n        scope && (self.selector = selector(scope));\n        _context = self;\n        result = func.apply(self, arguments);\n        _isFunction(result) && self._r.push(result);\n        _context = prev;\n        self.selector = prevSelector;\n        self.isReverted = false;\n        return result;\n      };\n\n      self.last = f;\n      return name === _isFunction ? f(self) : name ? self[name] = f : f;\n    };\n\n    _proto5.ignore = function ignore(func) {\n      var prev = _context;\n      _context = null;\n      func(this);\n      _context = prev;\n    };\n\n    _proto5.getTweens = function getTweens() {\n      var a = [];\n      this.data.forEach(function (e) {\n        return e instanceof Context ? a.push.apply(a, e.getTweens()) : e instanceof Tween && !(e.parent && e.parent.data === \"nested\") && a.push(e);\n      });\n      return a;\n    };\n\n    _proto5.clear = function clear() {\n      this._r.length = this.data.length = 0;\n    };\n\n    _proto5.kill = function kill(revert, matchMedia) {\n      var _this4 = this;\n\n      if (revert) {\n        var tweens = this.getTweens();\n        this.data.forEach(function (t) {\n          if (t.data === \"isFlip\") {\n            t.revert();\n            t.getChildren(true, true, false).forEach(function (tween) {\n              return tweens.splice(tweens.indexOf(tween), 1);\n            });\n          }\n        });\n        tweens.map(function (t) {\n          return {\n            g: t.globalTime(0),\n            t: t\n          };\n        }).sort(function (a, b) {\n          return b.g - a.g || -1;\n        }).forEach(function (o) {\n          return o.t.revert(revert);\n        });\n        this.data.forEach(function (e) {\n          return !(e instanceof Animation) && e.revert && e.revert(revert);\n        });\n\n        this._r.forEach(function (f) {\n          return f(revert, _this4);\n        });\n\n        this.isReverted = true;\n      } else {\n        this.data.forEach(function (e) {\n          return e.kill && e.kill();\n        });\n      }\n\n      this.clear();\n\n      if (matchMedia) {\n        var i = _media.indexOf(this);\n\n        !!~i && _media.splice(i, 1);\n      }\n    };\n\n    _proto5.revert = function revert(config) {\n      this.kill(config || {});\n    };\n\n    return Context;\n  }();\n\n  var MatchMedia = function () {\n    function MatchMedia(scope) {\n      this.contexts = [];\n      this.scope = scope;\n    }\n\n    var _proto6 = MatchMedia.prototype;\n\n    _proto6.add = function add(conditions, func, scope) {\n      _isObject(conditions) || (conditions = {\n        matches: conditions\n      });\n      var context = new Context(0, scope || this.scope),\n          cond = context.conditions = {},\n          mq,\n          p,\n          active;\n      this.contexts.push(context);\n      func = context.add(\"onMatch\", func);\n      context.queries = conditions;\n\n      for (p in conditions) {\n        if (p === \"all\") {\n          active = 1;\n        } else {\n          mq = _win.matchMedia(conditions[p]);\n\n          if (mq) {\n            _media.indexOf(context) < 0 && _media.push(context);\n            (cond[p] = mq.matches) && (active = 1);\n            mq.addListener ? mq.addListener(_onMediaChange) : mq.addEventListener(\"change\", _onMediaChange);\n          }\n        }\n      }\n\n      active && func(context);\n      return this;\n    };\n\n    _proto6.revert = function revert(config) {\n      this.kill(config || {});\n    };\n\n    _proto6.kill = function kill(revert) {\n      this.contexts.forEach(function (c) {\n        return c.kill(revert, true);\n      });\n    };\n\n    return MatchMedia;\n  }();\n\n  var _gsap = {\n    registerPlugin: function registerPlugin() {\n      for (var _len2 = arguments.length, args = new Array(_len2), _key2 = 0; _key2 < _len2; _key2++) {\n        args[_key2] = arguments[_key2];\n      }\n\n      args.forEach(function (config) {\n        return _createPlugin(config);\n      });\n    },\n    timeline: function timeline(vars) {\n      return new Timeline(vars);\n    },\n    getTweensOf: function getTweensOf(targets, onlyActive) {\n      return _globalTimeline.getTweensOf(targets, onlyActive);\n    },\n    getProperty: function getProperty(target, property, unit, uncache) {\n      _isString(target) && (target = toArray(target)[0]);\n\n      var getter = _getCache(target || {}).get,\n          format = unit ? _passThrough : _numericIfPossible;\n\n      unit === \"native\" && (unit = \"\");\n      return !target ? target : !property ? function (property, unit, uncache) {\n        return format((_plugins[property] && _plugins[property].get || getter)(target, property, unit, uncache));\n      } : format((_plugins[property] && _plugins[property].get || getter)(target, property, unit, uncache));\n    },\n    quickSetter: function quickSetter(target, property, unit) {\n      target = toArray(target);\n\n      if (target.length > 1) {\n        var setters = target.map(function (t) {\n          return gsap.quickSetter(t, property, unit);\n        }),\n            l = setters.length;\n        return function (value) {\n          var i = l;\n\n          while (i--) {\n            setters[i](value);\n          }\n        };\n      }\n\n      target = target[0] || {};\n\n      var Plugin = _plugins[property],\n          cache = _getCache(target),\n          p = cache.harness && (cache.harness.aliases || {})[property] || property,\n          setter = Plugin ? function (value) {\n        var p = new Plugin();\n        _quickTween._pt = 0;\n        p.init(target, unit ? value + unit : value, _quickTween, 0, [target]);\n        p.render(1, p);\n        _quickTween._pt && _renderPropTweens(1, _quickTween);\n      } : cache.set(target, p);\n\n      return Plugin ? setter : function (value) {\n        return setter(target, p, unit ? value + unit : value, cache, 1);\n      };\n    },\n    quickTo: function quickTo(target, property, vars) {\n      var _merge2;\n\n      var tween = gsap.to(target, _merge((_merge2 = {}, _merge2[property] = \"+=0.1\", _merge2.paused = true, _merge2), vars || {})),\n          func = function func(value, start, startIsRelative) {\n        return tween.resetTo(property, value, start, startIsRelative);\n      };\n\n      func.tween = tween;\n      return func;\n    },\n    isTweening: function isTweening(targets) {\n      return _globalTimeline.getTweensOf(targets, true).length > 0;\n    },\n    defaults: function defaults(value) {\n      value && value.ease && (value.ease = _parseEase(value.ease, _defaults.ease));\n      return _mergeDeep(_defaults, value || {});\n    },\n    config: function config(value) {\n      return _mergeDeep(_config, value || {});\n    },\n    registerEffect: function registerEffect(_ref3) {\n      var name = _ref3.name,\n          effect = _ref3.effect,\n          plugins = _ref3.plugins,\n          defaults = _ref3.defaults,\n          extendTimeline = _ref3.extendTimeline;\n      (plugins || \"\").split(\",\").forEach(function (pluginName) {\n        return pluginName && !_plugins[pluginName] && !_globals[pluginName] && _warn(name + \" effect requires \" + pluginName + \" plugin.\");\n      });\n\n      _effects[name] = function (targets, vars, tl) {\n        return effect(toArray(targets), _setDefaults(vars || {}, defaults), tl);\n      };\n\n      if (extendTimeline) {\n        Timeline.prototype[name] = function (targets, vars, position) {\n          return this.add(_effects[name](targets, _isObject(vars) ? vars : (position = vars) && {}, this), position);\n        };\n      }\n    },\n    registerEase: function registerEase(name, ease) {\n      _easeMap[name] = _parseEase(ease);\n    },\n    parseEase: function parseEase(ease, defaultEase) {\n      return arguments.length ? _parseEase(ease, defaultEase) : _easeMap;\n    },\n    getById: function getById(id) {\n      return _globalTimeline.getById(id);\n    },\n    exportRoot: function exportRoot(vars, includeDelayedCalls) {\n      if (vars === void 0) {\n        vars = {};\n      }\n\n      var tl = new Timeline(vars),\n          child,\n          next;\n      tl.smoothChildTiming = _isNotFalse(vars.smoothChildTiming);\n\n      _globalTimeline.remove(tl);\n\n      tl._dp = 0;\n      tl._time = tl._tTime = _globalTimeline._time;\n      child = _globalTimeline._first;\n\n      while (child) {\n        next = child._next;\n\n        if (includeDelayedCalls || !(!child._dur && child instanceof Tween && child.vars.onComplete === child._targets[0])) {\n          _addToTimeline(tl, child, child._start - child._delay);\n        }\n\n        child = next;\n      }\n\n      _addToTimeline(_globalTimeline, tl, 0);\n\n      return tl;\n    },\n    context: function context(func, scope) {\n      return func ? new Context(func, scope) : _context;\n    },\n    matchMedia: function matchMedia(scope) {\n      return new MatchMedia(scope);\n    },\n    matchMediaRefresh: function matchMediaRefresh() {\n      return _media.forEach(function (c) {\n        var cond = c.conditions,\n            found,\n            p;\n\n        for (p in cond) {\n          if (cond[p]) {\n            cond[p] = false;\n            found = 1;\n          }\n        }\n\n        found && c.revert();\n      }) || _onMediaChange();\n    },\n    addEventListener: function addEventListener(type, callback) {\n      var a = _listeners[type] || (_listeners[type] = []);\n      ~a.indexOf(callback) || a.push(callback);\n    },\n    removeEventListener: function removeEventListener(type, callback) {\n      var a = _listeners[type],\n          i = a && a.indexOf(callback);\n      i >= 0 && a.splice(i, 1);\n    },\n    utils: {\n      wrap: wrap,\n      wrapYoyo: wrapYoyo,\n      distribute: distribute,\n      random: random,\n      snap: snap,\n      normalize: normalize,\n      getUnit: getUnit,\n      clamp: clamp,\n      splitColor: splitColor,\n      toArray: toArray,\n      selector: selector,\n      mapRange: mapRange,\n      pipe: pipe,\n      unitize: unitize,\n      interpolate: interpolate,\n      shuffle: shuffle\n    },\n    install: _install,\n    effects: _effects,\n    ticker: _ticker,\n    updateRoot: Timeline.updateRoot,\n    plugins: _plugins,\n    globalTimeline: _globalTimeline,\n    core: {\n      PropTween: PropTween,\n      globals: _addGlobal,\n      Tween: Tween,\n      Timeline: Timeline,\n      Animation: Animation,\n      getCache: _getCache,\n      _removeLinkedListItem: _removeLinkedListItem,\n      reverting: function reverting() {\n        return _reverting;\n      },\n      context: function context(toAdd) {\n        if (toAdd && _context) {\n          _context.data.push(toAdd);\n\n          toAdd._ctx = _context;\n        }\n\n        return _context;\n      },\n      suppressOverwrites: function suppressOverwrites(value) {\n        return _suppressOverwrites = value;\n      }\n    }\n  };\n\n  _forEachName(\"to,from,fromTo,delayedCall,set,killTweensOf\", function (name) {\n    return _gsap[name] = Tween[name];\n  });\n\n  _ticker.add(Timeline.updateRoot);\n\n  _quickTween = _gsap.to({}, {\n    duration: 0\n  });\n\n  var _getPluginPropTween = function _getPluginPropTween(plugin, prop) {\n    var pt = plugin._pt;\n\n    while (pt && pt.p !== prop && pt.op !== prop && pt.fp !== prop) {\n      pt = pt._next;\n    }\n\n    return pt;\n  },\n      _addModifiers = function _addModifiers(tween, modifiers) {\n    var targets = tween._targets,\n        p,\n        i,\n        pt;\n\n    for (p in modifiers) {\n      i = targets.length;\n\n      while (i--) {\n        pt = tween._ptLookup[i][p];\n\n        if (pt && (pt = pt.d)) {\n          if (pt._pt) {\n            pt = _getPluginPropTween(pt, p);\n          }\n\n          pt && pt.modifier && pt.modifier(modifiers[p], tween, targets[i], p);\n        }\n      }\n    }\n  },\n      _buildModifierPlugin = function _buildModifierPlugin(name, modifier) {\n    return {\n      name: name,\n      rawVars: 1,\n      init: function init(target, vars, tween) {\n        tween._onInit = function (tween) {\n          var temp, p;\n\n          if (_isString(vars)) {\n            temp = {};\n\n            _forEachName(vars, function (name) {\n              return temp[name] = 1;\n            });\n\n            vars = temp;\n          }\n\n          if (modifier) {\n            temp = {};\n\n            for (p in vars) {\n              temp[p] = modifier(vars[p]);\n            }\n\n            vars = temp;\n          }\n\n          _addModifiers(tween, vars);\n        };\n      }\n    };\n  };\n\n  var gsap = _gsap.registerPlugin({\n    name: \"attr\",\n    init: function init(target, vars, tween, index, targets) {\n      var p, pt, v;\n      this.tween = tween;\n\n      for (p in vars) {\n        v = target.getAttribute(p) || \"\";\n        pt = this.add(target, \"setAttribute\", (v || 0) + \"\", vars[p], index, targets, 0, 0, p);\n        pt.op = p;\n        pt.b = v;\n\n        this._props.push(p);\n      }\n    },\n    render: function render(ratio, data) {\n      var pt = data._pt;\n\n      while (pt) {\n        _reverting ? pt.set(pt.t, pt.p, pt.b, pt) : pt.r(ratio, pt.d);\n        pt = pt._next;\n      }\n    }\n  }, {\n    name: \"endArray\",\n    init: function init(target, value) {\n      var i = value.length;\n\n      while (i--) {\n        this.add(target, i, target[i] || 0, value[i], 0, 0, 0, 0, 0, 1);\n      }\n    }\n  }, _buildModifierPlugin(\"roundProps\", _roundModifier), _buildModifierPlugin(\"modifiers\"), _buildModifierPlugin(\"snap\", snap)) || _gsap;\n  Tween.version = Timeline.version = gsap.version = \"3.11.5\";\n  _coreReady = 1;\n  _windowExists() && _wake();\n  var Power0 = _easeMap.Power0,\n      Power1 = _easeMap.Power1,\n      Power2 = _easeMap.Power2,\n      Power3 = _easeMap.Power3,\n      Power4 = _easeMap.Power4,\n      Linear = _easeMap.Linear,\n      Quad = _easeMap.Quad,\n      Cubic = _easeMap.Cubic,\n      Quart = _easeMap.Quart,\n      Quint = _easeMap.Quint,\n      Strong = _easeMap.Strong,\n      Elastic = _easeMap.Elastic,\n      Back = _easeMap.Back,\n      SteppedEase = _easeMap.SteppedEase,\n      Bounce = _easeMap.Bounce,\n      Sine = _easeMap.Sine,\n      Expo = _easeMap.Expo,\n      Circ = _easeMap.Circ;\n\n  var _win$1,\n      _doc$1,\n      _docElement,\n      _pluginInitted,\n      _tempDiv,\n      _tempDivStyler,\n      _recentSetterPlugin,\n      _reverting$1,\n      _windowExists$1 = function _windowExists() {\n    return typeof window !== \"undefined\";\n  },\n      _transformProps = {},\n      _RAD2DEG = 180 / Math.PI,\n      _DEG2RAD = Math.PI / 180,\n      _atan2 = Math.atan2,\n      _bigNum$1 = 1e8,\n      _capsExp = /([A-Z])/g,\n      _horizontalExp = /(left|right|width|margin|padding|x)/i,\n      _complexExp = /[\\s,\\(]\\S/,\n      _propertyAliases = {\n    autoAlpha: \"opacity,visibility\",\n    scale: \"scaleX,scaleY\",\n    alpha: \"opacity\"\n  },\n      _renderCSSProp = function _renderCSSProp(ratio, data) {\n    return data.set(data.t, data.p, Math.round((data.s + data.c * ratio) * 10000) / 10000 + data.u, data);\n  },\n      _renderPropWithEnd = function _renderPropWithEnd(ratio, data) {\n    return data.set(data.t, data.p, ratio === 1 ? data.e : Math.round((data.s + data.c * ratio) * 10000) / 10000 + data.u, data);\n  },\n      _renderCSSPropWithBeginning = function _renderCSSPropWithBeginning(ratio, data) {\n    return data.set(data.t, data.p, ratio ? Math.round((data.s + data.c * ratio) * 10000) / 10000 + data.u : data.b, data);\n  },\n      _renderRoundedCSSProp = function _renderRoundedCSSProp(ratio, data) {\n    var value = data.s + data.c * ratio;\n    data.set(data.t, data.p, ~~(value + (value < 0 ? -.5 : .5)) + data.u, data);\n  },\n      _renderNonTweeningValue = function _renderNonTweeningValue(ratio, data) {\n    return data.set(data.t, data.p, ratio ? data.e : data.b, data);\n  },\n      _renderNonTweeningValueOnlyAtEnd = function _renderNonTweeningValueOnlyAtEnd(ratio, data) {\n    return data.set(data.t, data.p, ratio !== 1 ? data.b : data.e, data);\n  },\n      _setterCSSStyle = function _setterCSSStyle(target, property, value) {\n    return target.style[property] = value;\n  },\n      _setterCSSProp = function _setterCSSProp(target, property, value) {\n    return target.style.setProperty(property, value);\n  },\n      _setterTransform = function _setterTransform(target, property, value) {\n    return target._gsap[property] = value;\n  },\n      _setterScale = function _setterScale(target, property, value) {\n    return target._gsap.scaleX = target._gsap.scaleY = value;\n  },\n      _setterScaleWithRender = function _setterScaleWithRender(target, property, value, data, ratio) {\n    var cache = target._gsap;\n    cache.scaleX = cache.scaleY = value;\n    cache.renderTransform(ratio, cache);\n  },\n      _setterTransformWithRender = function _setterTransformWithRender(target, property, value, data, ratio) {\n    var cache = target._gsap;\n    cache[property] = value;\n    cache.renderTransform(ratio, cache);\n  },\n      _transformProp = \"transform\",\n      _transformOriginProp = _transformProp + \"Origin\",\n      _saveStyle = function _saveStyle(property, isNotCSS) {\n    var _this = this;\n\n    var target = this.target,\n        style = target.style;\n\n    if (property in _transformProps) {\n      this.tfm = this.tfm || {};\n\n      if (property !== \"transform\") {\n        property = _propertyAliases[property] || property;\n        ~property.indexOf(\",\") ? property.split(\",\").forEach(function (a) {\n          return _this.tfm[a] = _get(target, a);\n        }) : this.tfm[property] = target._gsap.x ? target._gsap[property] : _get(target, property);\n      } else {\n        return _propertyAliases.transform.split(\",\").forEach(function (p) {\n          return _saveStyle.call(_this, p, isNotCSS);\n        });\n      }\n\n      if (this.props.indexOf(_transformProp) >= 0) {\n        return;\n      }\n\n      if (target._gsap.svg) {\n        this.svgo = target.getAttribute(\"data-svg-origin\");\n        this.props.push(_transformOriginProp, isNotCSS, \"\");\n      }\n\n      property = _transformProp;\n    }\n\n    (style || isNotCSS) && this.props.push(property, isNotCSS, style[property]);\n  },\n      _removeIndependentTransforms = function _removeIndependentTransforms(style) {\n    if (style.translate) {\n      style.removeProperty(\"translate\");\n      style.removeProperty(\"scale\");\n      style.removeProperty(\"rotate\");\n    }\n  },\n      _revertStyle = function _revertStyle() {\n    var props = this.props,\n        target = this.target,\n        style = target.style,\n        cache = target._gsap,\n        i,\n        p;\n\n    for (i = 0; i < props.length; i += 3) {\n      props[i + 1] ? target[props[i]] = props[i + 2] : props[i + 2] ? style[props[i]] = props[i + 2] : style.removeProperty(props[i].substr(0, 2) === \"--\" ? props[i] : props[i].replace(_capsExp, \"-$1\").toLowerCase());\n    }\n\n    if (this.tfm) {\n      for (p in this.tfm) {\n        cache[p] = this.tfm[p];\n      }\n\n      if (cache.svg) {\n        cache.renderTransform();\n        target.setAttribute(\"data-svg-origin\", this.svgo || \"\");\n      }\n\n      i = _reverting$1();\n\n      if ((!i || !i.isStart) && !style[_transformProp]) {\n        _removeIndependentTransforms(style);\n\n        cache.uncache = 1;\n      }\n    }\n  },\n      _getStyleSaver = function _getStyleSaver(target, properties) {\n    var saver = {\n      target: target,\n      props: [],\n      revert: _revertStyle,\n      save: _saveStyle\n    };\n    target._gsap || gsap.core.getCache(target);\n    properties && properties.split(\",\").forEach(function (p) {\n      return saver.save(p);\n    });\n    return saver;\n  },\n      _supports3D,\n      _createElement = function _createElement(type, ns) {\n    var e = _doc$1.createElementNS ? _doc$1.createElementNS((ns || \"http://www.w3.org/1999/xhtml\").replace(/^https/, \"http\"), type) : _doc$1.createElement(type);\n    return e.style ? e : _doc$1.createElement(type);\n  },\n      _getComputedProperty = function _getComputedProperty(target, property, skipPrefixFallback) {\n    var cs = getComputedStyle(target);\n    return cs[property] || cs.getPropertyValue(property.replace(_capsExp, \"-$1\").toLowerCase()) || cs.getPropertyValue(property) || !skipPrefixFallback && _getComputedProperty(target, _checkPropPrefix(property) || property, 1) || \"\";\n  },\n      _prefixes = \"O,Moz,ms,Ms,Webkit\".split(\",\"),\n      _checkPropPrefix = function _checkPropPrefix(property, element, preferPrefix) {\n    var e = element || _tempDiv,\n        s = e.style,\n        i = 5;\n\n    if (property in s && !preferPrefix) {\n      return property;\n    }\n\n    property = property.charAt(0).toUpperCase() + property.substr(1);\n\n    while (i-- && !(_prefixes[i] + property in s)) {}\n\n    return i < 0 ? null : (i === 3 ? \"ms\" : i >= 0 ? _prefixes[i] : \"\") + property;\n  },\n      _initCore = function _initCore() {\n    if (_windowExists$1() && window.document) {\n      _win$1 = window;\n      _doc$1 = _win$1.document;\n      _docElement = _doc$1.documentElement;\n      _tempDiv = _createElement(\"div\") || {\n        style: {}\n      };\n      _tempDivStyler = _createElement(\"div\");\n      _transformProp = _checkPropPrefix(_transformProp);\n      _transformOriginProp = _transformProp + \"Origin\";\n      _tempDiv.style.cssText = \"border-width:0;line-height:0;position:absolute;padding:0\";\n      _supports3D = !!_checkPropPrefix(\"perspective\");\n      _reverting$1 = gsap.core.reverting;\n      _pluginInitted = 1;\n    }\n  },\n      _getBBoxHack = function _getBBoxHack(swapIfPossible) {\n    var svg = _createElement(\"svg\", this.ownerSVGElement && this.ownerSVGElement.getAttribute(\"xmlns\") || \"http://www.w3.org/2000/svg\"),\n        oldParent = this.parentNode,\n        oldSibling = this.nextSibling,\n        oldCSS = this.style.cssText,\n        bbox;\n\n    _docElement.appendChild(svg);\n\n    svg.appendChild(this);\n    this.style.display = \"block\";\n\n    if (swapIfPossible) {\n      try {\n        bbox = this.getBBox();\n        this._gsapBBox = this.getBBox;\n        this.getBBox = _getBBoxHack;\n      } catch (e) {}\n    } else if (this._gsapBBox) {\n      bbox = this._gsapBBox();\n    }\n\n    if (oldParent) {\n      if (oldSibling) {\n        oldParent.insertBefore(this, oldSibling);\n      } else {\n        oldParent.appendChild(this);\n      }\n    }\n\n    _docElement.removeChild(svg);\n\n    this.style.cssText = oldCSS;\n    return bbox;\n  },\n      _getAttributeFallbacks = function _getAttributeFallbacks(target, attributesArray) {\n    var i = attributesArray.length;\n\n    while (i--) {\n      if (target.hasAttribute(attributesArray[i])) {\n        return target.getAttribute(attributesArray[i]);\n      }\n    }\n  },\n      _getBBox = function _getBBox(target) {\n    var bounds;\n\n    try {\n      bounds = target.getBBox();\n    } catch (error) {\n      bounds = _getBBoxHack.call(target, true);\n    }\n\n    bounds && (bounds.width || bounds.height) || target.getBBox === _getBBoxHack || (bounds = _getBBoxHack.call(target, true));\n    return bounds && !bounds.width && !bounds.x && !bounds.y ? {\n      x: +_getAttributeFallbacks(target, [\"x\", \"cx\", \"x1\"]) || 0,\n      y: +_getAttributeFallbacks(target, [\"y\", \"cy\", \"y1\"]) || 0,\n      width: 0,\n      height: 0\n    } : bounds;\n  },\n      _isSVG = function _isSVG(e) {\n    return !!(e.getCTM && (!e.parentNode || e.ownerSVGElement) && _getBBox(e));\n  },\n      _removeProperty = function _removeProperty(target, property) {\n    if (property) {\n      var style = target.style;\n\n      if (property in _transformProps && property !== _transformOriginProp) {\n        property = _transformProp;\n      }\n\n      if (style.removeProperty) {\n        if (property.substr(0, 2) === \"ms\" || property.substr(0, 6) === \"webkit\") {\n          property = \"-\" + property;\n        }\n\n        style.removeProperty(property.replace(_capsExp, \"-$1\").toLowerCase());\n      } else {\n        style.removeAttribute(property);\n      }\n    }\n  },\n      _addNonTweeningPT = function _addNonTweeningPT(plugin, target, property, beginning, end, onlySetAtEnd) {\n    var pt = new PropTween(plugin._pt, target, property, 0, 1, onlySetAtEnd ? _renderNonTweeningValueOnlyAtEnd : _renderNonTweeningValue);\n    plugin._pt = pt;\n    pt.b = beginning;\n    pt.e = end;\n\n    plugin._props.push(property);\n\n    return pt;\n  },\n      _nonConvertibleUnits = {\n    deg: 1,\n    rad: 1,\n    turn: 1\n  },\n      _nonStandardLayouts = {\n    grid: 1,\n    flex: 1\n  },\n      _convertToUnit = function _convertToUnit(target, property, value, unit) {\n    var curValue = parseFloat(value) || 0,\n        curUnit = (value + \"\").trim().substr((curValue + \"\").length) || \"px\",\n        style = _tempDiv.style,\n        horizontal = _horizontalExp.test(property),\n        isRootSVG = target.tagName.toLowerCase() === \"svg\",\n        measureProperty = (isRootSVG ? \"client\" : \"offset\") + (horizontal ? \"Width\" : \"Height\"),\n        amount = 100,\n        toPixels = unit === \"px\",\n        toPercent = unit === \"%\",\n        px,\n        parent,\n        cache,\n        isSVG;\n\n    if (unit === curUnit || !curValue || _nonConvertibleUnits[unit] || _nonConvertibleUnits[curUnit]) {\n      return curValue;\n    }\n\n    curUnit !== \"px\" && !toPixels && (curValue = _convertToUnit(target, property, value, \"px\"));\n    isSVG = target.getCTM && _isSVG(target);\n\n    if ((toPercent || curUnit === \"%\") && (_transformProps[property] || ~property.indexOf(\"adius\"))) {\n      px = isSVG ? target.getBBox()[horizontal ? \"width\" : \"height\"] : target[measureProperty];\n      return _round(toPercent ? curValue / px * amount : curValue / 100 * px);\n    }\n\n    style[horizontal ? \"width\" : \"height\"] = amount + (toPixels ? curUnit : unit);\n    parent = ~property.indexOf(\"adius\") || unit === \"em\" && target.appendChild && !isRootSVG ? target : target.parentNode;\n\n    if (isSVG) {\n      parent = (target.ownerSVGElement || {}).parentNode;\n    }\n\n    if (!parent || parent === _doc$1 || !parent.appendChild) {\n      parent = _doc$1.body;\n    }\n\n    cache = parent._gsap;\n\n    if (cache && toPercent && cache.width && horizontal && cache.time === _ticker.time && !cache.uncache) {\n      return _round(curValue / cache.width * amount);\n    } else {\n      (toPercent || curUnit === \"%\") && !_nonStandardLayouts[_getComputedProperty(parent, \"display\")] && (style.position = _getComputedProperty(target, \"position\"));\n      parent === target && (style.position = \"static\");\n      parent.appendChild(_tempDiv);\n      px = _tempDiv[measureProperty];\n      parent.removeChild(_tempDiv);\n      style.position = \"absolute\";\n\n      if (horizontal && toPercent) {\n        cache = _getCache(parent);\n        cache.time = _ticker.time;\n        cache.width = parent[measureProperty];\n      }\n    }\n\n    return _round(toPixels ? px * curValue / amount : px && curValue ? amount / px * curValue : 0);\n  },\n      _get = function _get(target, property, unit, uncache) {\n    var value;\n    _pluginInitted || _initCore();\n\n    if (property in _propertyAliases && property !== \"transform\") {\n      property = _propertyAliases[property];\n\n      if (~property.indexOf(\",\")) {\n        property = property.split(\",\")[0];\n      }\n    }\n\n    if (_transformProps[property] && property !== \"transform\") {\n      value = _parseTransform(target, uncache);\n      value = property !== \"transformOrigin\" ? value[property] : value.svg ? value.origin : _firstTwoOnly(_getComputedProperty(target, _transformOriginProp)) + \" \" + value.zOrigin + \"px\";\n    } else {\n      value = target.style[property];\n\n      if (!value || value === \"auto\" || uncache || ~(value + \"\").indexOf(\"calc(\")) {\n        value = _specialProps[property] && _specialProps[property](target, property, unit) || _getComputedProperty(target, property) || _getProperty(target, property) || (property === \"opacity\" ? 1 : 0);\n      }\n    }\n\n    return unit && !~(value + \"\").trim().indexOf(\" \") ? _convertToUnit(target, property, value, unit) + unit : value;\n  },\n      _tweenComplexCSSString = function _tweenComplexCSSString(target, prop, start, end) {\n    if (!start || start === \"none\") {\n      var p = _checkPropPrefix(prop, target, 1),\n          s = p && _getComputedProperty(target, p, 1);\n\n      if (s && s !== start) {\n        prop = p;\n        start = s;\n      } else if (prop === \"borderColor\") {\n        start = _getComputedProperty(target, \"borderTopColor\");\n      }\n    }\n\n    var pt = new PropTween(this._pt, target.style, prop, 0, 1, _renderComplexString),\n        index = 0,\n        matchIndex = 0,\n        a,\n        result,\n        startValues,\n        startNum,\n        color,\n        startValue,\n        endValue,\n        endNum,\n        chunk,\n        endUnit,\n        startUnit,\n        endValues;\n    pt.b = start;\n    pt.e = end;\n    start += \"\";\n    end += \"\";\n\n    if (end === \"auto\") {\n      target.style[prop] = end;\n      end = _getComputedProperty(target, prop) || end;\n      target.style[prop] = start;\n    }\n\n    a = [start, end];\n\n    _colorStringFilter(a);\n\n    start = a[0];\n    end = a[1];\n    startValues = start.match(_numWithUnitExp) || [];\n    endValues = end.match(_numWithUnitExp) || [];\n\n    if (endValues.length) {\n      while (result = _numWithUnitExp.exec(end)) {\n        endValue = result[0];\n        chunk = end.substring(index, result.index);\n\n        if (color) {\n          color = (color + 1) % 5;\n        } else if (chunk.substr(-5) === \"rgba(\" || chunk.substr(-5) === \"hsla(\") {\n          color = 1;\n        }\n\n        if (endValue !== (startValue = startValues[matchIndex++] || \"\")) {\n          startNum = parseFloat(startValue) || 0;\n          startUnit = startValue.substr((startNum + \"\").length);\n          endValue.charAt(1) === \"=\" && (endValue = _parseRelative(startNum, endValue) + startUnit);\n          endNum = parseFloat(endValue);\n          endUnit = endValue.substr((endNum + \"\").length);\n          index = _numWithUnitExp.lastIndex - endUnit.length;\n\n          if (!endUnit) {\n            endUnit = endUnit || _config.units[prop] || startUnit;\n\n            if (index === end.length) {\n              end += endUnit;\n              pt.e += endUnit;\n            }\n          }\n\n          if (startUnit !== endUnit) {\n            startNum = _convertToUnit(target, prop, startValue, endUnit) || 0;\n          }\n\n          pt._pt = {\n            _next: pt._pt,\n            p: chunk || matchIndex === 1 ? chunk : \",\",\n            s: startNum,\n            c: endNum - startNum,\n            m: color && color < 4 || prop === \"zIndex\" ? Math.round : 0\n          };\n        }\n      }\n\n      pt.c = index < end.length ? end.substring(index, end.length) : \"\";\n    } else {\n      pt.r = prop === \"display\" && end === \"none\" ? _renderNonTweeningValueOnlyAtEnd : _renderNonTweeningValue;\n    }\n\n    _relExp.test(end) && (pt.e = 0);\n    this._pt = pt;\n    return pt;\n  },\n      _keywordToPercent = {\n    top: \"0%\",\n    bottom: \"100%\",\n    left: \"0%\",\n    right: \"100%\",\n    center: \"50%\"\n  },\n      _convertKeywordsToPercentages = function _convertKeywordsToPercentages(value) {\n    var split = value.split(\" \"),\n        x = split[0],\n        y = split[1] || \"50%\";\n\n    if (x === \"top\" || x === \"bottom\" || y === \"left\" || y === \"right\") {\n      value = x;\n      x = y;\n      y = value;\n    }\n\n    split[0] = _keywordToPercent[x] || x;\n    split[1] = _keywordToPercent[y] || y;\n    return split.join(\" \");\n  },\n      _renderClearProps = function _renderClearProps(ratio, data) {\n    if (data.tween && data.tween._time === data.tween._dur) {\n      var target = data.t,\n          style = target.style,\n          props = data.u,\n          cache = target._gsap,\n          prop,\n          clearTransforms,\n          i;\n\n      if (props === \"all\" || props === true) {\n        style.cssText = \"\";\n        clearTransforms = 1;\n      } else {\n        props = props.split(\",\");\n        i = props.length;\n\n        while (--i > -1) {\n          prop = props[i];\n\n          if (_transformProps[prop]) {\n            clearTransforms = 1;\n            prop = prop === \"transformOrigin\" ? _transformOriginProp : _transformProp;\n          }\n\n          _removeProperty(target, prop);\n        }\n      }\n\n      if (clearTransforms) {\n        _removeProperty(target, _transformProp);\n\n        if (cache) {\n          cache.svg && target.removeAttribute(\"transform\");\n\n          _parseTransform(target, 1);\n\n          cache.uncache = 1;\n\n          _removeIndependentTransforms(style);\n        }\n      }\n    }\n  },\n      _specialProps = {\n    clearProps: function clearProps(plugin, target, property, endValue, tween) {\n      if (tween.data !== \"isFromStart\") {\n        var pt = plugin._pt = new PropTween(plugin._pt, target, property, 0, 0, _renderClearProps);\n        pt.u = endValue;\n        pt.pr = -10;\n        pt.tween = tween;\n\n        plugin._props.push(property);\n\n        return 1;\n      }\n    }\n  },\n      _identity2DMatrix = [1, 0, 0, 1, 0, 0],\n      _rotationalProperties = {},\n      _isNullTransform = function _isNullTransform(value) {\n    return value === \"matrix(1, 0, 0, 1, 0, 0)\" || value === \"none\" || !value;\n  },\n      _getComputedTransformMatrixAsArray = function _getComputedTransformMatrixAsArray(target) {\n    var matrixString = _getComputedProperty(target, _transformProp);\n\n    return _isNullTransform(matrixString) ? _identity2DMatrix : matrixString.substr(7).match(_numExp).map(_round);\n  },\n      _getMatrix = function _getMatrix(target, force2D) {\n    var cache = target._gsap || _getCache(target),\n        style = target.style,\n        matrix = _getComputedTransformMatrixAsArray(target),\n        parent,\n        nextSibling,\n        temp,\n        addedToDOM;\n\n    if (cache.svg && target.getAttribute(\"transform\")) {\n      temp = target.transform.baseVal.consolidate().matrix;\n      matrix = [temp.a, temp.b, temp.c, temp.d, temp.e, temp.f];\n      return matrix.join(\",\") === \"1,0,0,1,0,0\" ? _identity2DMatrix : matrix;\n    } else if (matrix === _identity2DMatrix && !target.offsetParent && target !== _docElement && !cache.svg) {\n      temp = style.display;\n      style.display = \"block\";\n      parent = target.parentNode;\n\n      if (!parent || !target.offsetParent) {\n        addedToDOM = 1;\n        nextSibling = target.nextElementSibling;\n\n        _docElement.appendChild(target);\n      }\n\n      matrix = _getComputedTransformMatrixAsArray(target);\n      temp ? style.display = temp : _removeProperty(target, \"display\");\n\n      if (addedToDOM) {\n        nextSibling ? parent.insertBefore(target, nextSibling) : parent ? parent.appendChild(target) : _docElement.removeChild(target);\n      }\n    }\n\n    return force2D && matrix.length > 6 ? [matrix[0], matrix[1], matrix[4], matrix[5], matrix[12], matrix[13]] : matrix;\n  },\n      _applySVGOrigin = function _applySVGOrigin(target, origin, originIsAbsolute, smooth, matrixArray, pluginToAddPropTweensTo) {\n    var cache = target._gsap,\n        matrix = matrixArray || _getMatrix(target, true),\n        xOriginOld = cache.xOrigin || 0,\n        yOriginOld = cache.yOrigin || 0,\n        xOffsetOld = cache.xOffset || 0,\n        yOffsetOld = cache.yOffset || 0,\n        a = matrix[0],\n        b = matrix[1],\n        c = matrix[2],\n        d = matrix[3],\n        tx = matrix[4],\n        ty = matrix[5],\n        originSplit = origin.split(\" \"),\n        xOrigin = parseFloat(originSplit[0]) || 0,\n        yOrigin = parseFloat(originSplit[1]) || 0,\n        bounds,\n        determinant,\n        x,\n        y;\n\n    if (!originIsAbsolute) {\n      bounds = _getBBox(target);\n      xOrigin = bounds.x + (~originSplit[0].indexOf(\"%\") ? xOrigin / 100 * bounds.width : xOrigin);\n      yOrigin = bounds.y + (~(originSplit[1] || originSplit[0]).indexOf(\"%\") ? yOrigin / 100 * bounds.height : yOrigin);\n    } else if (matrix !== _identity2DMatrix && (determinant = a * d - b * c)) {\n      x = xOrigin * (d / determinant) + yOrigin * (-c / determinant) + (c * ty - d * tx) / determinant;\n      y = xOrigin * (-b / determinant) + yOrigin * (a / determinant) - (a * ty - b * tx) / determinant;\n      xOrigin = x;\n      yOrigin = y;\n    }\n\n    if (smooth || smooth !== false && cache.smooth) {\n      tx = xOrigin - xOriginOld;\n      ty = yOrigin - yOriginOld;\n      cache.xOffset = xOffsetOld + (tx * a + ty * c) - tx;\n      cache.yOffset = yOffsetOld + (tx * b + ty * d) - ty;\n    } else {\n      cache.xOffset = cache.yOffset = 0;\n    }\n\n    cache.xOrigin = xOrigin;\n    cache.yOrigin = yOrigin;\n    cache.smooth = !!smooth;\n    cache.origin = origin;\n    cache.originIsAbsolute = !!originIsAbsolute;\n    target.style[_transformOriginProp] = \"0px 0px\";\n\n    if (pluginToAddPropTweensTo) {\n      _addNonTweeningPT(pluginToAddPropTweensTo, cache, \"xOrigin\", xOriginOld, xOrigin);\n\n      _addNonTweeningPT(pluginToAddPropTweensTo, cache, \"yOrigin\", yOriginOld, yOrigin);\n\n      _addNonTweeningPT(pluginToAddPropTweensTo, cache, \"xOffset\", xOffsetOld, cache.xOffset);\n\n      _addNonTweeningPT(pluginToAddPropTweensTo, cache, \"yOffset\", yOffsetOld, cache.yOffset);\n    }\n\n    target.setAttribute(\"data-svg-origin\", xOrigin + \" \" + yOrigin);\n  },\n      _parseTransform = function _parseTransform(target, uncache) {\n    var cache = target._gsap || new GSCache(target);\n\n    if (\"x\" in cache && !uncache && !cache.uncache) {\n      return cache;\n    }\n\n    var style = target.style,\n        invertedScaleX = cache.scaleX < 0,\n        px = \"px\",\n        deg = \"deg\",\n        cs = getComputedStyle(target),\n        origin = _getComputedProperty(target, _transformOriginProp) || \"0\",\n        x,\n        y,\n        z,\n        scaleX,\n        scaleY,\n        rotation,\n        rotationX,\n        rotationY,\n        skewX,\n        skewY,\n        perspective,\n        xOrigin,\n        yOrigin,\n        matrix,\n        angle,\n        cos,\n        sin,\n        a,\n        b,\n        c,\n        d,\n        a12,\n        a22,\n        t1,\n        t2,\n        t3,\n        a13,\n        a23,\n        a33,\n        a42,\n        a43,\n        a32;\n    x = y = z = rotation = rotationX = rotationY = skewX = skewY = perspective = 0;\n    scaleX = scaleY = 1;\n    cache.svg = !!(target.getCTM && _isSVG(target));\n\n    if (cs.translate) {\n      if (cs.translate !== \"none\" || cs.scale !== \"none\" || cs.rotate !== \"none\") {\n        style[_transformProp] = (cs.translate !== \"none\" ? \"translate3d(\" + (cs.translate + \" 0 0\").split(\" \").slice(0, 3).join(\", \") + \") \" : \"\") + (cs.rotate !== \"none\" ? \"rotate(\" + cs.rotate + \") \" : \"\") + (cs.scale !== \"none\" ? \"scale(\" + cs.scale.split(\" \").join(\",\") + \") \" : \"\") + (cs[_transformProp] !== \"none\" ? cs[_transformProp] : \"\");\n      }\n\n      style.scale = style.rotate = style.translate = \"none\";\n    }\n\n    matrix = _getMatrix(target, cache.svg);\n\n    if (cache.svg) {\n      if (cache.uncache) {\n        t2 = target.getBBox();\n        origin = cache.xOrigin - t2.x + \"px \" + (cache.yOrigin - t2.y) + \"px\";\n        t1 = \"\";\n      } else {\n        t1 = !uncache && target.getAttribute(\"data-svg-origin\");\n      }\n\n      _applySVGOrigin(target, t1 || origin, !!t1 || cache.originIsAbsolute, cache.smooth !== false, matrix);\n    }\n\n    xOrigin = cache.xOrigin || 0;\n    yOrigin = cache.yOrigin || 0;\n\n    if (matrix !== _identity2DMatrix) {\n      a = matrix[0];\n      b = matrix[1];\n      c = matrix[2];\n      d = matrix[3];\n      x = a12 = matrix[4];\n      y = a22 = matrix[5];\n\n      if (matrix.length === 6) {\n        scaleX = Math.sqrt(a * a + b * b);\n        scaleY = Math.sqrt(d * d + c * c);\n        rotation = a || b ? _atan2(b, a) * _RAD2DEG : 0;\n        skewX = c || d ? _atan2(c, d) * _RAD2DEG + rotation : 0;\n        skewX && (scaleY *= Math.abs(Math.cos(skewX * _DEG2RAD)));\n\n        if (cache.svg) {\n          x -= xOrigin - (xOrigin * a + yOrigin * c);\n          y -= yOrigin - (xOrigin * b + yOrigin * d);\n        }\n      } else {\n        a32 = matrix[6];\n        a42 = matrix[7];\n        a13 = matrix[8];\n        a23 = matrix[9];\n        a33 = matrix[10];\n        a43 = matrix[11];\n        x = matrix[12];\n        y = matrix[13];\n        z = matrix[14];\n        angle = _atan2(a32, a33);\n        rotationX = angle * _RAD2DEG;\n\n        if (angle) {\n          cos = Math.cos(-angle);\n          sin = Math.sin(-angle);\n          t1 = a12 * cos + a13 * sin;\n          t2 = a22 * cos + a23 * sin;\n          t3 = a32 * cos + a33 * sin;\n          a13 = a12 * -sin + a13 * cos;\n          a23 = a22 * -sin + a23 * cos;\n          a33 = a32 * -sin + a33 * cos;\n          a43 = a42 * -sin + a43 * cos;\n          a12 = t1;\n          a22 = t2;\n          a32 = t3;\n        }\n\n        angle = _atan2(-c, a33);\n        rotationY = angle * _RAD2DEG;\n\n        if (angle) {\n          cos = Math.cos(-angle);\n          sin = Math.sin(-angle);\n          t1 = a * cos - a13 * sin;\n          t2 = b * cos - a23 * sin;\n          t3 = c * cos - a33 * sin;\n          a43 = d * sin + a43 * cos;\n          a = t1;\n          b = t2;\n          c = t3;\n        }\n\n        angle = _atan2(b, a);\n        rotation = angle * _RAD2DEG;\n\n        if (angle) {\n          cos = Math.cos(angle);\n          sin = Math.sin(angle);\n          t1 = a * cos + b * sin;\n          t2 = a12 * cos + a22 * sin;\n          b = b * cos - a * sin;\n          a22 = a22 * cos - a12 * sin;\n          a = t1;\n          a12 = t2;\n        }\n\n        if (rotationX && Math.abs(rotationX) + Math.abs(rotation) > 359.9) {\n          rotationX = rotation = 0;\n          rotationY = 180 - rotationY;\n        }\n\n        scaleX = _round(Math.sqrt(a * a + b * b + c * c));\n        scaleY = _round(Math.sqrt(a22 * a22 + a32 * a32));\n        angle = _atan2(a12, a22);\n        skewX = Math.abs(angle) > 0.0002 ? angle * _RAD2DEG : 0;\n        perspective = a43 ? 1 / (a43 < 0 ? -a43 : a43) : 0;\n      }\n\n      if (cache.svg) {\n        t1 = target.getAttribute(\"transform\");\n        cache.forceCSS = target.setAttribute(\"transform\", \"\") || !_isNullTransform(_getComputedProperty(target, _transformProp));\n        t1 && target.setAttribute(\"transform\", t1);\n      }\n    }\n\n    if (Math.abs(skewX) > 90 && Math.abs(skewX) < 270) {\n      if (invertedScaleX) {\n        scaleX *= -1;\n        skewX += rotation <= 0 ? 180 : -180;\n        rotation += rotation <= 0 ? 180 : -180;\n      } else {\n        scaleY *= -1;\n        skewX += skewX <= 0 ? 180 : -180;\n      }\n    }\n\n    uncache = uncache || cache.uncache;\n    cache.x = x - ((cache.xPercent = x && (!uncache && cache.xPercent || (Math.round(target.offsetWidth / 2) === Math.round(-x) ? -50 : 0))) ? target.offsetWidth * cache.xPercent / 100 : 0) + px;\n    cache.y = y - ((cache.yPercent = y && (!uncache && cache.yPercent || (Math.round(target.offsetHeight / 2) === Math.round(-y) ? -50 : 0))) ? target.offsetHeight * cache.yPercent / 100 : 0) + px;\n    cache.z = z + px;\n    cache.scaleX = _round(scaleX);\n    cache.scaleY = _round(scaleY);\n    cache.rotation = _round(rotation) + deg;\n    cache.rotationX = _round(rotationX) + deg;\n    cache.rotationY = _round(rotationY) + deg;\n    cache.skewX = skewX + deg;\n    cache.skewY = skewY + deg;\n    cache.transformPerspective = perspective + px;\n\n    if (cache.zOrigin = parseFloat(origin.split(\" \")[2]) || 0) {\n      style[_transformOriginProp] = _firstTwoOnly(origin);\n    }\n\n    cache.xOffset = cache.yOffset = 0;\n    cache.force3D = _config.force3D;\n    cache.renderTransform = cache.svg ? _renderSVGTransforms : _supports3D ? _renderCSSTransforms : _renderNon3DTransforms;\n    cache.uncache = 0;\n    return cache;\n  },\n      _firstTwoOnly = function _firstTwoOnly(value) {\n    return (value = value.split(\" \"))[0] + \" \" + value[1];\n  },\n      _addPxTranslate = function _addPxTranslate(target, start, value) {\n    var unit = getUnit(start);\n    return _round(parseFloat(start) + parseFloat(_convertToUnit(target, \"x\", value + \"px\", unit))) + unit;\n  },\n      _renderNon3DTransforms = function _renderNon3DTransforms(ratio, cache) {\n    cache.z = \"0px\";\n    cache.rotationY = cache.rotationX = \"0deg\";\n    cache.force3D = 0;\n\n    _renderCSSTransforms(ratio, cache);\n  },\n      _zeroDeg = \"0deg\",\n      _zeroPx = \"0px\",\n      _endParenthesis = \") \",\n      _renderCSSTransforms = function _renderCSSTransforms(ratio, cache) {\n    var _ref = cache || this,\n        xPercent = _ref.xPercent,\n        yPercent = _ref.yPercent,\n        x = _ref.x,\n        y = _ref.y,\n        z = _ref.z,\n        rotation = _ref.rotation,\n        rotationY = _ref.rotationY,\n        rotationX = _ref.rotationX,\n        skewX = _ref.skewX,\n        skewY = _ref.skewY,\n        scaleX = _ref.scaleX,\n        scaleY = _ref.scaleY,\n        transformPerspective = _ref.transformPerspective,\n        force3D = _ref.force3D,\n        target = _ref.target,\n        zOrigin = _ref.zOrigin,\n        transforms = \"\",\n        use3D = force3D === \"auto\" && ratio && ratio !== 1 || force3D === true;\n\n    if (zOrigin && (rotationX !== _zeroDeg || rotationY !== _zeroDeg)) {\n      var angle = parseFloat(rotationY) * _DEG2RAD,\n          a13 = Math.sin(angle),\n          a33 = Math.cos(angle),\n          cos;\n\n      angle = parseFloat(rotationX) * _DEG2RAD;\n      cos = Math.cos(angle);\n      x = _addPxTranslate(target, x, a13 * cos * -zOrigin);\n      y = _addPxTranslate(target, y, -Math.sin(angle) * -zOrigin);\n      z = _addPxTranslate(target, z, a33 * cos * -zOrigin + zOrigin);\n    }\n\n    if (transformPerspective !== _zeroPx) {\n      transforms += \"perspective(\" + transformPerspective + _endParenthesis;\n    }\n\n    if (xPercent || yPercent) {\n      transforms += \"translate(\" + xPercent + \"%, \" + yPercent + \"%) \";\n    }\n\n    if (use3D || x !== _zeroPx || y !== _zeroPx || z !== _zeroPx) {\n      transforms += z !== _zeroPx || use3D ? \"translate3d(\" + x + \", \" + y + \", \" + z + \") \" : \"translate(\" + x + \", \" + y + _endParenthesis;\n    }\n\n    if (rotation !== _zeroDeg) {\n      transforms += \"rotate(\" + rotation + _endParenthesis;\n    }\n\n    if (rotationY !== _zeroDeg) {\n      transforms += \"rotateY(\" + rotationY + _endParenthesis;\n    }\n\n    if (rotationX !== _zeroDeg) {\n      transforms += \"rotateX(\" + rotationX + _endParenthesis;\n    }\n\n    if (skewX !== _zeroDeg || skewY !== _zeroDeg) {\n      transforms += \"skew(\" + skewX + \", \" + skewY + _endParenthesis;\n    }\n\n    if (scaleX !== 1 || scaleY !== 1) {\n      transforms += \"scale(\" + scaleX + \", \" + scaleY + _endParenthesis;\n    }\n\n    target.style[_transformProp] = transforms || \"translate(0, 0)\";\n  },\n      _renderSVGTransforms = function _renderSVGTransforms(ratio, cache) {\n    var _ref2 = cache || this,\n        xPercent = _ref2.xPercent,\n        yPercent = _ref2.yPercent,\n        x = _ref2.x,\n        y = _ref2.y,\n        rotation = _ref2.rotation,\n        skewX = _ref2.skewX,\n        skewY = _ref2.skewY,\n        scaleX = _ref2.scaleX,\n        scaleY = _ref2.scaleY,\n        target = _ref2.target,\n        xOrigin = _ref2.xOrigin,\n        yOrigin = _ref2.yOrigin,\n        xOffset = _ref2.xOffset,\n        yOffset = _ref2.yOffset,\n        forceCSS = _ref2.forceCSS,\n        tx = parseFloat(x),\n        ty = parseFloat(y),\n        a11,\n        a21,\n        a12,\n        a22,\n        temp;\n\n    rotation = parseFloat(rotation);\n    skewX = parseFloat(skewX);\n    skewY = parseFloat(skewY);\n\n    if (skewY) {\n      skewY = parseFloat(skewY);\n      skewX += skewY;\n      rotation += skewY;\n    }\n\n    if (rotation || skewX) {\n      rotation *= _DEG2RAD;\n      skewX *= _DEG2RAD;\n      a11 = Math.cos(rotation) * scaleX;\n      a21 = Math.sin(rotation) * scaleX;\n      a12 = Math.sin(rotation - skewX) * -scaleY;\n      a22 = Math.cos(rotation - skewX) * scaleY;\n\n      if (skewX) {\n        skewY *= _DEG2RAD;\n        temp = Math.tan(skewX - skewY);\n        temp = Math.sqrt(1 + temp * temp);\n        a12 *= temp;\n        a22 *= temp;\n\n        if (skewY) {\n          temp = Math.tan(skewY);\n          temp = Math.sqrt(1 + temp * temp);\n          a11 *= temp;\n          a21 *= temp;\n        }\n      }\n\n      a11 = _round(a11);\n      a21 = _round(a21);\n      a12 = _round(a12);\n      a22 = _round(a22);\n    } else {\n      a11 = scaleX;\n      a22 = scaleY;\n      a21 = a12 = 0;\n    }\n\n    if (tx && !~(x + \"\").indexOf(\"px\") || ty && !~(y + \"\").indexOf(\"px\")) {\n      tx = _convertToUnit(target, \"x\", x, \"px\");\n      ty = _convertToUnit(target, \"y\", y, \"px\");\n    }\n\n    if (xOrigin || yOrigin || xOffset || yOffset) {\n      tx = _round(tx + xOrigin - (xOrigin * a11 + yOrigin * a12) + xOffset);\n      ty = _round(ty + yOrigin - (xOrigin * a21 + yOrigin * a22) + yOffset);\n    }\n\n    if (xPercent || yPercent) {\n      temp = target.getBBox();\n      tx = _round(tx + xPercent / 100 * temp.width);\n      ty = _round(ty + yPercent / 100 * temp.height);\n    }\n\n    temp = \"matrix(\" + a11 + \",\" + a21 + \",\" + a12 + \",\" + a22 + \",\" + tx + \",\" + ty + \")\";\n    target.setAttribute(\"transform\", temp);\n    forceCSS && (target.style[_transformProp] = temp);\n  },\n      _addRotationalPropTween = function _addRotationalPropTween(plugin, target, property, startNum, endValue) {\n    var cap = 360,\n        isString = _isString(endValue),\n        endNum = parseFloat(endValue) * (isString && ~endValue.indexOf(\"rad\") ? _RAD2DEG : 1),\n        change = endNum - startNum,\n        finalValue = startNum + change + \"deg\",\n        direction,\n        pt;\n\n    if (isString) {\n      direction = endValue.split(\"_\")[1];\n\n      if (direction === \"short\") {\n        change %= cap;\n\n        if (change !== change % (cap / 2)) {\n          change += change < 0 ? cap : -cap;\n        }\n      }\n\n      if (direction === \"cw\" && change < 0) {\n        change = (change + cap * _bigNum$1) % cap - ~~(change / cap) * cap;\n      } else if (direction === \"ccw\" && change > 0) {\n        change = (change - cap * _bigNum$1) % cap - ~~(change / cap) * cap;\n      }\n    }\n\n    plugin._pt = pt = new PropTween(plugin._pt, target, property, startNum, change, _renderPropWithEnd);\n    pt.e = finalValue;\n    pt.u = \"deg\";\n\n    plugin._props.push(property);\n\n    return pt;\n  },\n      _assign = function _assign(target, source) {\n    for (var p in source) {\n      target[p] = source[p];\n    }\n\n    return target;\n  },\n      _addRawTransformPTs = function _addRawTransformPTs(plugin, transforms, target) {\n    var startCache = _assign({}, target._gsap),\n        exclude = \"perspective,force3D,transformOrigin,svgOrigin\",\n        style = target.style,\n        endCache,\n        p,\n        startValue,\n        endValue,\n        startNum,\n        endNum,\n        startUnit,\n        endUnit;\n\n    if (startCache.svg) {\n      startValue = target.getAttribute(\"transform\");\n      target.setAttribute(\"transform\", \"\");\n      style[_transformProp] = transforms;\n      endCache = _parseTransform(target, 1);\n\n      _removeProperty(target, _transformProp);\n\n      target.setAttribute(\"transform\", startValue);\n    } else {\n      startValue = getComputedStyle(target)[_transformProp];\n      style[_transformProp] = transforms;\n      endCache = _parseTransform(target, 1);\n      style[_transformProp] = startValue;\n    }\n\n    for (p in _transformProps) {\n      startValue = startCache[p];\n      endValue = endCache[p];\n\n      if (startValue !== endValue && exclude.indexOf(p) < 0) {\n        startUnit = getUnit(startValue);\n        endUnit = getUnit(endValue);\n        startNum = startUnit !== endUnit ? _convertToUnit(target, p, startValue, endUnit) : parseFloat(startValue);\n        endNum = parseFloat(endValue);\n        plugin._pt = new PropTween(plugin._pt, endCache, p, startNum, endNum - startNum, _renderCSSProp);\n        plugin._pt.u = endUnit || 0;\n\n        plugin._props.push(p);\n      }\n    }\n\n    _assign(endCache, startCache);\n  };\n\n  _forEachName(\"padding,margin,Width,Radius\", function (name, index) {\n    var t = \"Top\",\n        r = \"Right\",\n        b = \"Bottom\",\n        l = \"Left\",\n        props = (index < 3 ? [t, r, b, l] : [t + l, t + r, b + r, b + l]).map(function (side) {\n      return index < 2 ? name + side : \"border\" + side + name;\n    });\n\n    _specialProps[index > 1 ? \"border\" + name : name] = function (plugin, target, property, endValue, tween) {\n      var a, vars;\n\n      if (arguments.length < 4) {\n        a = props.map(function (prop) {\n          return _get(plugin, prop, property);\n        });\n        vars = a.join(\" \");\n        return vars.split(a[0]).length === 5 ? a[0] : vars;\n      }\n\n      a = (endValue + \"\").split(\" \");\n      vars = {};\n      props.forEach(function (prop, i) {\n        return vars[prop] = a[i] = a[i] || a[(i - 1) / 2 | 0];\n      });\n      plugin.init(target, vars, tween);\n    };\n  });\n\n  var CSSPlugin = {\n    name: \"css\",\n    register: _initCore,\n    targetTest: function targetTest(target) {\n      return target.style && target.nodeType;\n    },\n    init: function init(target, vars, tween, index, targets) {\n      var props = this._props,\n          style = target.style,\n          startAt = tween.vars.startAt,\n          startValue,\n          endValue,\n          endNum,\n          startNum,\n          type,\n          specialProp,\n          p,\n          startUnit,\n          endUnit,\n          relative,\n          isTransformRelated,\n          transformPropTween,\n          cache,\n          smooth,\n          hasPriority,\n          inlineProps;\n      _pluginInitted || _initCore();\n      this.styles = this.styles || _getStyleSaver(target);\n      inlineProps = this.styles.props;\n      this.tween = tween;\n\n      for (p in vars) {\n        if (p === \"autoRound\") {\n          continue;\n        }\n\n        endValue = vars[p];\n\n        if (_plugins[p] && _checkPlugin(p, vars, tween, index, target, targets)) {\n          continue;\n        }\n\n        type = typeof endValue;\n        specialProp = _specialProps[p];\n\n        if (type === \"function\") {\n          endValue = endValue.call(tween, index, target, targets);\n          type = typeof endValue;\n        }\n\n        if (type === \"string\" && ~endValue.indexOf(\"random(\")) {\n          endValue = _replaceRandom(endValue);\n        }\n\n        if (specialProp) {\n          specialProp(this, target, p, endValue, tween) && (hasPriority = 1);\n        } else if (p.substr(0, 2) === \"--\") {\n          startValue = (getComputedStyle(target).getPropertyValue(p) + \"\").trim();\n          endValue += \"\";\n          _colorExp.lastIndex = 0;\n\n          if (!_colorExp.test(startValue)) {\n            startUnit = getUnit(startValue);\n            endUnit = getUnit(endValue);\n          }\n\n          endUnit ? startUnit !== endUnit && (startValue = _convertToUnit(target, p, startValue, endUnit) + endUnit) : startUnit && (endValue += startUnit);\n          this.add(style, \"setProperty\", startValue, endValue, index, targets, 0, 0, p);\n          props.push(p);\n          inlineProps.push(p, 0, style[p]);\n        } else if (type !== \"undefined\") {\n          if (startAt && p in startAt) {\n            startValue = typeof startAt[p] === \"function\" ? startAt[p].call(tween, index, target, targets) : startAt[p];\n            _isString(startValue) && ~startValue.indexOf(\"random(\") && (startValue = _replaceRandom(startValue));\n            getUnit(startValue + \"\") || (startValue += _config.units[p] || getUnit(_get(target, p)) || \"\");\n            (startValue + \"\").charAt(1) === \"=\" && (startValue = _get(target, p));\n          } else {\n            startValue = _get(target, p);\n          }\n\n          startNum = parseFloat(startValue);\n          relative = type === \"string\" && endValue.charAt(1) === \"=\" && endValue.substr(0, 2);\n          relative && (endValue = endValue.substr(2));\n          endNum = parseFloat(endValue);\n\n          if (p in _propertyAliases) {\n            if (p === \"autoAlpha\") {\n              if (startNum === 1 && _get(target, \"visibility\") === \"hidden\" && endNum) {\n                startNum = 0;\n              }\n\n              inlineProps.push(\"visibility\", 0, style.visibility);\n\n              _addNonTweeningPT(this, style, \"visibility\", startNum ? \"inherit\" : \"hidden\", endNum ? \"inherit\" : \"hidden\", !endNum);\n            }\n\n            if (p !== \"scale\" && p !== \"transform\") {\n              p = _propertyAliases[p];\n              ~p.indexOf(\",\") && (p = p.split(\",\")[0]);\n            }\n          }\n\n          isTransformRelated = p in _transformProps;\n\n          if (isTransformRelated) {\n            this.styles.save(p);\n\n            if (!transformPropTween) {\n              cache = target._gsap;\n              cache.renderTransform && !vars.parseTransform || _parseTransform(target, vars.parseTransform);\n              smooth = vars.smoothOrigin !== false && cache.smooth;\n              transformPropTween = this._pt = new PropTween(this._pt, style, _transformProp, 0, 1, cache.renderTransform, cache, 0, -1);\n              transformPropTween.dep = 1;\n            }\n\n            if (p === \"scale\") {\n              this._pt = new PropTween(this._pt, cache, \"scaleY\", cache.scaleY, (relative ? _parseRelative(cache.scaleY, relative + endNum) : endNum) - cache.scaleY || 0, _renderCSSProp);\n              this._pt.u = 0;\n              props.push(\"scaleY\", p);\n              p += \"X\";\n            } else if (p === \"transformOrigin\") {\n              inlineProps.push(_transformOriginProp, 0, style[_transformOriginProp]);\n              endValue = _convertKeywordsToPercentages(endValue);\n\n              if (cache.svg) {\n                _applySVGOrigin(target, endValue, 0, smooth, 0, this);\n              } else {\n                endUnit = parseFloat(endValue.split(\" \")[2]) || 0;\n                endUnit !== cache.zOrigin && _addNonTweeningPT(this, cache, \"zOrigin\", cache.zOrigin, endUnit);\n\n                _addNonTweeningPT(this, style, p, _firstTwoOnly(startValue), _firstTwoOnly(endValue));\n              }\n\n              continue;\n            } else if (p === \"svgOrigin\") {\n              _applySVGOrigin(target, endValue, 1, smooth, 0, this);\n\n              continue;\n            } else if (p in _rotationalProperties) {\n              _addRotationalPropTween(this, cache, p, startNum, relative ? _parseRelative(startNum, relative + endValue) : endValue);\n\n              continue;\n            } else if (p === \"smoothOrigin\") {\n              _addNonTweeningPT(this, cache, \"smooth\", cache.smooth, endValue);\n\n              continue;\n            } else if (p === \"force3D\") {\n              cache[p] = endValue;\n              continue;\n            } else if (p === \"transform\") {\n              _addRawTransformPTs(this, endValue, target);\n\n              continue;\n            }\n          } else if (!(p in style)) {\n            p = _checkPropPrefix(p) || p;\n          }\n\n          if (isTransformRelated || (endNum || endNum === 0) && (startNum || startNum === 0) && !_complexExp.test(endValue) && p in style) {\n            startUnit = (startValue + \"\").substr((startNum + \"\").length);\n            endNum || (endNum = 0);\n            endUnit = getUnit(endValue) || (p in _config.units ? _config.units[p] : startUnit);\n            startUnit !== endUnit && (startNum = _convertToUnit(target, p, startValue, endUnit));\n            this._pt = new PropTween(this._pt, isTransformRelated ? cache : style, p, startNum, (relative ? _parseRelative(startNum, relative + endNum) : endNum) - startNum, !isTransformRelated && (endUnit === \"px\" || p === \"zIndex\") && vars.autoRound !== false ? _renderRoundedCSSProp : _renderCSSProp);\n            this._pt.u = endUnit || 0;\n\n            if (startUnit !== endUnit && endUnit !== \"%\") {\n              this._pt.b = startValue;\n              this._pt.r = _renderCSSPropWithBeginning;\n            }\n          } else if (!(p in style)) {\n            if (p in target) {\n              this.add(target, p, startValue || target[p], relative ? relative + endValue : endValue, index, targets);\n            } else if (p !== \"parseTransform\") {\n              _missingPlugin(p, endValue);\n\n              continue;\n            }\n          } else {\n            _tweenComplexCSSString.call(this, target, p, startValue, relative ? relative + endValue : endValue);\n          }\n\n          isTransformRelated || (p in style ? inlineProps.push(p, 0, style[p]) : inlineProps.push(p, 1, startValue || target[p]));\n          props.push(p);\n        }\n      }\n\n      hasPriority && _sortPropTweensByPriority(this);\n    },\n    render: function render(ratio, data) {\n      if (data.tween._time || !_reverting$1()) {\n        var pt = data._pt;\n\n        while (pt) {\n          pt.r(ratio, pt.d);\n          pt = pt._next;\n        }\n      } else {\n        data.styles.revert();\n      }\n    },\n    get: _get,\n    aliases: _propertyAliases,\n    getSetter: function getSetter(target, property, plugin) {\n      var p = _propertyAliases[property];\n      p && p.indexOf(\",\") < 0 && (property = p);\n      return property in _transformProps && property !== _transformOriginProp && (target._gsap.x || _get(target, \"x\")) ? plugin && _recentSetterPlugin === plugin ? property === \"scale\" ? _setterScale : _setterTransform : (_recentSetterPlugin = plugin || {}) && (property === \"scale\" ? _setterScaleWithRender : _setterTransformWithRender) : target.style && !_isUndefined(target.style[property]) ? _setterCSSStyle : ~property.indexOf(\"-\") ? _setterCSSProp : _getSetter(target, property);\n    },\n    core: {\n      _removeProperty: _removeProperty,\n      _getMatrix: _getMatrix\n    }\n  };\n  gsap.utils.checkPrefix = _checkPropPrefix;\n  gsap.core.getStyleSaver = _getStyleSaver;\n\n  (function (positionAndScale, rotation, others, aliases) {\n    var all = _forEachName(positionAndScale + \",\" + rotation + \",\" + others, function (name) {\n      _transformProps[name] = 1;\n    });\n\n    _forEachName(rotation, function (name) {\n      _config.units[name] = \"deg\";\n      _rotationalProperties[name] = 1;\n    });\n\n    _propertyAliases[all[13]] = positionAndScale + \",\" + rotation;\n\n    _forEachName(aliases, function (name) {\n      var split = name.split(\":\");\n      _propertyAliases[split[1]] = all[split[0]];\n    });\n  })(\"x,y,z,scale,scaleX,scaleY,xPercent,yPercent\", \"rotation,rotationX,rotationY,skewX,skewY\", \"transform,transformOrigin,svgOrigin,force3D,smoothOrigin,transformPerspective\", \"0:translateX,1:translateY,2:translateZ,8:rotate,8:rotationZ,8:rotateZ,9:rotateX,10:rotateY\");\n\n  _forEachName(\"x,y,z,top,right,bottom,left,width,height,fontSize,padding,margin,perspective\", function (name) {\n    _config.units[name] = \"px\";\n  });\n\n  gsap.registerPlugin(CSSPlugin);\n\n  var gsapWithCSS = gsap.registerPlugin(CSSPlugin) || gsap,\n      TweenMaxWithCSS = gsapWithCSS.core.Tween;\n\n  exports.Back = Back;\n  exports.Bounce = Bounce;\n  exports.CSSPlugin = CSSPlugin;\n  exports.Circ = Circ;\n  exports.Cubic = Cubic;\n  exports.Elastic = Elastic;\n  exports.Expo = Expo;\n  exports.Linear = Linear;\n  exports.Power0 = Power0;\n  exports.Power1 = Power1;\n  exports.Power2 = Power2;\n  exports.Power3 = Power3;\n  exports.Power4 = Power4;\n  exports.Quad = Quad;\n  exports.Quart = Quart;\n  exports.Quint = Quint;\n  exports.Sine = Sine;\n  exports.SteppedEase = SteppedEase;\n  exports.Strong = Strong;\n  exports.TimelineLite = Timeline;\n  exports.TimelineMax = Timeline;\n  exports.TweenLite = Tween;\n  exports.TweenMax = TweenMaxWithCSS;\n  exports.default = gsapWithCSS;\n  exports.gsap = gsapWithCSS;\n\n  if (typeof(window) === 'undefined' || window !== exports) {Object.defineProperty(exports, '__esModule', { value: true });} else {delete window.default;}\n\n})));\n","/*!\n * matrix 3.11.5\n * https://greensock.com\n *\n * Copyright 2008-2023, GreenSock. All rights reserved.\n * Subject to the terms at https://greensock.com/standard-license or for\n * Club GreenSock members, the agreement issued with that membership.\n * @author: Jack Doyle, jack@greensock.com\n*/\n\n/* eslint-disable */\nvar _doc,\n    _win,\n    _docElement,\n    _body,\n    _divContainer,\n    _svgContainer,\n    _identityMatrix,\n    _gEl,\n    _transformProp = \"transform\",\n    _transformOriginProp = _transformProp + \"Origin\",\n    _hasOffsetBug,\n    _setDoc = function _setDoc(element) {\n  var doc = element.ownerDocument || element;\n\n  if (!(_transformProp in element.style) && \"msTransform\" in element.style) {\n    //to improve compatibility with old Microsoft browsers\n    _transformProp = \"msTransform\";\n    _transformOriginProp = _transformProp + \"Origin\";\n  }\n\n  while (doc.parentNode && (doc = doc.parentNode)) {}\n\n  _win = window;\n  _identityMatrix = new Matrix2D();\n\n  if (doc) {\n    _doc = doc;\n    _docElement = doc.documentElement;\n    _body = doc.body;\n    _gEl = _doc.createElementNS(\"http://www.w3.org/2000/svg\", \"g\"); // prevent any existing CSS from transforming it\n\n    _gEl.style.transform = \"none\"; // now test for the offset reporting bug. Use feature detection instead of browser sniffing to make things more bulletproof and future-proof. Hopefully Safari will fix their bug soon but it's 2020 and it's still not fixed.\n\n    var d1 = doc.createElement(\"div\"),\n        d2 = doc.createElement(\"div\");\n\n    _body.appendChild(d1);\n\n    d1.appendChild(d2);\n    d1.style.position = \"static\";\n    d1.style[_transformProp] = \"translate3d(0,0,1px)\";\n    _hasOffsetBug = d2.offsetParent !== d1;\n\n    _body.removeChild(d1);\n  }\n\n  return doc;\n},\n    _forceNonZeroScale = function _forceNonZeroScale(e) {\n  // walks up the element's ancestors and finds any that had their scale set to 0 via GSAP, and changes them to 0.0001 to ensure that measurements work. Firefox has a bug that causes it to incorrectly report getBoundingClientRect() when scale is 0.\n  var a, cache;\n\n  while (e && e !== _body) {\n    cache = e._gsap;\n    cache && cache.uncache && cache.get(e, \"x\"); // force re-parsing of transforms if necessary\n\n    if (cache && !cache.scaleX && !cache.scaleY && cache.renderTransform) {\n      cache.scaleX = cache.scaleY = 1e-4;\n      cache.renderTransform(1, cache);\n      a ? a.push(cache) : a = [cache];\n    }\n\n    e = e.parentNode;\n  }\n\n  return a;\n},\n    // possible future addition: pass an element to _forceDisplay() and it'll walk up all its ancestors and make sure anything with display: none is set to display: block, and if there's no parentNode, it'll add it to the body. It returns an Array that you can then feed to _revertDisplay() to have it revert all the changes it made.\n// _forceDisplay = e => {\n// \tlet a = [],\n// \t\tparent;\n// \twhile (e && e !== _body) {\n// \t\tparent = e.parentNode;\n// \t\t(_win.getComputedStyle(e).display === \"none\" || !parent) && a.push(e, e.style.display, parent) && (e.style.display = \"block\");\n// \t\tparent || _body.appendChild(e);\n// \t\te = parent;\n// \t}\n// \treturn a;\n// },\n// _revertDisplay = a => {\n// \tfor (let i = 0; i < a.length; i+=3) {\n// \t\ta[i+1] ? (a[i].style.display = a[i+1]) : a[i].style.removeProperty(\"display\");\n// \t\ta[i+2] || a[i].parentNode.removeChild(a[i]);\n// \t}\n// },\n_svgTemps = [],\n    //we create 3 elements for SVG, and 3 for other DOM elements and cache them for performance reasons. They get nested in _divContainer and _svgContainer so that just one element is added to the DOM on each successive attempt. Again, performance is key.\n_divTemps = [],\n    _getDocScrollTop = function _getDocScrollTop() {\n  return _win.pageYOffset || _doc.scrollTop || _docElement.scrollTop || _body.scrollTop || 0;\n},\n    _getDocScrollLeft = function _getDocScrollLeft() {\n  return _win.pageXOffset || _doc.scrollLeft || _docElement.scrollLeft || _body.scrollLeft || 0;\n},\n    _svgOwner = function _svgOwner(element) {\n  return element.ownerSVGElement || ((element.tagName + \"\").toLowerCase() === \"svg\" ? element : null);\n},\n    _isFixed = function _isFixed(element) {\n  if (_win.getComputedStyle(element).position === \"fixed\") {\n    return true;\n  }\n\n  element = element.parentNode;\n\n  if (element && element.nodeType === 1) {\n    // avoid document fragments which will throw an error.\n    return _isFixed(element);\n  }\n},\n    _createSibling = function _createSibling(element, i) {\n  if (element.parentNode && (_doc || _setDoc(element))) {\n    var svg = _svgOwner(element),\n        ns = svg ? svg.getAttribute(\"xmlns\") || \"http://www.w3.org/2000/svg\" : \"http://www.w3.org/1999/xhtml\",\n        type = svg ? i ? \"rect\" : \"g\" : \"div\",\n        x = i !== 2 ? 0 : 100,\n        y = i === 3 ? 100 : 0,\n        css = \"position:absolute;display:block;pointer-events:none;margin:0;padding:0;\",\n        e = _doc.createElementNS ? _doc.createElementNS(ns.replace(/^https/, \"http\"), type) : _doc.createElement(type);\n\n    if (i) {\n      if (!svg) {\n        if (!_divContainer) {\n          _divContainer = _createSibling(element);\n          _divContainer.style.cssText = css;\n        }\n\n        e.style.cssText = css + \"width:0.1px;height:0.1px;top:\" + y + \"px;left:\" + x + \"px\";\n\n        _divContainer.appendChild(e);\n      } else {\n        _svgContainer || (_svgContainer = _createSibling(element));\n        e.setAttribute(\"width\", 0.01);\n        e.setAttribute(\"height\", 0.01);\n        e.setAttribute(\"transform\", \"translate(\" + x + \",\" + y + \")\");\n\n        _svgContainer.appendChild(e);\n      }\n    }\n\n    return e;\n  }\n\n  throw \"Need document and parent.\";\n},\n    _consolidate = function _consolidate(m) {\n  // replaces SVGTransformList.consolidate() because a bug in Firefox causes it to break pointer events. See https://greensock.com/forums/topic/23248-touch-is-not-working-on-draggable-in-firefox-windows-v324/?tab=comments#comment-109800\n  var c = new Matrix2D(),\n      i = 0;\n\n  for (; i < m.numberOfItems; i++) {\n    c.multiply(m.getItem(i).matrix);\n  }\n\n  return c;\n},\n    _getCTM = function _getCTM(svg) {\n  var m = svg.getCTM(),\n      transform;\n\n  if (!m) {\n    // Firefox returns null for getCTM() on root <svg> elements, so this is a workaround using a <g> that we temporarily append.\n    transform = svg.style[_transformProp];\n    svg.style[_transformProp] = \"none\"; // a bug in Firefox causes css transforms to contaminate the getCTM()\n\n    svg.appendChild(_gEl);\n    m = _gEl.getCTM();\n    svg.removeChild(_gEl);\n    transform ? svg.style[_transformProp] = transform : svg.style.removeProperty(_transformProp.replace(/([A-Z])/g, \"-$1\").toLowerCase());\n  }\n\n  return m || _identityMatrix.clone(); // Firefox will still return null if the <svg> has a width/height of 0 in the browser.\n},\n    _placeSiblings = function _placeSiblings(element, adjustGOffset) {\n  var svg = _svgOwner(element),\n      isRootSVG = element === svg,\n      siblings = svg ? _svgTemps : _divTemps,\n      parent = element.parentNode,\n      container,\n      m,\n      b,\n      x,\n      y,\n      cs;\n\n  if (element === _win) {\n    return element;\n  }\n\n  siblings.length || siblings.push(_createSibling(element, 1), _createSibling(element, 2), _createSibling(element, 3));\n  container = svg ? _svgContainer : _divContainer;\n\n  if (svg) {\n    if (isRootSVG) {\n      b = _getCTM(element);\n      x = -b.e / b.a;\n      y = -b.f / b.d;\n      m = _identityMatrix;\n    } else if (element.getBBox) {\n      b = element.getBBox();\n      m = element.transform ? element.transform.baseVal : {}; // IE11 doesn't follow the spec.\n\n      m = !m.numberOfItems ? _identityMatrix : m.numberOfItems > 1 ? _consolidate(m) : m.getItem(0).matrix; // don't call m.consolidate().matrix because a bug in Firefox makes pointer events not work when consolidate() is called on the same tick as getBoundingClientRect()! See https://greensock.com/forums/topic/23248-touch-is-not-working-on-draggable-in-firefox-windows-v324/?tab=comments#comment-109800\n\n      x = m.a * b.x + m.c * b.y;\n      y = m.b * b.x + m.d * b.y;\n    } else {\n      // may be a <mask> which has no getBBox() so just use defaults instead of throwing errors.\n      m = new Matrix2D();\n      x = y = 0;\n    }\n\n    if (adjustGOffset && element.tagName.toLowerCase() === \"g\") {\n      x = y = 0;\n    }\n\n    (isRootSVG ? svg : parent).appendChild(container);\n    container.setAttribute(\"transform\", \"matrix(\" + m.a + \",\" + m.b + \",\" + m.c + \",\" + m.d + \",\" + (m.e + x) + \",\" + (m.f + y) + \")\");\n  } else {\n    x = y = 0;\n\n    if (_hasOffsetBug) {\n      // some browsers (like Safari) have a bug that causes them to misreport offset values. When an ancestor element has a transform applied, it's supposed to treat it as if it's position: relative (new context). Safari botches this, so we need to find the closest ancestor (between the element and its offsetParent) that has a transform applied and if one is found, grab its offsetTop/Left and subtract them to compensate.\n      m = element.offsetParent;\n      b = element;\n\n      while (b && (b = b.parentNode) && b !== m && b.parentNode) {\n        if ((_win.getComputedStyle(b)[_transformProp] + \"\").length > 4) {\n          x = b.offsetLeft;\n          y = b.offsetTop;\n          b = 0;\n        }\n      }\n    }\n\n    cs = _win.getComputedStyle(element);\n\n    if (cs.position !== \"absolute\" && cs.position !== \"fixed\") {\n      m = element.offsetParent;\n\n      while (parent && parent !== m) {\n        // if there's an ancestor element between the element and its offsetParent that's scrolled, we must factor that in.\n        x += parent.scrollLeft || 0;\n        y += parent.scrollTop || 0;\n        parent = parent.parentNode;\n      }\n    }\n\n    b = container.style;\n    b.top = element.offsetTop - y + \"px\";\n    b.left = element.offsetLeft - x + \"px\";\n    b[_transformProp] = cs[_transformProp];\n    b[_transformOriginProp] = cs[_transformOriginProp]; // b.border = m.border;\n    // b.borderLeftStyle = m.borderLeftStyle;\n    // b.borderTopStyle = m.borderTopStyle;\n    // b.borderLeftWidth = m.borderLeftWidth;\n    // b.borderTopWidth = m.borderTopWidth;\n\n    b.position = cs.position === \"fixed\" ? \"fixed\" : \"absolute\";\n    element.parentNode.appendChild(container);\n  }\n\n  return container;\n},\n    _setMatrix = function _setMatrix(m, a, b, c, d, e, f) {\n  m.a = a;\n  m.b = b;\n  m.c = c;\n  m.d = d;\n  m.e = e;\n  m.f = f;\n  return m;\n};\n\nexport var Matrix2D = /*#__PURE__*/function () {\n  function Matrix2D(a, b, c, d, e, f) {\n    if (a === void 0) {\n      a = 1;\n    }\n\n    if (b === void 0) {\n      b = 0;\n    }\n\n    if (c === void 0) {\n      c = 0;\n    }\n\n    if (d === void 0) {\n      d = 1;\n    }\n\n    if (e === void 0) {\n      e = 0;\n    }\n\n    if (f === void 0) {\n      f = 0;\n    }\n\n    _setMatrix(this, a, b, c, d, e, f);\n  }\n\n  var _proto = Matrix2D.prototype;\n\n  _proto.inverse = function inverse() {\n    var a = this.a,\n        b = this.b,\n        c = this.c,\n        d = this.d,\n        e = this.e,\n        f = this.f,\n        determinant = a * d - b * c || 1e-10;\n    return _setMatrix(this, d / determinant, -b / determinant, -c / determinant, a / determinant, (c * f - d * e) / determinant, -(a * f - b * e) / determinant);\n  };\n\n  _proto.multiply = function multiply(matrix) {\n    var a = this.a,\n        b = this.b,\n        c = this.c,\n        d = this.d,\n        e = this.e,\n        f = this.f,\n        a2 = matrix.a,\n        b2 = matrix.c,\n        c2 = matrix.b,\n        d2 = matrix.d,\n        e2 = matrix.e,\n        f2 = matrix.f;\n    return _setMatrix(this, a2 * a + c2 * c, a2 * b + c2 * d, b2 * a + d2 * c, b2 * b + d2 * d, e + e2 * a + f2 * c, f + e2 * b + f2 * d);\n  };\n\n  _proto.clone = function clone() {\n    return new Matrix2D(this.a, this.b, this.c, this.d, this.e, this.f);\n  };\n\n  _proto.equals = function equals(matrix) {\n    var a = this.a,\n        b = this.b,\n        c = this.c,\n        d = this.d,\n        e = this.e,\n        f = this.f;\n    return a === matrix.a && b === matrix.b && c === matrix.c && d === matrix.d && e === matrix.e && f === matrix.f;\n  };\n\n  _proto.apply = function apply(point, decoratee) {\n    if (decoratee === void 0) {\n      decoratee = {};\n    }\n\n    var x = point.x,\n        y = point.y,\n        a = this.a,\n        b = this.b,\n        c = this.c,\n        d = this.d,\n        e = this.e,\n        f = this.f;\n    decoratee.x = x * a + y * c + e || 0;\n    decoratee.y = x * b + y * d + f || 0;\n    return decoratee;\n  };\n\n  return Matrix2D;\n}(); // Feed in an element and it'll return a 2D matrix (optionally inverted) so that you can translate between coordinate spaces.\n// Inverting lets you translate a global point into a local coordinate space. No inverting lets you go the other way.\n// We needed this to work around various browser bugs, like Firefox doesn't accurately report getScreenCTM() when there\n// are transforms applied to ancestor elements.\n// The matrix math to convert any x/y coordinate is as follows, which is wrapped in a convenient apply() method of Matrix2D above:\n//     tx = m.a * x + m.c * y + m.e\n//     ty = m.b * x + m.d * y + m.f\n\nexport function getGlobalMatrix(element, inverse, adjustGOffset, includeScrollInFixed) {\n  // adjustGOffset is typically used only when grabbing an element's PARENT's global matrix, and it ignores the x/y offset of any SVG <g> elements because they behave in a special way.\n  if (!element || !element.parentNode || (_doc || _setDoc(element)).documentElement === element) {\n    return new Matrix2D();\n  }\n\n  var zeroScales = _forceNonZeroScale(element),\n      svg = _svgOwner(element),\n      temps = svg ? _svgTemps : _divTemps,\n      container = _placeSiblings(element, adjustGOffset),\n      b1 = temps[0].getBoundingClientRect(),\n      b2 = temps[1].getBoundingClientRect(),\n      b3 = temps[2].getBoundingClientRect(),\n      parent = container.parentNode,\n      isFixed = !includeScrollInFixed && _isFixed(element),\n      m = new Matrix2D((b2.left - b1.left) / 100, (b2.top - b1.top) / 100, (b3.left - b1.left) / 100, (b3.top - b1.top) / 100, b1.left + (isFixed ? 0 : _getDocScrollLeft()), b1.top + (isFixed ? 0 : _getDocScrollTop()));\n\n  parent.removeChild(container);\n\n  if (zeroScales) {\n    b1 = zeroScales.length;\n\n    while (b1--) {\n      b2 = zeroScales[b1];\n      b2.scaleX = b2.scaleY = 0;\n      b2.renderTransform(1, b2);\n    }\n  }\n\n  return inverse ? m.inverse() : m;\n}\nexport { _getDocScrollTop, _getDocScrollLeft, _setDoc, _isFixed, _getCTM }; // export function getMatrix(element) {\n// \t_doc || _setDoc(element);\n// \tlet m = (_win.getComputedStyle(element)[_transformProp] + \"\").substr(7).match(/[-.]*\\d+[.e\\-+]*\\d*[e\\-\\+]*\\d*/g),\n// \t\tis2D = m && m.length === 6;\n// \treturn !m || m.length < 6 ? new Matrix2D() : new Matrix2D(+m[0], +m[1], +m[is2D ? 2 : 4], +m[is2D ? 3 : 5], +m[is2D ? 4 : 12], +m[is2D ? 5 : 13]);\n// }","(function(window, factory) {\n\tvar lazySizes = factory(window, window.document, Date);\n\twindow.lazySizes = lazySizes;\n\tif(typeof module == 'object' && module.exports){\n\t\tmodule.exports = lazySizes;\n\t}\n}(typeof window != 'undefined' ?\n      window : {}, \n/**\n * import(\"./types/global\")\n * @typedef { import(\"./types/lazysizes-config\").LazySizesConfigPartial } LazySizesConfigPartial\n */\nfunction l(window, document, Date) { // Pass in the window Date function also for SSR because the Date class can be lost\n\t'use strict';\n\t/*jshint eqnull:true */\n\n\tvar lazysizes,\n\t\t/**\n\t\t * @type { LazySizesConfigPartial }\n\t\t */\n\t\tlazySizesCfg;\n\n\t(function(){\n\t\tvar prop;\n\n\t\tvar lazySizesDefaults = {\n\t\t\tlazyClass: 'lazyload',\n\t\t\tloadedClass: 'lazyloaded',\n\t\t\tloadingClass: 'lazyloading',\n\t\t\tpreloadClass: 'lazypreload',\n\t\t\terrorClass: 'lazyerror',\n\t\t\t//strictClass: 'lazystrict',\n\t\t\tautosizesClass: 'lazyautosizes',\n\t\t\tfastLoadedClass: 'ls-is-cached',\n\t\t\tiframeLoadMode: 0,\n\t\t\tsrcAttr: 'data-src',\n\t\t\tsrcsetAttr: 'data-srcset',\n\t\t\tsizesAttr: 'data-sizes',\n\t\t\t//preloadAfterLoad: false,\n\t\t\tminSize: 40,\n\t\t\tcustomMedia: {},\n\t\t\tinit: true,\n\t\t\texpFactor: 1.5,\n\t\t\thFac: 0.8,\n\t\t\tloadMode: 2,\n\t\t\tloadHidden: true,\n\t\t\tricTimeout: 0,\n\t\t\tthrottleDelay: 125,\n\t\t};\n\n\t\tlazySizesCfg = window.lazySizesConfig || window.lazysizesConfig || {};\n\n\t\tfor(prop in lazySizesDefaults){\n\t\t\tif(!(prop in lazySizesCfg)){\n\t\t\t\tlazySizesCfg[prop] = lazySizesDefaults[prop];\n\t\t\t}\n\t\t}\n\t})();\n\n\tif (!document || !document.getElementsByClassName) {\n\t\treturn {\n\t\t\tinit: function () {},\n\t\t\t/**\n\t\t\t * @type { LazySizesConfigPartial }\n\t\t\t */\n\t\t\tcfg: lazySizesCfg,\n\t\t\t/**\n\t\t\t * @type { true }\n\t\t\t */\n\t\t\tnoSupport: true,\n\t\t};\n\t}\n\n\tvar docElem = document.documentElement;\n\n\tvar supportPicture = window.HTMLPictureElement;\n\n\tvar _addEventListener = 'addEventListener';\n\n\tvar _getAttribute = 'getAttribute';\n\n\t/**\n\t * Update to bind to window because 'this' becomes null during SSR\n\t * builds.\n\t */\n\tvar addEventListener = window[_addEventListener].bind(window);\n\n\tvar setTimeout = window.setTimeout;\n\n\tvar requestAnimationFrame = window.requestAnimationFrame || setTimeout;\n\n\tvar requestIdleCallback = window.requestIdleCallback;\n\n\tvar regPicture = /^picture$/i;\n\n\tvar loadEvents = ['load', 'error', 'lazyincluded', '_lazyloaded'];\n\n\tvar regClassCache = {};\n\n\tvar forEach = Array.prototype.forEach;\n\n\t/**\n\t * @param ele {Element}\n\t * @param cls {string}\n\t */\n\tvar hasClass = function(ele, cls) {\n\t\tif(!regClassCache[cls]){\n\t\t\tregClassCache[cls] = new RegExp('(\\\\s|^)'+cls+'(\\\\s|$)');\n\t\t}\n\t\treturn regClassCache[cls].test(ele[_getAttribute]('class') || '') && regClassCache[cls];\n\t};\n\n\t/**\n\t * @param ele {Element}\n\t * @param cls {string}\n\t */\n\tvar addClass = function(ele, cls) {\n\t\tif (!hasClass(ele, cls)){\n\t\t\tele.setAttribute('class', (ele[_getAttribute]('class') || '').trim() + ' ' + cls);\n\t\t}\n\t};\n\n\t/**\n\t * @param ele {Element}\n\t * @param cls {string}\n\t */\n\tvar removeClass = function(ele, cls) {\n\t\tvar reg;\n\t\tif ((reg = hasClass(ele,cls))) {\n\t\t\tele.setAttribute('class', (ele[_getAttribute]('class') || '').replace(reg, ' '));\n\t\t}\n\t};\n\n\tvar addRemoveLoadEvents = function(dom, fn, add){\n\t\tvar action = add ? _addEventListener : 'removeEventListener';\n\t\tif(add){\n\t\t\taddRemoveLoadEvents(dom, fn);\n\t\t}\n\t\tloadEvents.forEach(function(evt){\n\t\t\tdom[action](evt, fn);\n\t\t});\n\t};\n\n\t/**\n\t * @param elem { Element }\n\t * @param name { string }\n\t * @param detail { any }\n\t * @param noBubbles { boolean }\n\t * @param noCancelable { boolean }\n\t * @returns { CustomEvent }\n\t */\n\tvar triggerEvent = function(elem, name, detail, noBubbles, noCancelable){\n\t\tvar event = document.createEvent('Event');\n\n\t\tif(!detail){\n\t\t\tdetail = {};\n\t\t}\n\n\t\tdetail.instance = lazysizes;\n\n\t\tevent.initEvent(name, !noBubbles, !noCancelable);\n\n\t\tevent.detail = detail;\n\n\t\telem.dispatchEvent(event);\n\t\treturn event;\n\t};\n\n\tvar updatePolyfill = function (el, full){\n\t\tvar polyfill;\n\t\tif( !supportPicture && ( polyfill = (window.picturefill || lazySizesCfg.pf) ) ){\n\t\t\tif(full && full.src && !el[_getAttribute]('srcset')){\n\t\t\t\tel.setAttribute('srcset', full.src);\n\t\t\t}\n\t\t\tpolyfill({reevaluate: true, elements: [el]});\n\t\t} else if(full && full.src){\n\t\t\tel.src = full.src;\n\t\t}\n\t};\n\n\tvar getCSS = function (elem, style){\n\t\treturn (getComputedStyle(elem, null) || {})[style];\n\t};\n\n\t/**\n\t *\n\t * @param elem { Element }\n\t * @param parent { Element }\n\t * @param [width] {number}\n\t * @returns {number}\n\t */\n\tvar getWidth = function(elem, parent, width){\n\t\twidth = width || elem.offsetWidth;\n\n\t\twhile(width < lazySizesCfg.minSize && parent && !elem._lazysizesWidth){\n\t\t\twidth =  parent.offsetWidth;\n\t\t\tparent = parent.parentNode;\n\t\t}\n\n\t\treturn width;\n\t};\n\n\tvar rAF = (function(){\n\t\tvar running, waiting;\n\t\tvar firstFns = [];\n\t\tvar secondFns = [];\n\t\tvar fns = firstFns;\n\n\t\tvar run = function(){\n\t\t\tvar runFns = fns;\n\n\t\t\tfns = firstFns.length ? secondFns : firstFns;\n\n\t\t\trunning = true;\n\t\t\twaiting = false;\n\n\t\t\twhile(runFns.length){\n\t\t\t\trunFns.shift()();\n\t\t\t}\n\n\t\t\trunning = false;\n\t\t};\n\n\t\tvar rafBatch = function(fn, queue){\n\t\t\tif(running && !queue){\n\t\t\t\tfn.apply(this, arguments);\n\t\t\t} else {\n\t\t\t\tfns.push(fn);\n\n\t\t\t\tif(!waiting){\n\t\t\t\t\twaiting = true;\n\t\t\t\t\t(document.hidden ? setTimeout : requestAnimationFrame)(run);\n\t\t\t\t}\n\t\t\t}\n\t\t};\n\n\t\trafBatch._lsFlush = run;\n\n\t\treturn rafBatch;\n\t})();\n\n\tvar rAFIt = function(fn, simple){\n\t\treturn simple ?\n\t\t\tfunction() {\n\t\t\t\trAF(fn);\n\t\t\t} :\n\t\t\tfunction(){\n\t\t\t\tvar that = this;\n\t\t\t\tvar args = arguments;\n\t\t\t\trAF(function(){\n\t\t\t\t\tfn.apply(that, args);\n\t\t\t\t});\n\t\t\t}\n\t\t;\n\t};\n\n\tvar throttle = function(fn){\n\t\tvar running;\n\t\tvar lastTime = 0;\n\t\tvar gDelay = lazySizesCfg.throttleDelay;\n\t\tvar rICTimeout = lazySizesCfg.ricTimeout;\n\t\tvar run = function(){\n\t\t\trunning = false;\n\t\t\tlastTime = Date.now();\n\t\t\tfn();\n\t\t};\n\t\tvar idleCallback = requestIdleCallback && rICTimeout > 49 ?\n\t\t\tfunction(){\n\t\t\t\trequestIdleCallback(run, {timeout: rICTimeout});\n\n\t\t\t\tif(rICTimeout !== lazySizesCfg.ricTimeout){\n\t\t\t\t\trICTimeout = lazySizesCfg.ricTimeout;\n\t\t\t\t}\n\t\t\t} :\n\t\t\trAFIt(function(){\n\t\t\t\tsetTimeout(run);\n\t\t\t}, true)\n\t\t;\n\n\t\treturn function(isPriority){\n\t\t\tvar delay;\n\n\t\t\tif((isPriority = isPriority === true)){\n\t\t\t\trICTimeout = 33;\n\t\t\t}\n\n\t\t\tif(running){\n\t\t\t\treturn;\n\t\t\t}\n\n\t\t\trunning =  true;\n\n\t\t\tdelay = gDelay - (Date.now() - lastTime);\n\n\t\t\tif(delay < 0){\n\t\t\t\tdelay = 0;\n\t\t\t}\n\n\t\t\tif(isPriority || delay < 9){\n\t\t\t\tidleCallback();\n\t\t\t} else {\n\t\t\t\tsetTimeout(idleCallback, delay);\n\t\t\t}\n\t\t};\n\t};\n\n\t//based on http://modernjavascript.blogspot.de/2013/08/building-better-debounce.html\n\tvar debounce = function(func) {\n\t\tvar timeout, timestamp;\n\t\tvar wait = 99;\n\t\tvar run = function(){\n\t\t\ttimeout = null;\n\t\t\tfunc();\n\t\t};\n\t\tvar later = function() {\n\t\t\tvar last = Date.now() - timestamp;\n\n\t\t\tif (last < wait) {\n\t\t\t\tsetTimeout(later, wait - last);\n\t\t\t} else {\n\t\t\t\t(requestIdleCallback || run)(run);\n\t\t\t}\n\t\t};\n\n\t\treturn function() {\n\t\t\ttimestamp = Date.now();\n\n\t\t\tif (!timeout) {\n\t\t\t\ttimeout = setTimeout(later, wait);\n\t\t\t}\n\t\t};\n\t};\n\n\tvar loader = (function(){\n\t\tvar preloadElems, isCompleted, resetPreloadingTimer, loadMode, started;\n\n\t\tvar eLvW, elvH, eLtop, eLleft, eLright, eLbottom, isBodyHidden;\n\n\t\tvar regImg = /^img$/i;\n\t\tvar regIframe = /^iframe$/i;\n\n\t\tvar supportScroll = ('onscroll' in window) && !(/(gle|ing)bot/.test(navigator.userAgent));\n\n\t\tvar shrinkExpand = 0;\n\t\tvar currentExpand = 0;\n\n\t\tvar isLoading = 0;\n\t\tvar lowRuns = -1;\n\n\t\tvar resetPreloading = function(e){\n\t\t\tisLoading--;\n\t\t\tif(!e || isLoading < 0 || !e.target){\n\t\t\t\tisLoading = 0;\n\t\t\t}\n\t\t};\n\n\t\tvar isVisible = function (elem) {\n\t\t\tif (isBodyHidden == null) {\n\t\t\t\tisBodyHidden = getCSS(document.body, 'visibility') == 'hidden';\n\t\t\t}\n\n\t\t\treturn isBodyHidden || !(getCSS(elem.parentNode, 'visibility') == 'hidden' && getCSS(elem, 'visibility') == 'hidden');\n\t\t};\n\n\t\tvar isNestedVisible = function(elem, elemExpand){\n\t\t\tvar outerRect;\n\t\t\tvar parent = elem;\n\t\t\tvar visible = isVisible(elem);\n\n\t\t\teLtop -= elemExpand;\n\t\t\teLbottom += elemExpand;\n\t\t\teLleft -= elemExpand;\n\t\t\teLright += elemExpand;\n\n\t\t\twhile(visible && (parent = parent.offsetParent) && parent != document.body && parent != docElem){\n\t\t\t\tvisible = ((getCSS(parent, 'opacity') || 1) > 0);\n\n\t\t\t\tif(visible && getCSS(parent, 'overflow') != 'visible'){\n\t\t\t\t\touterRect = parent.getBoundingClientRect();\n\t\t\t\t\tvisible = eLright > outerRect.left &&\n\t\t\t\t\t\teLleft < outerRect.right &&\n\t\t\t\t\t\teLbottom > outerRect.top - 1 &&\n\t\t\t\t\t\teLtop < outerRect.bottom + 1\n\t\t\t\t\t;\n\t\t\t\t}\n\t\t\t}\n\n\t\t\treturn visible;\n\t\t};\n\n\t\tvar checkElements = function() {\n\t\t\tvar eLlen, i, rect, autoLoadElem, loadedSomething, elemExpand, elemNegativeExpand, elemExpandVal,\n\t\t\t\tbeforeExpandVal, defaultExpand, preloadExpand, hFac;\n\t\t\tvar lazyloadElems = lazysizes.elements;\n\n\t\t\tif((loadMode = lazySizesCfg.loadMode) && isLoading < 8 && (eLlen = lazyloadElems.length)){\n\n\t\t\t\ti = 0;\n\n\t\t\t\tlowRuns++;\n\n\t\t\t\tfor(; i < eLlen; i++){\n\n\t\t\t\t\tif(!lazyloadElems[i] || lazyloadElems[i]._lazyRace){continue;}\n\n\t\t\t\t\tif(!supportScroll || (lazysizes.prematureUnveil && lazysizes.prematureUnveil(lazyloadElems[i]))){unveilElement(lazyloadElems[i]);continue;}\n\n\t\t\t\t\tif(!(elemExpandVal = lazyloadElems[i][_getAttribute]('data-expand')) || !(elemExpand = elemExpandVal * 1)){\n\t\t\t\t\t\telemExpand = currentExpand;\n\t\t\t\t\t}\n\n\t\t\t\t\tif (!defaultExpand) {\n\t\t\t\t\t\tdefaultExpand = (!lazySizesCfg.expand || lazySizesCfg.expand < 1) ?\n\t\t\t\t\t\t\tdocElem.clientHeight > 500 && docElem.clientWidth > 500 ? 500 : 370 :\n\t\t\t\t\t\t\tlazySizesCfg.expand;\n\n\t\t\t\t\t\tlazysizes._defEx = defaultExpand;\n\n\t\t\t\t\t\tpreloadExpand = defaultExpand * lazySizesCfg.expFactor;\n\t\t\t\t\t\thFac = lazySizesCfg.hFac;\n\t\t\t\t\t\tisBodyHidden = null;\n\n\t\t\t\t\t\tif(currentExpand < preloadExpand && isLoading < 1 && lowRuns > 2 && loadMode > 2 && !document.hidden){\n\t\t\t\t\t\t\tcurrentExpand = preloadExpand;\n\t\t\t\t\t\t\tlowRuns = 0;\n\t\t\t\t\t\t} else if(loadMode > 1 && lowRuns > 1 && isLoading < 6){\n\t\t\t\t\t\t\tcurrentExpand = defaultExpand;\n\t\t\t\t\t\t} else {\n\t\t\t\t\t\t\tcurrentExpand = shrinkExpand;\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\n\t\t\t\t\tif(beforeExpandVal !== elemExpand){\n\t\t\t\t\t\teLvW = innerWidth + (elemExpand * hFac);\n\t\t\t\t\t\telvH = innerHeight + elemExpand;\n\t\t\t\t\t\telemNegativeExpand = elemExpand * -1;\n\t\t\t\t\t\tbeforeExpandVal = elemExpand;\n\t\t\t\t\t}\n\n\t\t\t\t\trect = lazyloadElems[i].getBoundingClientRect();\n\n\t\t\t\t\tif ((eLbottom = rect.bottom) >= elemNegativeExpand &&\n\t\t\t\t\t\t(eLtop = rect.top) <= elvH &&\n\t\t\t\t\t\t(eLright = rect.right) >= elemNegativeExpand * hFac &&\n\t\t\t\t\t\t(eLleft = rect.left) <= eLvW &&\n\t\t\t\t\t\t(eLbottom || eLright || eLleft || eLtop) &&\n\t\t\t\t\t\t(lazySizesCfg.loadHidden || isVisible(lazyloadElems[i])) &&\n\t\t\t\t\t\t((isCompleted && isLoading < 3 && !elemExpandVal && (loadMode < 3 || lowRuns < 4)) || isNestedVisible(lazyloadElems[i], elemExpand))){\n\t\t\t\t\t\tunveilElement(lazyloadElems[i]);\n\t\t\t\t\t\tloadedSomething = true;\n\t\t\t\t\t\tif(isLoading > 9){break;}\n\t\t\t\t\t} else if(!loadedSomething && isCompleted && !autoLoadElem &&\n\t\t\t\t\t\tisLoading < 4 && lowRuns < 4 && loadMode > 2 &&\n\t\t\t\t\t\t(preloadElems[0] || lazySizesCfg.preloadAfterLoad) &&\n\t\t\t\t\t\t(preloadElems[0] || (!elemExpandVal && ((eLbottom || eLright || eLleft || eLtop) || lazyloadElems[i][_getAttribute](lazySizesCfg.sizesAttr) != 'auto')))){\n\t\t\t\t\t\tautoLoadElem = preloadElems[0] || lazyloadElems[i];\n\t\t\t\t\t}\n\t\t\t\t}\n\n\t\t\t\tif(autoLoadElem && !loadedSomething){\n\t\t\t\t\tunveilElement(autoLoadElem);\n\t\t\t\t}\n\t\t\t}\n\t\t};\n\n\t\tvar throttledCheckElements = throttle(checkElements);\n\n\t\tvar switchLoadingClass = function(e){\n\t\t\tvar elem = e.target;\n\n\t\t\tif (elem._lazyCache) {\n\t\t\t\tdelete elem._lazyCache;\n\t\t\t\treturn;\n\t\t\t}\n\n\t\t\tresetPreloading(e);\n\t\t\taddClass(elem, lazySizesCfg.loadedClass);\n\t\t\tremoveClass(elem, lazySizesCfg.loadingClass);\n\t\t\taddRemoveLoadEvents(elem, rafSwitchLoadingClass);\n\t\t\ttriggerEvent(elem, 'lazyloaded');\n\t\t};\n\t\tvar rafedSwitchLoadingClass = rAFIt(switchLoadingClass);\n\t\tvar rafSwitchLoadingClass = function(e){\n\t\t\trafedSwitchLoadingClass({target: e.target});\n\t\t};\n\n\t\tvar changeIframeSrc = function(elem, src){\n\t\t\tvar loadMode = elem.getAttribute('data-load-mode') || lazySizesCfg.iframeLoadMode;\n\n\t\t\t// loadMode can be also a string!\n\t\t\tif (loadMode == 0) {\n\t\t\t\telem.contentWindow.location.replace(src);\n\t\t\t} else if (loadMode == 1) {\n\t\t\t\telem.src = src;\n\t\t\t}\n\t\t};\n\n\t\tvar handleSources = function(source){\n\t\t\tvar customMedia;\n\n\t\t\tvar sourceSrcset = source[_getAttribute](lazySizesCfg.srcsetAttr);\n\n\t\t\tif( (customMedia = lazySizesCfg.customMedia[source[_getAttribute]('data-media') || source[_getAttribute]('media')]) ){\n\t\t\t\tsource.setAttribute('media', customMedia);\n\t\t\t}\n\n\t\t\tif(sourceSrcset){\n\t\t\t\tsource.setAttribute('srcset', sourceSrcset);\n\t\t\t}\n\t\t};\n\n\t\tvar lazyUnveil = rAFIt(function (elem, detail, isAuto, sizes, isImg){\n\t\t\tvar src, srcset, parent, isPicture, event, firesLoad;\n\n\t\t\tif(!(event = triggerEvent(elem, 'lazybeforeunveil', detail)).defaultPrevented){\n\n\t\t\t\tif(sizes){\n\t\t\t\t\tif(isAuto){\n\t\t\t\t\t\taddClass(elem, lazySizesCfg.autosizesClass);\n\t\t\t\t\t} else {\n\t\t\t\t\t\telem.setAttribute('sizes', sizes);\n\t\t\t\t\t}\n\t\t\t\t}\n\n\t\t\t\tsrcset = elem[_getAttribute](lazySizesCfg.srcsetAttr);\n\t\t\t\tsrc = elem[_getAttribute](lazySizesCfg.srcAttr);\n\n\t\t\t\tif(isImg) {\n\t\t\t\t\tparent = elem.parentNode;\n\t\t\t\t\tisPicture = parent && regPicture.test(parent.nodeName || '');\n\t\t\t\t}\n\n\t\t\t\tfiresLoad = detail.firesLoad || (('src' in elem) && (srcset || src || isPicture));\n\n\t\t\t\tevent = {target: elem};\n\n\t\t\t\taddClass(elem, lazySizesCfg.loadingClass);\n\n\t\t\t\tif(firesLoad){\n\t\t\t\t\tclearTimeout(resetPreloadingTimer);\n\t\t\t\t\tresetPreloadingTimer = setTimeout(resetPreloading, 2500);\n\t\t\t\t\taddRemoveLoadEvents(elem, rafSwitchLoadingClass, true);\n\t\t\t\t}\n\n\t\t\t\tif(isPicture){\n\t\t\t\t\tforEach.call(parent.getElementsByTagName('source'), handleSources);\n\t\t\t\t}\n\n\t\t\t\tif(srcset){\n\t\t\t\t\telem.setAttribute('srcset', srcset);\n\t\t\t\t} else if(src && !isPicture){\n\t\t\t\t\tif(regIframe.test(elem.nodeName)){\n\t\t\t\t\t\tchangeIframeSrc(elem, src);\n\t\t\t\t\t} else {\n\t\t\t\t\t\telem.src = src;\n\t\t\t\t\t}\n\t\t\t\t}\n\n\t\t\t\tif(isImg && (srcset || isPicture)){\n\t\t\t\t\tupdatePolyfill(elem, {src: src});\n\t\t\t\t}\n\t\t\t}\n\n\t\t\tif(elem._lazyRace){\n\t\t\t\tdelete elem._lazyRace;\n\t\t\t}\n\t\t\tremoveClass(elem, lazySizesCfg.lazyClass);\n\n\t\t\trAF(function(){\n\t\t\t\t// Part of this can be removed as soon as this fix is older: https://bugs.chromium.org/p/chromium/issues/detail?id=7731 (2015)\n\t\t\t\tvar isLoaded = elem.complete && elem.naturalWidth > 1;\n\n\t\t\t\tif( !firesLoad || isLoaded){\n\t\t\t\t\tif (isLoaded) {\n\t\t\t\t\t\taddClass(elem, lazySizesCfg.fastLoadedClass);\n\t\t\t\t\t}\n\t\t\t\t\tswitchLoadingClass(event);\n\t\t\t\t\telem._lazyCache = true;\n\t\t\t\t\tsetTimeout(function(){\n\t\t\t\t\t\tif ('_lazyCache' in elem) {\n\t\t\t\t\t\t\tdelete elem._lazyCache;\n\t\t\t\t\t\t}\n\t\t\t\t\t}, 9);\n\t\t\t\t}\n\t\t\t\tif (elem.loading == 'lazy') {\n\t\t\t\t\tisLoading--;\n\t\t\t\t}\n\t\t\t}, true);\n\t\t});\n\n\t\t/**\n\t\t *\n\t\t * @param elem { Element }\n\t\t */\n\t\tvar unveilElement = function (elem){\n\t\t\tif (elem._lazyRace) {return;}\n\t\t\tvar detail;\n\n\t\t\tvar isImg = regImg.test(elem.nodeName);\n\n\t\t\t//allow using sizes=\"auto\", but don't use. it's invalid. Use data-sizes=\"auto\" or a valid value for sizes instead (i.e.: sizes=\"80vw\")\n\t\t\tvar sizes = isImg && (elem[_getAttribute](lazySizesCfg.sizesAttr) || elem[_getAttribute]('sizes'));\n\t\t\tvar isAuto = sizes == 'auto';\n\n\t\t\tif( (isAuto || !isCompleted) && isImg && (elem[_getAttribute]('src') || elem.srcset) && !elem.complete && !hasClass(elem, lazySizesCfg.errorClass) && hasClass(elem, lazySizesCfg.lazyClass)){return;}\n\n\t\t\tdetail = triggerEvent(elem, 'lazyunveilread').detail;\n\n\t\t\tif(isAuto){\n\t\t\t\t autoSizer.updateElem(elem, true, elem.offsetWidth);\n\t\t\t}\n\n\t\t\telem._lazyRace = true;\n\t\t\tisLoading++;\n\n\t\t\tlazyUnveil(elem, detail, isAuto, sizes, isImg);\n\t\t};\n\n\t\tvar afterScroll = debounce(function(){\n\t\t\tlazySizesCfg.loadMode = 3;\n\t\t\tthrottledCheckElements();\n\t\t});\n\n\t\tvar altLoadmodeScrollListner = function(){\n\t\t\tif(lazySizesCfg.loadMode == 3){\n\t\t\t\tlazySizesCfg.loadMode = 2;\n\t\t\t}\n\t\t\tafterScroll();\n\t\t};\n\n\t\tvar onload = function(){\n\t\t\tif(isCompleted){return;}\n\t\t\tif(Date.now() - started < 999){\n\t\t\t\tsetTimeout(onload, 999);\n\t\t\t\treturn;\n\t\t\t}\n\n\n\t\t\tisCompleted = true;\n\n\t\t\tlazySizesCfg.loadMode = 3;\n\n\t\t\tthrottledCheckElements();\n\n\t\t\taddEventListener('scroll', altLoadmodeScrollListner, true);\n\t\t};\n\n\t\treturn {\n\t\t\t_: function(){\n\t\t\t\tstarted = Date.now();\n\n\t\t\t\tlazysizes.elements = document.getElementsByClassName(lazySizesCfg.lazyClass);\n\t\t\t\tpreloadElems = document.getElementsByClassName(lazySizesCfg.lazyClass + ' ' + lazySizesCfg.preloadClass);\n\n\t\t\t\taddEventListener('scroll', throttledCheckElements, true);\n\n\t\t\t\taddEventListener('resize', throttledCheckElements, true);\n\n\t\t\t\taddEventListener('pageshow', function (e) {\n\t\t\t\t\tif (e.persisted) {\n\t\t\t\t\t\tvar loadingElements = document.querySelectorAll('.' + lazySizesCfg.loadingClass);\n\n\t\t\t\t\t\tif (loadingElements.length && loadingElements.forEach) {\n\t\t\t\t\t\t\trequestAnimationFrame(function () {\n\t\t\t\t\t\t\t\tloadingElements.forEach( function (img) {\n\t\t\t\t\t\t\t\t\tif (img.complete) {\n\t\t\t\t\t\t\t\t\t\tunveilElement(img);\n\t\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\t});\n\t\t\t\t\t\t\t});\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t});\n\n\t\t\t\tif(window.MutationObserver){\n\t\t\t\t\tnew MutationObserver( throttledCheckElements ).observe( docElem, {childList: true, subtree: true, attributes: true} );\n\t\t\t\t} else {\n\t\t\t\t\tdocElem[_addEventListener]('DOMNodeInserted', throttledCheckElements, true);\n\t\t\t\t\tdocElem[_addEventListener]('DOMAttrModified', throttledCheckElements, true);\n\t\t\t\t\tsetInterval(throttledCheckElements, 999);\n\t\t\t\t}\n\n\t\t\t\taddEventListener('hashchange', throttledCheckElements, true);\n\n\t\t\t\t//, 'fullscreenchange'\n\t\t\t\t['focus', 'mouseover', 'click', 'load', 'transitionend', 'animationend'].forEach(function(name){\n\t\t\t\t\tdocument[_addEventListener](name, throttledCheckElements, true);\n\t\t\t\t});\n\n\t\t\t\tif((/d$|^c/.test(document.readyState))){\n\t\t\t\t\tonload();\n\t\t\t\t} else {\n\t\t\t\t\taddEventListener('load', onload);\n\t\t\t\t\tdocument[_addEventListener]('DOMContentLoaded', throttledCheckElements);\n\t\t\t\t\tsetTimeout(onload, 20000);\n\t\t\t\t}\n\n\t\t\t\tif(lazysizes.elements.length){\n\t\t\t\t\tcheckElements();\n\t\t\t\t\trAF._lsFlush();\n\t\t\t\t} else {\n\t\t\t\t\tthrottledCheckElements();\n\t\t\t\t}\n\t\t\t},\n\t\t\tcheckElems: throttledCheckElements,\n\t\t\tunveil: unveilElement,\n\t\t\t_aLSL: altLoadmodeScrollListner,\n\t\t};\n\t})();\n\n\n\tvar autoSizer = (function(){\n\t\tvar autosizesElems;\n\n\t\tvar sizeElement = rAFIt(function(elem, parent, event, width){\n\t\t\tvar sources, i, len;\n\t\t\telem._lazysizesWidth = width;\n\t\t\twidth += 'px';\n\n\t\t\telem.setAttribute('sizes', width);\n\n\t\t\tif(regPicture.test(parent.nodeName || '')){\n\t\t\t\tsources = parent.getElementsByTagName('source');\n\t\t\t\tfor(i = 0, len = sources.length; i < len; i++){\n\t\t\t\t\tsources[i].setAttribute('sizes', width);\n\t\t\t\t}\n\t\t\t}\n\n\t\t\tif(!event.detail.dataAttr){\n\t\t\t\tupdatePolyfill(elem, event.detail);\n\t\t\t}\n\t\t});\n\t\t/**\n\t\t *\n\t\t * @param elem {Element}\n\t\t * @param dataAttr\n\t\t * @param [width] { number }\n\t\t */\n\t\tvar getSizeElement = function (elem, dataAttr, width){\n\t\t\tvar event;\n\t\t\tvar parent = elem.parentNode;\n\n\t\t\tif(parent){\n\t\t\t\twidth = getWidth(elem, parent, width);\n\t\t\t\tevent = triggerEvent(elem, 'lazybeforesizes', {width: width, dataAttr: !!dataAttr});\n\n\t\t\t\tif(!event.defaultPrevented){\n\t\t\t\t\twidth = event.detail.width;\n\n\t\t\t\t\tif(width && width !== elem._lazysizesWidth){\n\t\t\t\t\t\tsizeElement(elem, parent, event, width);\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\t\t};\n\n\t\tvar updateElementsSizes = function(){\n\t\t\tvar i;\n\t\t\tvar len = autosizesElems.length;\n\t\t\tif(len){\n\t\t\t\ti = 0;\n\n\t\t\t\tfor(; i < len; i++){\n\t\t\t\t\tgetSizeElement(autosizesElems[i]);\n\t\t\t\t}\n\t\t\t}\n\t\t};\n\n\t\tvar debouncedUpdateElementsSizes = debounce(updateElementsSizes);\n\n\t\treturn {\n\t\t\t_: function(){\n\t\t\t\tautosizesElems = document.getElementsByClassName(lazySizesCfg.autosizesClass);\n\t\t\t\taddEventListener('resize', debouncedUpdateElementsSizes);\n\t\t\t},\n\t\t\tcheckElems: debouncedUpdateElementsSizes,\n\t\t\tupdateElem: getSizeElement\n\t\t};\n\t})();\n\n\tvar init = function(){\n\t\tif(!init.i && document.getElementsByClassName){\n\t\t\tinit.i = true;\n\t\t\tautoSizer._();\n\t\t\tloader._();\n\t\t}\n\t};\n\n\tsetTimeout(function(){\n\t\tif(lazySizesCfg.init){\n\t\t\tinit();\n\t\t}\n\t});\n\n\tlazysizes = {\n\t\t/**\n\t\t * @type { LazySizesConfigPartial }\n\t\t */\n\t\tcfg: lazySizesCfg,\n\t\tautoSizer: autoSizer,\n\t\tloader: loader,\n\t\tinit: init,\n\t\tuP: updatePolyfill,\n\t\taC: addClass,\n\t\trC: removeClass,\n\t\thC: hasClass,\n\t\tfire: triggerEvent,\n\t\tgW: getWidth,\n\t\trAF: rAF,\n\t};\n\n\treturn lazysizes;\n}\n));\n","(function(window, factory) {\n\tvar globalInstall = function(){\n\t\tfactory(window.lazySizes);\n\t\twindow.removeEventListener('lazyunveilread', globalInstall, true);\n\t};\n\n\tfactory = factory.bind(null, window, window.document);\n\n\tif(typeof module == 'object' && module.exports){\n\t\tfactory(require('lazysizes'));\n\t} else if (typeof define == 'function' && define.amd) {\n\t\tdefine(['lazysizes'], factory);\n\t} else if(window.lazySizes) {\n\t\tglobalInstall();\n\t} else {\n\t\twindow.addEventListener('lazyunveilread', globalInstall, true);\n\t}\n}(window, function(window, document, lazySizes) {\n\t'use strict';\n\tif(!window.addEventListener){return;}\n\n\tvar lazySizesCfg = lazySizes.cfg;\n\tvar regWhite = /\\s+/g;\n\tvar regSplitSet = /\\s*\\|\\s+|\\s+\\|\\s*/g;\n\tvar regSource = /^(.+?)(?:\\s+\\[\\s*(.+?)\\s*\\])(?:\\s+\\[\\s*(.+?)\\s*\\])?$/;\n\tvar regType = /^\\s*\\(*\\s*type\\s*:\\s*(.+?)\\s*\\)*\\s*$/;\n\tvar regBgUrlEscape = /\\(|\\)|'/;\n\tvar allowedBackgroundSize = {contain: 1, cover: 1};\n\tvar proxyWidth = function(elem){\n\t\tvar width = lazySizes.gW(elem, elem.parentNode);\n\n\t\tif(!elem._lazysizesWidth || width > elem._lazysizesWidth){\n\t\t\telem._lazysizesWidth = width;\n\t\t}\n\t\treturn elem._lazysizesWidth;\n\t};\n\tvar getBgSize = function(elem){\n\t\tvar bgSize;\n\n\t\tbgSize = (getComputedStyle(elem) || {getPropertyValue: function(){}}).getPropertyValue('background-size');\n\n\t\tif(!allowedBackgroundSize[bgSize] && allowedBackgroundSize[elem.style.backgroundSize]){\n\t\t\tbgSize = elem.style.backgroundSize;\n\t\t}\n\n\t\treturn bgSize;\n\t};\n\tvar setTypeOrMedia = function(source, match){\n\t\tif(match){\n\t\t\tvar typeMatch = match.match(regType);\n\t\t\tif(typeMatch && typeMatch[1]){\n\t\t\t\tsource.setAttribute('type', typeMatch[1]);\n\t\t\t} else {\n\t\t\t\tsource.setAttribute('media', lazySizesCfg.customMedia[match] || match);\n\t\t\t}\n\t\t}\n\t};\n\tvar createPicture = function(sets, elem, img){\n\t\tvar picture = document.createElement('picture');\n\t\tvar sizes = elem.getAttribute(lazySizesCfg.sizesAttr);\n\t\tvar ratio = elem.getAttribute('data-ratio');\n\t\tvar optimumx = elem.getAttribute('data-optimumx');\n\n\t\tif(elem._lazybgset && elem._lazybgset.parentNode == elem){\n\t\t\telem.removeChild(elem._lazybgset);\n\t\t}\n\n\t\tObject.defineProperty(img, '_lazybgset', {\n\t\t\tvalue: elem,\n\t\t\twritable: true\n\t\t});\n\t\tObject.defineProperty(elem, '_lazybgset', {\n\t\t\tvalue: picture,\n\t\t\twritable: true\n\t\t});\n\n\t\tsets = sets.replace(regWhite, ' ').split(regSplitSet);\n\n\t\tpicture.style.display = 'none';\n\t\timg.className = lazySizesCfg.lazyClass;\n\n\t\tif(sets.length == 1 && !sizes){\n\t\t\tsizes = 'auto';\n\t\t}\n\n\t\tsets.forEach(function(set){\n\t\t\tvar match;\n\t\t\tvar source = document.createElement('source');\n\n\t\t\tif(sizes && sizes != 'auto'){\n\t\t\t\tsource.setAttribute('sizes', sizes);\n\t\t\t}\n\n\t\t\tif((match = set.match(regSource))){\n\t\t\t\tsource.setAttribute(lazySizesCfg.srcsetAttr, match[1]);\n\n\t\t\t\tsetTypeOrMedia(source, match[2]);\n\t\t\t\tsetTypeOrMedia(source, match[3]);\n\t\t\t} else {\n\t\t\t\tsource.setAttribute(lazySizesCfg.srcsetAttr, set);\n\t\t\t}\n\n\t\t\tpicture.appendChild(source);\n\t\t});\n\n\t\tif(sizes){\n\t\t\timg.setAttribute(lazySizesCfg.sizesAttr, sizes);\n\t\t\telem.removeAttribute(lazySizesCfg.sizesAttr);\n\t\t\telem.removeAttribute('sizes');\n\t\t}\n\t\tif(optimumx){\n\t\t\timg.setAttribute('data-optimumx', optimumx);\n\t\t}\n\t\tif(ratio) {\n\t\t\timg.setAttribute('data-ratio', ratio);\n\t\t}\n\n\t\tpicture.appendChild(img);\n\n\t\telem.appendChild(picture);\n\t};\n\n\tvar proxyLoad = function(e){\n\t\tif(!e.target._lazybgset){return;}\n\n\t\tvar image = e.target;\n\t\tvar elem = image._lazybgset;\n\t\tvar bg = image.currentSrc || image.src;\n\n\n\t\tif(bg){\n\t\t\tvar useSrc = regBgUrlEscape.test(bg) ? JSON.stringify(bg) : bg;\n\t\t\tvar event = lazySizes.fire(elem, 'bgsetproxy', {\n\t\t\t\tsrc: bg,\n\t\t\t\tuseSrc: useSrc,\n\t\t\t\tfullSrc: null,\n\t\t\t});\n\n\t\t\tif(!event.defaultPrevented){\n\t\t\t\telem.style.backgroundImage = event.detail.fullSrc || 'url(' + event.detail.useSrc + ')';\n\t\t\t}\n\t\t}\n\n\t\tif(image._lazybgsetLoading){\n\t\t\tlazySizes.fire(elem, '_lazyloaded', {}, false, true);\n\t\t\tdelete image._lazybgsetLoading;\n\t\t}\n\t};\n\n\taddEventListener('lazybeforeunveil', function(e){\n\t\tvar set, image, elem;\n\n\t\tif(e.defaultPrevented || !(set = e.target.getAttribute('data-bgset'))){return;}\n\n\t\telem = e.target;\n\t\timage = document.createElement('img');\n\n\t\timage.alt = '';\n\n\t\timage._lazybgsetLoading = true;\n\t\te.detail.firesLoad = true;\n\n\t\tcreatePicture(set, elem, image);\n\n\t\tsetTimeout(function(){\n\t\t\tlazySizes.loader.unveil(image);\n\n\t\t\tlazySizes.rAF(function(){\n\t\t\t\tlazySizes.fire(image, '_lazyloaded', {}, true, true);\n\t\t\t\tif(image.complete) {\n\t\t\t\t\tproxyLoad({target: image});\n\t\t\t\t}\n\t\t\t});\n\t\t});\n\n\t});\n\n\tdocument.addEventListener('load', proxyLoad, true);\n\n\twindow.addEventListener('lazybeforesizes', function(e){\n\t\tif(e.detail.instance != lazySizes){return;}\n\t\tif(e.target._lazybgset && e.detail.dataAttr){\n\t\t\tvar elem = e.target._lazybgset;\n\t\t\tvar bgSize = getBgSize(elem);\n\n\t\t\tif(allowedBackgroundSize[bgSize]){\n\t\t\t\te.target._lazysizesParentFit = bgSize;\n\n\t\t\t\tlazySizes.rAF(function(){\n\t\t\t\t\te.target.setAttribute('data-parent-fit', bgSize);\n\t\t\t\t\tif(e.target._lazysizesParentFit){\n\t\t\t\t\t\tdelete e.target._lazysizesParentFit;\n\t\t\t\t\t}\n\t\t\t\t});\n\t\t\t}\n\t\t}\n\t}, true);\n\n\tdocument.documentElement.addEventListener('lazybeforesizes', function(e){\n\t\tif(e.defaultPrevented || !e.target._lazybgset || e.detail.instance != lazySizes){return;}\n\t\te.detail.width = proxyWidth(e.target._lazybgset);\n\t});\n}));\n","(function(window, factory) {\n\tif(!window) {return;}\n\tvar globalInstall = function(){\n\t\tfactory(window.lazySizes);\n\t\twindow.removeEventListener('lazyunveilread', globalInstall, true);\n\t};\n\n\tfactory = factory.bind(null, window, window.document);\n\n\tif(typeof module == 'object' && module.exports){\n\t\tfactory(require('lazysizes'));\n\t} else if (typeof define == 'function' && define.amd) {\n\t\tdefine(['lazysizes'], factory);\n\t} else if(window.lazySizes) {\n\t\tglobalInstall();\n\t} else {\n\t\twindow.addEventListener('lazyunveilread', globalInstall, true);\n\t}\n}(typeof window != 'undefined' ?\n\twindow : 0, function(window, document, lazySizes) {\n\t'use strict';\n\n\tif(!window.addEventListener){return;}\n\n\tvar regDescriptors = /\\s+(\\d+)(w|h)\\s+(\\d+)(w|h)/;\n\tvar regCssFit = /parent-fit[\"']*\\s*:\\s*[\"']*(contain|cover|width)/;\n\tvar regCssObject = /parent-container[\"']*\\s*:\\s*[\"']*(.+?)(?=(\\s|$|,|'|\"|;))/;\n\tvar regPicture = /^picture$/i;\n\tvar cfg = lazySizes.cfg;\n\n\tvar getCSS = function (elem){\n\t\treturn (getComputedStyle(elem, null) || {});\n\t};\n\n\tvar parentFit = {\n\n\t\tgetParent: function(element, parentSel){\n\t\t\tvar parent = element;\n\t\t\tvar parentNode = element.parentNode;\n\n\t\t\tif((!parentSel || parentSel == 'prev') && parentNode && regPicture.test(parentNode.nodeName || '')){\n\t\t\t\tparentNode = parentNode.parentNode;\n\t\t\t}\n\n\t\t\tif(parentSel != 'self'){\n\t\t\t\tif(parentSel == 'prev'){\n\t\t\t\t\tparent = element.previousElementSibling;\n\t\t\t\t} else if(parentSel && (parentNode.closest || window.jQuery)){\n\t\t\t\t\tparent = (parentNode.closest ?\n\t\t\t\t\t\t\tparentNode.closest(parentSel) :\n\t\t\t\t\t\t\tjQuery(parentNode).closest(parentSel)[0]) ||\n\t\t\t\t\t\tparentNode\n\t\t\t\t\t;\n\t\t\t\t} else {\n\t\t\t\t\tparent = parentNode;\n\t\t\t\t}\n\t\t\t}\n\n\t\t\treturn parent;\n\t\t},\n\n\t\tgetFit: function(element){\n\t\t\tvar tmpMatch, parentObj;\n\t\t\tvar css = getCSS(element);\n\t\t\tvar content = css.content || css.fontFamily;\n\t\t\tvar obj = {\n\t\t\t\tfit: element._lazysizesParentFit || element.getAttribute('data-parent-fit')\n\t\t\t};\n\n\t\t\tif(!obj.fit && content && (tmpMatch = content.match(regCssFit))){\n\t\t\t\tobj.fit = tmpMatch[1];\n\t\t\t}\n\n\t\t\tif(obj.fit){\n\t\t\t\tparentObj = element._lazysizesParentContainer || element.getAttribute('data-parent-container');\n\n\t\t\t\tif(!parentObj && content && (tmpMatch = content.match(regCssObject))){\n\t\t\t\t\tparentObj = tmpMatch[1];\n\t\t\t\t}\n\n\t\t\t\tobj.parent = parentFit.getParent(element, parentObj);\n\n\n\t\t\t} else {\n\t\t\t\tobj.fit = css.objectFit;\n\t\t\t}\n\n\t\t\treturn obj;\n\t\t},\n\n\t\tgetImageRatio: function(element){\n\t\t\tvar i, srcset, media, ratio, match, width, height;\n\t\t\tvar parent = element.parentNode;\n\t\t\tvar elements = parent && regPicture.test(parent.nodeName || '') ?\n\t\t\t\t\tparent.querySelectorAll('source, img') :\n\t\t\t\t\t[element]\n\t\t\t\t;\n\n\t\t\tfor(i = 0; i < elements.length; i++){\n\t\t\t\telement = elements[i];\n\t\t\t\tsrcset = element.getAttribute(cfg.srcsetAttr) || element.getAttribute('srcset') || element.getAttribute('data-pfsrcset') || element.getAttribute('data-risrcset') || '';\n\t\t\t\tmedia = element._lsMedia || element.getAttribute('media');\n\t\t\t\tmedia = cfg.customMedia[element.getAttribute('data-media') || media] || media;\n\n\t\t\t\tif(srcset && (!media || (window.matchMedia && matchMedia(media) || {}).matches )){\n\t\t\t\t\tratio = parseFloat(element.getAttribute('data-aspectratio'));\n\n\t\t\t\t\tif (!ratio) {\n\t\t\t\t\t\tmatch = srcset.match(regDescriptors);\n\n\t\t\t\t\t\tif (match) {\n\t\t\t\t\t\t\tif(match[2] == 'w'){\n\t\t\t\t\t\t\t\twidth = match[1];\n\t\t\t\t\t\t\t\theight = match[3];\n\t\t\t\t\t\t\t} else {\n\t\t\t\t\t\t\t\twidth = match[3];\n\t\t\t\t\t\t\t\theight = match[1];\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t} else {\n\t\t\t\t\t\t\twidth = element.getAttribute('width');\n\t\t\t\t\t\t\theight = element.getAttribute('height');\n\t\t\t\t\t\t}\n\n\t\t\t\t\t\tratio = width / height;\n\t\t\t\t\t}\n\n\t\t\t\t\tbreak;\n\t\t\t\t}\n\t\t\t}\n\n\t\t\treturn ratio;\n\t\t},\n\n\t\tcalculateSize: function(element, width){\n\t\t\tvar displayRatio, height, imageRatio, retWidth;\n\t\t\tvar fitObj = this.getFit(element);\n\t\t\tvar fit = fitObj.fit;\n\t\t\tvar fitElem = fitObj.parent;\n\n\t\t\tif(fit != 'width' && ((fit != 'contain' && fit != 'cover') || !(imageRatio = this.getImageRatio(element)))){\n\t\t\t\treturn width;\n\t\t\t}\n\n\t\t\tif(fitElem){\n\t\t\t\twidth = fitElem.clientWidth;\n\t\t\t} else {\n\t\t\t\tfitElem = element;\n\t\t\t}\n\n\t\t\tretWidth = width;\n\n\t\t\tif(fit == 'width'){\n\t\t\t\tretWidth = width;\n\t\t\t} else {\n\t\t\t\theight = fitElem.clientHeight;\n\n\t\t\t\tif((displayRatio =  width / height) && ((fit == 'cover' && displayRatio < imageRatio) || (fit == 'contain' && displayRatio > imageRatio))){\n\t\t\t\t\tretWidth = width * (imageRatio / displayRatio);\n\t\t\t\t}\n\t\t\t}\n\n\t\t\treturn retWidth;\n\t\t}\n\t};\n\n\tlazySizes.parentFit = parentFit;\n\n\tdocument.addEventListener('lazybeforesizes', function(e){\n\t\tif(e.defaultPrevented || e.detail.instance != lazySizes){return;}\n\n\t\tvar element = e.target;\n\t\te.detail.width = parentFit.calculateSize(element, e.detail.width);\n\t});\n}));\n","/**\n * SSR Window 4.0.2\n * Better handling for window object in SSR environment\n * https://github.com/nolimits4web/ssr-window\n *\n * Copyright 2021, Vladimir Kharlampidi\n *\n * Licensed under MIT\n *\n * Released on: December 13, 2021\n */\n/* eslint-disable no-param-reassign */\nfunction isObject(obj) {\n    return (obj !== null &&\n        typeof obj === 'object' &&\n        'constructor' in obj &&\n        obj.constructor === Object);\n}\nfunction extend(target = {}, src = {}) {\n    Object.keys(src).forEach((key) => {\n        if (typeof target[key] === 'undefined')\n            target[key] = src[key];\n        else if (isObject(src[key]) &&\n            isObject(target[key]) &&\n            Object.keys(src[key]).length > 0) {\n            extend(target[key], src[key]);\n        }\n    });\n}\n\nconst ssrDocument = {\n    body: {},\n    addEventListener() { },\n    removeEventListener() { },\n    activeElement: {\n        blur() { },\n        nodeName: '',\n    },\n    querySelector() {\n        return null;\n    },\n    querySelectorAll() {\n        return [];\n    },\n    getElementById() {\n        return null;\n    },\n    createEvent() {\n        return {\n            initEvent() { },\n        };\n    },\n    createElement() {\n        return {\n            children: [],\n            childNodes: [],\n            style: {},\n            setAttribute() { },\n            getElementsByTagName() {\n                return [];\n            },\n        };\n    },\n    createElementNS() {\n        return {};\n    },\n    importNode() {\n        return null;\n    },\n    location: {\n        hash: '',\n        host: '',\n        hostname: '',\n        href: '',\n        origin: '',\n        pathname: '',\n        protocol: '',\n        search: '',\n    },\n};\nfunction getDocument() {\n    const doc = typeof document !== 'undefined' ? document : {};\n    extend(doc, ssrDocument);\n    return doc;\n}\n\nconst ssrWindow = {\n    document: ssrDocument,\n    navigator: {\n        userAgent: '',\n    },\n    location: {\n        hash: '',\n        host: '',\n        hostname: '',\n        href: '',\n        origin: '',\n        pathname: '',\n        protocol: '',\n        search: '',\n    },\n    history: {\n        replaceState() { },\n        pushState() { },\n        go() { },\n        back() { },\n    },\n    CustomEvent: function CustomEvent() {\n        return this;\n    },\n    addEventListener() { },\n    removeEventListener() { },\n    getComputedStyle() {\n        return {\n            getPropertyValue() {\n                return '';\n            },\n        };\n    },\n    Image() { },\n    Date() { },\n    screen: {},\n    setTimeout() { },\n    clearTimeout() { },\n    matchMedia() {\n        return {};\n    },\n    requestAnimationFrame(callback) {\n        if (typeof setTimeout === 'undefined') {\n            callback();\n            return null;\n        }\n        return setTimeout(callback, 0);\n    },\n    cancelAnimationFrame(id) {\n        if (typeof setTimeout === 'undefined') {\n            return;\n        }\n        clearTimeout(id);\n    },\n};\nfunction getWindow() {\n    const win = typeof window !== 'undefined' ? window : {};\n    extend(win, ssrWindow);\n    return win;\n}\n\nexport { extend, getDocument, getWindow, ssrDocument, ssrWindow };\n","import { getWindow } from 'ssr-window';\nexport default function getBreakpoint(breakpoints, base = 'window', containerEl) {\n  if (!breakpoints || base === 'container' && !containerEl) return undefined;\n  let breakpoint = false;\n  const window = getWindow();\n  const currentHeight = base === 'window' ? window.innerHeight : containerEl.clientHeight;\n  const points = Object.keys(breakpoints).map(point => {\n    if (typeof point === 'string' && point.indexOf('@') === 0) {\n      const minRatio = parseFloat(point.substr(1));\n      const value = currentHeight * minRatio;\n      return {\n        value,\n        point\n      };\n    }\n    return {\n      value: point,\n      point\n    };\n  });\n  points.sort((a, b) => parseInt(a.value, 10) - parseInt(b.value, 10));\n  for (let i = 0; i < points.length; i += 1) {\n    const {\n      point,\n      value\n    } = points[i];\n    if (base === 'window') {\n      if (window.matchMedia(`(min-width: ${value}px)`).matches) {\n        breakpoint = point;\n      }\n    } else if (value <= containerEl.clientWidth) {\n      breakpoint = point;\n    }\n  }\n  return breakpoint || 'max';\n}","import setBreakpoint from './setBreakpoint.js';\nimport getBreakpoint from './getBreakpoint.js';\nexport default {\n  setBreakpoint,\n  getBreakpoint\n};","import { extend } from '../../shared/utils.js';\nconst isGridEnabled = (swiper, params) => {\n  return swiper.grid && params.grid && params.grid.rows > 1;\n};\nexport default function setBreakpoint() {\n  const swiper = this;\n  const {\n    realIndex,\n    initialized,\n    params,\n    el\n  } = swiper;\n  const breakpoints = params.breakpoints;\n  if (!breakpoints || breakpoints && Object.keys(breakpoints).length === 0) return;\n\n  // Get breakpoint for window width and update parameters\n  const breakpoint = swiper.getBreakpoint(breakpoints, swiper.params.breakpointsBase, swiper.el);\n  if (!breakpoint || swiper.currentBreakpoint === breakpoint) return;\n  const breakpointOnlyParams = breakpoint in breakpoints ? breakpoints[breakpoint] : undefined;\n  const breakpointParams = breakpointOnlyParams || swiper.originalParams;\n  const wasMultiRow = isGridEnabled(swiper, params);\n  const isMultiRow = isGridEnabled(swiper, breakpointParams);\n  const wasEnabled = params.enabled;\n  if (wasMultiRow && !isMultiRow) {\n    el.classList.remove(`${params.containerModifierClass}grid`, `${params.containerModifierClass}grid-column`);\n    swiper.emitContainerClasses();\n  } else if (!wasMultiRow && isMultiRow) {\n    el.classList.add(`${params.containerModifierClass}grid`);\n    if (breakpointParams.grid.fill && breakpointParams.grid.fill === 'column' || !breakpointParams.grid.fill && params.grid.fill === 'column') {\n      el.classList.add(`${params.containerModifierClass}grid-column`);\n    }\n    swiper.emitContainerClasses();\n  }\n\n  // Toggle navigation, pagination, scrollbar\n  ['navigation', 'pagination', 'scrollbar'].forEach(prop => {\n    const wasModuleEnabled = params[prop] && params[prop].enabled;\n    const isModuleEnabled = breakpointParams[prop] && breakpointParams[prop].enabled;\n    if (wasModuleEnabled && !isModuleEnabled) {\n      swiper[prop].disable();\n    }\n    if (!wasModuleEnabled && isModuleEnabled) {\n      swiper[prop].enable();\n    }\n  });\n  const directionChanged = breakpointParams.direction && breakpointParams.direction !== params.direction;\n  const needsReLoop = params.loop && (breakpointParams.slidesPerView !== params.slidesPerView || directionChanged);\n  if (directionChanged && initialized) {\n    swiper.changeDirection();\n  }\n  extend(swiper.params, breakpointParams);\n  const isEnabled = swiper.params.enabled;\n  Object.assign(swiper, {\n    allowTouchMove: swiper.params.allowTouchMove,\n    allowSlideNext: swiper.params.allowSlideNext,\n    allowSlidePrev: swiper.params.allowSlidePrev\n  });\n  if (wasEnabled && !isEnabled) {\n    swiper.disable();\n  } else if (!wasEnabled && isEnabled) {\n    swiper.enable();\n  }\n  swiper.currentBreakpoint = breakpoint;\n  swiper.emit('_beforeBreakpoint', breakpointParams);\n  if (needsReLoop && initialized) {\n    swiper.loopDestroy();\n    swiper.loopCreate(realIndex);\n    swiper.updateSlides();\n  }\n  swiper.emit('breakpoint', breakpointParams);\n}","function checkOverflow() {\n  const swiper = this;\n  const {\n    isLocked: wasLocked,\n    params\n  } = swiper;\n  const {\n    slidesOffsetBefore\n  } = params;\n  if (slidesOffsetBefore) {\n    const lastSlideIndex = swiper.slides.length - 1;\n    const lastSlideRightEdge = swiper.slidesGrid[lastSlideIndex] + swiper.slidesSizesGrid[lastSlideIndex] + slidesOffsetBefore * 2;\n    swiper.isLocked = swiper.size > lastSlideRightEdge;\n  } else {\n    swiper.isLocked = swiper.snapGrid.length === 1;\n  }\n  if (params.allowSlideNext === true) {\n    swiper.allowSlideNext = !swiper.isLocked;\n  }\n  if (params.allowSlidePrev === true) {\n    swiper.allowSlidePrev = !swiper.isLocked;\n  }\n  if (wasLocked && wasLocked !== swiper.isLocked) {\n    swiper.isEnd = false;\n  }\n  if (wasLocked !== swiper.isLocked) {\n    swiper.emit(swiper.isLocked ? 'lock' : 'unlock');\n  }\n}\nexport default {\n  checkOverflow\n};","function prepareClasses(entries, prefix) {\n  const resultClasses = [];\n  entries.forEach(item => {\n    if (typeof item === 'object') {\n      Object.keys(item).forEach(classNames => {\n        if (item[classNames]) {\n          resultClasses.push(prefix + classNames);\n        }\n      });\n    } else if (typeof item === 'string') {\n      resultClasses.push(prefix + item);\n    }\n  });\n  return resultClasses;\n}\nexport default function addClasses() {\n  const swiper = this;\n  const {\n    classNames,\n    params,\n    rtl,\n    el,\n    device\n  } = swiper;\n  // prettier-ignore\n  const suffixes = prepareClasses(['initialized', params.direction, {\n    'free-mode': swiper.params.freeMode && params.freeMode.enabled\n  }, {\n    'autoheight': params.autoHeight\n  }, {\n    'rtl': rtl\n  }, {\n    'grid': params.grid && params.grid.rows > 1\n  }, {\n    'grid-column': params.grid && params.grid.rows > 1 && params.grid.fill === 'column'\n  }, {\n    'android': device.android\n  }, {\n    'ios': device.ios\n  }, {\n    'css-mode': params.cssMode\n  }, {\n    'centered': params.cssMode && params.centeredSlides\n  }, {\n    'watch-progress': params.watchSlidesProgress\n  }], params.containerModifierClass);\n  classNames.push(...suffixes);\n  el.classList.add(...classNames);\n  swiper.emitContainerClasses();\n}","import addClasses from './addClasses.js';\nimport removeClasses from './removeClasses.js';\nexport default {\n  addClasses,\n  removeClasses\n};","export default function removeClasses() {\n  const swiper = this;\n  const {\n    el,\n    classNames\n  } = swiper;\n  el.classList.remove(...classNames);\n  swiper.emitContainerClasses();\n}","/* eslint no-param-reassign: \"off\" */\nimport { getDocument } from 'ssr-window';\nimport { extend, deleteProps, createElement, elementChildren, elementStyle, elementIndex } from '../shared/utils.js';\nimport { getSupport } from '../shared/get-support.js';\nimport { getDevice } from '../shared/get-device.js';\nimport { getBrowser } from '../shared/get-browser.js';\nimport Resize from './modules/resize/resize.js';\nimport Observer from './modules/observer/observer.js';\nimport eventsEmitter from './events-emitter.js';\nimport update from './update/index.js';\nimport translate from './translate/index.js';\nimport transition from './transition/index.js';\nimport slide from './slide/index.js';\nimport loop from './loop/index.js';\nimport grabCursor from './grab-cursor/index.js';\nimport events from './events/index.js';\nimport breakpoints from './breakpoints/index.js';\nimport classes from './classes/index.js';\nimport checkOverflow from './check-overflow/index.js';\nimport defaults from './defaults.js';\nimport moduleExtendParams from './moduleExtendParams.js';\nimport { processLazyPreloader, preload } from '../shared/process-lazy-preloader.js';\nconst prototypes = {\n  eventsEmitter,\n  update,\n  translate,\n  transition,\n  slide,\n  loop,\n  grabCursor,\n  events,\n  breakpoints,\n  checkOverflow,\n  classes\n};\nconst extendedDefaults = {};\nclass Swiper {\n  constructor(...args) {\n    let el;\n    let params;\n    if (args.length === 1 && args[0].constructor && Object.prototype.toString.call(args[0]).slice(8, -1) === 'Object') {\n      params = args[0];\n    } else {\n      [el, params] = args;\n    }\n    if (!params) params = {};\n    params = extend({}, params);\n    if (el && !params.el) params.el = el;\n    const document = getDocument();\n    if (params.el && typeof params.el === 'string' && document.querySelectorAll(params.el).length > 1) {\n      const swipers = [];\n      document.querySelectorAll(params.el).forEach(containerEl => {\n        const newParams = extend({}, params, {\n          el: containerEl\n        });\n        swipers.push(new Swiper(newParams));\n      });\n      // eslint-disable-next-line no-constructor-return\n      return swipers;\n    }\n\n    // Swiper Instance\n    const swiper = this;\n    swiper.__swiper__ = true;\n    swiper.support = getSupport();\n    swiper.device = getDevice({\n      userAgent: params.userAgent\n    });\n    swiper.browser = getBrowser();\n    swiper.eventsListeners = {};\n    swiper.eventsAnyListeners = [];\n    swiper.modules = [...swiper.__modules__];\n    if (params.modules && Array.isArray(params.modules)) {\n      swiper.modules.push(...params.modules);\n    }\n    const allModulesParams = {};\n    swiper.modules.forEach(mod => {\n      mod({\n        params,\n        swiper,\n        extendParams: moduleExtendParams(params, allModulesParams),\n        on: swiper.on.bind(swiper),\n        once: swiper.once.bind(swiper),\n        off: swiper.off.bind(swiper),\n        emit: swiper.emit.bind(swiper)\n      });\n    });\n\n    // Extend defaults with modules params\n    const swiperParams = extend({}, defaults, allModulesParams);\n\n    // Extend defaults with passed params\n    swiper.params = extend({}, swiperParams, extendedDefaults, params);\n    swiper.originalParams = extend({}, swiper.params);\n    swiper.passedParams = extend({}, params);\n\n    // add event listeners\n    if (swiper.params && swiper.params.on) {\n      Object.keys(swiper.params.on).forEach(eventName => {\n        swiper.on(eventName, swiper.params.on[eventName]);\n      });\n    }\n    if (swiper.params && swiper.params.onAny) {\n      swiper.onAny(swiper.params.onAny);\n    }\n\n    // Extend Swiper\n    Object.assign(swiper, {\n      enabled: swiper.params.enabled,\n      el,\n      // Classes\n      classNames: [],\n      // Slides\n      slides: [],\n      slidesGrid: [],\n      snapGrid: [],\n      slidesSizesGrid: [],\n      // isDirection\n      isHorizontal() {\n        return swiper.params.direction === 'horizontal';\n      },\n      isVertical() {\n        return swiper.params.direction === 'vertical';\n      },\n      // Indexes\n      activeIndex: 0,\n      realIndex: 0,\n      //\n      isBeginning: true,\n      isEnd: false,\n      // Props\n      translate: 0,\n      previousTranslate: 0,\n      progress: 0,\n      velocity: 0,\n      animating: false,\n      cssOverflowAdjustment() {\n        // Returns 0 unless `translate` is > 2**23\n        // Should be subtracted from css values to prevent overflow\n        return Math.trunc(this.translate / 2 ** 23) * 2 ** 23;\n      },\n      // Locks\n      allowSlideNext: swiper.params.allowSlideNext,\n      allowSlidePrev: swiper.params.allowSlidePrev,\n      // Touch Events\n      touchEventsData: {\n        isTouched: undefined,\n        isMoved: undefined,\n        allowTouchCallbacks: undefined,\n        touchStartTime: undefined,\n        isScrolling: undefined,\n        currentTranslate: undefined,\n        startTranslate: undefined,\n        allowThresholdMove: undefined,\n        // Form elements to match\n        focusableElements: swiper.params.focusableElements,\n        // Last click time\n        lastClickTime: 0,\n        clickTimeout: undefined,\n        // Velocities\n        velocities: [],\n        allowMomentumBounce: undefined,\n        startMoving: undefined,\n        evCache: []\n      },\n      // Clicks\n      allowClick: true,\n      // Touches\n      allowTouchMove: swiper.params.allowTouchMove,\n      touches: {\n        startX: 0,\n        startY: 0,\n        currentX: 0,\n        currentY: 0,\n        diff: 0\n      },\n      // Images\n      imagesToLoad: [],\n      imagesLoaded: 0\n    });\n    swiper.emit('_swiper');\n\n    // Init\n    if (swiper.params.init) {\n      swiper.init();\n    }\n\n    // Return app instance\n    // eslint-disable-next-line no-constructor-return\n    return swiper;\n  }\n  getSlideIndex(slideEl) {\n    const {\n      slidesEl,\n      params\n    } = this;\n    const slides = elementChildren(slidesEl, `.${params.slideClass}, swiper-slide`);\n    const firstSlideIndex = elementIndex(slides[0]);\n    return elementIndex(slideEl) - firstSlideIndex;\n  }\n  getSlideIndexByData(index) {\n    return this.getSlideIndex(this.slides.filter(slideEl => slideEl.getAttribute('data-swiper-slide-index') * 1 === index)[0]);\n  }\n  recalcSlides() {\n    const swiper = this;\n    const {\n      slidesEl,\n      params\n    } = swiper;\n    swiper.slides = elementChildren(slidesEl, `.${params.slideClass}, swiper-slide`);\n  }\n  enable() {\n    const swiper = this;\n    if (swiper.enabled) return;\n    swiper.enabled = true;\n    if (swiper.params.grabCursor) {\n      swiper.setGrabCursor();\n    }\n    swiper.emit('enable');\n  }\n  disable() {\n    const swiper = this;\n    if (!swiper.enabled) return;\n    swiper.enabled = false;\n    if (swiper.params.grabCursor) {\n      swiper.unsetGrabCursor();\n    }\n    swiper.emit('disable');\n  }\n  setProgress(progress, speed) {\n    const swiper = this;\n    progress = Math.min(Math.max(progress, 0), 1);\n    const min = swiper.minTranslate();\n    const max = swiper.maxTranslate();\n    const current = (max - min) * progress + min;\n    swiper.translateTo(current, typeof speed === 'undefined' ? 0 : speed);\n    swiper.updateActiveIndex();\n    swiper.updateSlidesClasses();\n  }\n  emitContainerClasses() {\n    const swiper = this;\n    if (!swiper.params._emitClasses || !swiper.el) return;\n    const cls = swiper.el.className.split(' ').filter(className => {\n      return className.indexOf('swiper') === 0 || className.indexOf(swiper.params.containerModifierClass) === 0;\n    });\n    swiper.emit('_containerClasses', cls.join(' '));\n  }\n  getSlideClasses(slideEl) {\n    const swiper = this;\n    if (swiper.destroyed) return '';\n    return slideEl.className.split(' ').filter(className => {\n      return className.indexOf('swiper-slide') === 0 || className.indexOf(swiper.params.slideClass) === 0;\n    }).join(' ');\n  }\n  emitSlidesClasses() {\n    const swiper = this;\n    if (!swiper.params._emitClasses || !swiper.el) return;\n    const updates = [];\n    swiper.slides.forEach(slideEl => {\n      const classNames = swiper.getSlideClasses(slideEl);\n      updates.push({\n        slideEl,\n        classNames\n      });\n      swiper.emit('_slideClass', slideEl, classNames);\n    });\n    swiper.emit('_slideClasses', updates);\n  }\n  slidesPerViewDynamic(view = 'current', exact = false) {\n    const swiper = this;\n    const {\n      params,\n      slides,\n      slidesGrid,\n      slidesSizesGrid,\n      size: swiperSize,\n      activeIndex\n    } = swiper;\n    let spv = 1;\n    if (params.centeredSlides) {\n      let slideSize = slides[activeIndex].swiperSlideSize;\n      let breakLoop;\n      for (let i = activeIndex + 1; i < slides.length; i += 1) {\n        if (slides[i] && !breakLoop) {\n          slideSize += slides[i].swiperSlideSize;\n          spv += 1;\n          if (slideSize > swiperSize) breakLoop = true;\n        }\n      }\n      for (let i = activeIndex - 1; i >= 0; i -= 1) {\n        if (slides[i] && !breakLoop) {\n          slideSize += slides[i].swiperSlideSize;\n          spv += 1;\n          if (slideSize > swiperSize) breakLoop = true;\n        }\n      }\n    } else {\n      // eslint-disable-next-line\n      if (view === 'current') {\n        for (let i = activeIndex + 1; i < slides.length; i += 1) {\n          const slideInView = exact ? slidesGrid[i] + slidesSizesGrid[i] - slidesGrid[activeIndex] < swiperSize : slidesGrid[i] - slidesGrid[activeIndex] < swiperSize;\n          if (slideInView) {\n            spv += 1;\n          }\n        }\n      } else {\n        // previous\n        for (let i = activeIndex - 1; i >= 0; i -= 1) {\n          const slideInView = slidesGrid[activeIndex] - slidesGrid[i] < swiperSize;\n          if (slideInView) {\n            spv += 1;\n          }\n        }\n      }\n    }\n    return spv;\n  }\n  update() {\n    const swiper = this;\n    if (!swiper || swiper.destroyed) return;\n    const {\n      snapGrid,\n      params\n    } = swiper;\n    // Breakpoints\n    if (params.breakpoints) {\n      swiper.setBreakpoint();\n    }\n    [...swiper.el.querySelectorAll('[loading=\"lazy\"]')].forEach(imageEl => {\n      if (imageEl.complete) {\n        processLazyPreloader(swiper, imageEl);\n      }\n    });\n    swiper.updateSize();\n    swiper.updateSlides();\n    swiper.updateProgress();\n    swiper.updateSlidesClasses();\n    function setTranslate() {\n      const translateValue = swiper.rtlTranslate ? swiper.translate * -1 : swiper.translate;\n      const newTranslate = Math.min(Math.max(translateValue, swiper.maxTranslate()), swiper.minTranslate());\n      swiper.setTranslate(newTranslate);\n      swiper.updateActiveIndex();\n      swiper.updateSlidesClasses();\n    }\n    let translated;\n    if (swiper.params.freeMode && swiper.params.freeMode.enabled) {\n      setTranslate();\n      if (swiper.params.autoHeight) {\n        swiper.updateAutoHeight();\n      }\n    } else {\n      if ((swiper.params.slidesPerView === 'auto' || swiper.params.slidesPerView > 1) && swiper.isEnd && !swiper.params.centeredSlides) {\n        const slides = swiper.virtual && swiper.params.virtual.enabled ? swiper.virtual.slides : swiper.slides;\n        translated = swiper.slideTo(slides.length - 1, 0, false, true);\n      } else {\n        translated = swiper.slideTo(swiper.activeIndex, 0, false, true);\n      }\n      if (!translated) {\n        setTranslate();\n      }\n    }\n    if (params.watchOverflow && snapGrid !== swiper.snapGrid) {\n      swiper.checkOverflow();\n    }\n    swiper.emit('update');\n  }\n  changeDirection(newDirection, needUpdate = true) {\n    const swiper = this;\n    const currentDirection = swiper.params.direction;\n    if (!newDirection) {\n      // eslint-disable-next-line\n      newDirection = currentDirection === 'horizontal' ? 'vertical' : 'horizontal';\n    }\n    if (newDirection === currentDirection || newDirection !== 'horizontal' && newDirection !== 'vertical') {\n      return swiper;\n    }\n    swiper.el.classList.remove(`${swiper.params.containerModifierClass}${currentDirection}`);\n    swiper.el.classList.add(`${swiper.params.containerModifierClass}${newDirection}`);\n    swiper.emitContainerClasses();\n    swiper.params.direction = newDirection;\n    swiper.slides.forEach(slideEl => {\n      if (newDirection === 'vertical') {\n        slideEl.style.width = '';\n      } else {\n        slideEl.style.height = '';\n      }\n    });\n    swiper.emit('changeDirection');\n    if (needUpdate) swiper.update();\n    return swiper;\n  }\n  changeLanguageDirection(direction) {\n    const swiper = this;\n    if (swiper.rtl && direction === 'rtl' || !swiper.rtl && direction === 'ltr') return;\n    swiper.rtl = direction === 'rtl';\n    swiper.rtlTranslate = swiper.params.direction === 'horizontal' && swiper.rtl;\n    if (swiper.rtl) {\n      swiper.el.classList.add(`${swiper.params.containerModifierClass}rtl`);\n      swiper.el.dir = 'rtl';\n    } else {\n      swiper.el.classList.remove(`${swiper.params.containerModifierClass}rtl`);\n      swiper.el.dir = 'ltr';\n    }\n    swiper.update();\n  }\n  mount(element) {\n    const swiper = this;\n    if (swiper.mounted) return true;\n\n    // Find el\n    let el = element || swiper.params.el;\n    if (typeof el === 'string') {\n      el = document.querySelector(el);\n    }\n    if (!el) {\n      return false;\n    }\n    el.swiper = swiper;\n    if (el.shadowEl) {\n      swiper.isElement = true;\n    }\n    const getWrapperSelector = () => {\n      return `.${(swiper.params.wrapperClass || '').trim().split(' ').join('.')}`;\n    };\n    const getWrapper = () => {\n      if (el && el.shadowRoot && el.shadowRoot.querySelector) {\n        const res = el.shadowRoot.querySelector(getWrapperSelector());\n        // Children needs to return slot items\n        return res;\n      }\n      return elementChildren(el, getWrapperSelector())[0];\n    };\n    // Find Wrapper\n    let wrapperEl = getWrapper();\n    if (!wrapperEl && swiper.params.createElements) {\n      wrapperEl = createElement('div', swiper.params.wrapperClass);\n      el.append(wrapperEl);\n      elementChildren(el, `.${swiper.params.slideClass}`).forEach(slideEl => {\n        wrapperEl.append(slideEl);\n      });\n    }\n    Object.assign(swiper, {\n      el,\n      wrapperEl,\n      slidesEl: swiper.isElement ? el : wrapperEl,\n      mounted: true,\n      // RTL\n      rtl: el.dir.toLowerCase() === 'rtl' || elementStyle(el, 'direction') === 'rtl',\n      rtlTranslate: swiper.params.direction === 'horizontal' && (el.dir.toLowerCase() === 'rtl' || elementStyle(el, 'direction') === 'rtl'),\n      wrongRTL: elementStyle(wrapperEl, 'display') === '-webkit-box'\n    });\n    return true;\n  }\n  init(el) {\n    const swiper = this;\n    if (swiper.initialized) return swiper;\n    const mounted = swiper.mount(el);\n    if (mounted === false) return swiper;\n    swiper.emit('beforeInit');\n\n    // Set breakpoint\n    if (swiper.params.breakpoints) {\n      swiper.setBreakpoint();\n    }\n\n    // Add Classes\n    swiper.addClasses();\n\n    // Update size\n    swiper.updateSize();\n\n    // Update slides\n    swiper.updateSlides();\n    if (swiper.params.watchOverflow) {\n      swiper.checkOverflow();\n    }\n\n    // Set Grab Cursor\n    if (swiper.params.grabCursor && swiper.enabled) {\n      swiper.setGrabCursor();\n    }\n\n    // Slide To Initial Slide\n    if (swiper.params.loop && swiper.virtual && swiper.params.virtual.enabled) {\n      swiper.slideTo(swiper.params.initialSlide + swiper.virtual.slidesBefore, 0, swiper.params.runCallbacksOnInit, false, true);\n    } else {\n      swiper.slideTo(swiper.params.initialSlide, 0, swiper.params.runCallbacksOnInit, false, true);\n    }\n\n    // Create loop\n    if (swiper.params.loop) {\n      swiper.loopCreate();\n    }\n\n    // Attach events\n    swiper.attachEvents();\n    [...swiper.el.querySelectorAll('[loading=\"lazy\"]')].forEach(imageEl => {\n      if (imageEl.complete) {\n        processLazyPreloader(swiper, imageEl);\n      } else {\n        imageEl.addEventListener('load', e => {\n          processLazyPreloader(swiper, e.target);\n        });\n      }\n    });\n    preload(swiper);\n\n    // Init Flag\n    swiper.initialized = true;\n    preload(swiper);\n\n    // Emit\n    swiper.emit('init');\n    swiper.emit('afterInit');\n    return swiper;\n  }\n  destroy(deleteInstance = true, cleanStyles = true) {\n    const swiper = this;\n    const {\n      params,\n      el,\n      wrapperEl,\n      slides\n    } = swiper;\n    if (typeof swiper.params === 'undefined' || swiper.destroyed) {\n      return null;\n    }\n    swiper.emit('beforeDestroy');\n\n    // Init Flag\n    swiper.initialized = false;\n\n    // Detach events\n    swiper.detachEvents();\n\n    // Destroy loop\n    if (params.loop) {\n      swiper.loopDestroy();\n    }\n\n    // Cleanup styles\n    if (cleanStyles) {\n      swiper.removeClasses();\n      el.removeAttribute('style');\n      wrapperEl.removeAttribute('style');\n      if (slides && slides.length) {\n        slides.forEach(slideEl => {\n          slideEl.classList.remove(params.slideVisibleClass, params.slideActiveClass, params.slideNextClass, params.slidePrevClass);\n          slideEl.removeAttribute('style');\n          slideEl.removeAttribute('data-swiper-slide-index');\n        });\n      }\n    }\n    swiper.emit('destroy');\n\n    // Detach emitter events\n    Object.keys(swiper.eventsListeners).forEach(eventName => {\n      swiper.off(eventName);\n    });\n    if (deleteInstance !== false) {\n      swiper.el.swiper = null;\n      deleteProps(swiper);\n    }\n    swiper.destroyed = true;\n    return null;\n  }\n  static extendDefaults(newDefaults) {\n    extend(extendedDefaults, newDefaults);\n  }\n  static get extendedDefaults() {\n    return extendedDefaults;\n  }\n  static get defaults() {\n    return defaults;\n  }\n  static installModule(mod) {\n    if (!Swiper.prototype.__modules__) Swiper.prototype.__modules__ = [];\n    const modules = Swiper.prototype.__modules__;\n    if (typeof mod === 'function' && modules.indexOf(mod) < 0) {\n      modules.push(mod);\n    }\n  }\n  static use(module) {\n    if (Array.isArray(module)) {\n      module.forEach(m => Swiper.installModule(m));\n      return Swiper;\n    }\n    Swiper.installModule(module);\n    return Swiper;\n  }\n}\nObject.keys(prototypes).forEach(prototypeGroup => {\n  Object.keys(prototypes[prototypeGroup]).forEach(protoMethod => {\n    Swiper.prototype[protoMethod] = prototypes[prototypeGroup][protoMethod];\n  });\n});\nSwiper.use([Resize, Observer]);\nexport default Swiper;","export default {\n  init: true,\n  direction: 'horizontal',\n  oneWayMovement: false,\n  touchEventsTarget: 'wrapper',\n  initialSlide: 0,\n  speed: 300,\n  cssMode: false,\n  updateOnWindowResize: true,\n  resizeObserver: true,\n  nested: false,\n  createElements: false,\n  enabled: true,\n  focusableElements: 'input, select, option, textarea, button, video, label',\n  // Overrides\n  width: null,\n  height: null,\n  //\n  preventInteractionOnTransition: false,\n  // ssr\n  userAgent: null,\n  url: null,\n  // To support iOS's swipe-to-go-back gesture (when being used in-app).\n  edgeSwipeDetection: false,\n  edgeSwipeThreshold: 20,\n  // Autoheight\n  autoHeight: false,\n  // Set wrapper width\n  setWrapperSize: false,\n  // Virtual Translate\n  virtualTranslate: false,\n  // Effects\n  effect: 'slide',\n  // 'slide' or 'fade' or 'cube' or 'coverflow' or 'flip'\n\n  // Breakpoints\n  breakpoints: undefined,\n  breakpointsBase: 'window',\n  // Slides grid\n  spaceBetween: 0,\n  slidesPerView: 1,\n  slidesPerGroup: 1,\n  slidesPerGroupSkip: 0,\n  slidesPerGroupAuto: false,\n  centeredSlides: false,\n  centeredSlidesBounds: false,\n  slidesOffsetBefore: 0,\n  // in px\n  slidesOffsetAfter: 0,\n  // in px\n  normalizeSlideIndex: true,\n  centerInsufficientSlides: false,\n  // Disable swiper and hide navigation when container not overflow\n  watchOverflow: true,\n  // Round length\n  roundLengths: false,\n  // Touches\n  touchRatio: 1,\n  touchAngle: 45,\n  simulateTouch: true,\n  shortSwipes: true,\n  longSwipes: true,\n  longSwipesRatio: 0.5,\n  longSwipesMs: 300,\n  followFinger: true,\n  allowTouchMove: true,\n  threshold: 5,\n  touchMoveStopPropagation: false,\n  touchStartPreventDefault: true,\n  touchStartForcePreventDefault: false,\n  touchReleaseOnEdges: false,\n  // Unique Navigation Elements\n  uniqueNavElements: true,\n  // Resistance\n  resistance: true,\n  resistanceRatio: 0.85,\n  // Progress\n  watchSlidesProgress: false,\n  // Cursor\n  grabCursor: false,\n  // Clicks\n  preventClicks: true,\n  preventClicksPropagation: true,\n  slideToClickedSlide: false,\n  // loop\n  loop: false,\n  loopedSlides: null,\n  loopPreventsSliding: true,\n  // rewind\n  rewind: false,\n  // Swiping/no swiping\n  allowSlidePrev: true,\n  allowSlideNext: true,\n  swipeHandler: null,\n  // '.swipe-handler',\n  noSwiping: true,\n  noSwipingClass: 'swiper-no-swiping',\n  noSwipingSelector: null,\n  // Passive Listeners\n  passiveListeners: true,\n  maxBackfaceHiddenSlides: 10,\n  // NS\n  containerModifierClass: 'swiper-',\n  // NEW\n  slideClass: 'swiper-slide',\n  slideActiveClass: 'swiper-slide-active',\n  slideVisibleClass: 'swiper-slide-visible',\n  slideNextClass: 'swiper-slide-next',\n  slidePrevClass: 'swiper-slide-prev',\n  wrapperClass: 'swiper-wrapper',\n  lazyPreloaderClass: 'swiper-lazy-preloader',\n  lazyPreloadPrevNext: 0,\n  // Callbacks\n  runCallbacksOnInit: true,\n  // Internals\n  _emitClasses: false\n};","/* eslint-disable no-underscore-dangle */\n\nexport default {\n  on(events, handler, priority) {\n    const self = this;\n    if (!self.eventsListeners || self.destroyed) return self;\n    if (typeof handler !== 'function') return self;\n    const method = priority ? 'unshift' : 'push';\n    events.split(' ').forEach(event => {\n      if (!self.eventsListeners[event]) self.eventsListeners[event] = [];\n      self.eventsListeners[event][method](handler);\n    });\n    return self;\n  },\n  once(events, handler, priority) {\n    const self = this;\n    if (!self.eventsListeners || self.destroyed) return self;\n    if (typeof handler !== 'function') return self;\n    function onceHandler(...args) {\n      self.off(events, onceHandler);\n      if (onceHandler.__emitterProxy) {\n        delete onceHandler.__emitterProxy;\n      }\n      handler.apply(self, args);\n    }\n    onceHandler.__emitterProxy = handler;\n    return self.on(events, onceHandler, priority);\n  },\n  onAny(handler, priority) {\n    const self = this;\n    if (!self.eventsListeners || self.destroyed) return self;\n    if (typeof handler !== 'function') return self;\n    const method = priority ? 'unshift' : 'push';\n    if (self.eventsAnyListeners.indexOf(handler) < 0) {\n      self.eventsAnyListeners[method](handler);\n    }\n    return self;\n  },\n  offAny(handler) {\n    const self = this;\n    if (!self.eventsListeners || self.destroyed) return self;\n    if (!self.eventsAnyListeners) return self;\n    const index = self.eventsAnyListeners.indexOf(handler);\n    if (index >= 0) {\n      self.eventsAnyListeners.splice(index, 1);\n    }\n    return self;\n  },\n  off(events, handler) {\n    const self = this;\n    if (!self.eventsListeners || self.destroyed) return self;\n    if (!self.eventsListeners) return self;\n    events.split(' ').forEach(event => {\n      if (typeof handler === 'undefined') {\n        self.eventsListeners[event] = [];\n      } else if (self.eventsListeners[event]) {\n        self.eventsListeners[event].forEach((eventHandler, index) => {\n          if (eventHandler === handler || eventHandler.__emitterProxy && eventHandler.__emitterProxy === handler) {\n            self.eventsListeners[event].splice(index, 1);\n          }\n        });\n      }\n    });\n    return self;\n  },\n  emit(...args) {\n    const self = this;\n    if (!self.eventsListeners || self.destroyed) return self;\n    if (!self.eventsListeners) return self;\n    let events;\n    let data;\n    let context;\n    if (typeof args[0] === 'string' || Array.isArray(args[0])) {\n      events = args[0];\n      data = args.slice(1, args.length);\n      context = self;\n    } else {\n      events = args[0].events;\n      data = args[0].data;\n      context = args[0].context || self;\n    }\n    data.unshift(context);\n    const eventsArray = Array.isArray(events) ? events : events.split(' ');\n    eventsArray.forEach(event => {\n      if (self.eventsAnyListeners && self.eventsAnyListeners.length) {\n        self.eventsAnyListeners.forEach(eventHandler => {\n          eventHandler.apply(context, [event, ...data]);\n        });\n      }\n      if (self.eventsListeners && self.eventsListeners[event]) {\n        self.eventsListeners[event].forEach(eventHandler => {\n          eventHandler.apply(context, data);\n        });\n      }\n    });\n    return self;\n  }\n};","import { getDocument } from 'ssr-window';\nimport onTouchStart from './onTouchStart.js';\nimport onTouchMove from './onTouchMove.js';\nimport onTouchEnd from './onTouchEnd.js';\nimport onResize from './onResize.js';\nimport onClick from './onClick.js';\nimport onScroll from './onScroll.js';\nimport onLoad from './onLoad.js';\nlet dummyEventAttached = false;\nfunction dummyEventListener() {}\nconst events = (swiper, method) => {\n  const document = getDocument();\n  const {\n    params,\n    el,\n    wrapperEl,\n    device\n  } = swiper;\n  const capture = !!params.nested;\n  const domMethod = method === 'on' ? 'addEventListener' : 'removeEventListener';\n  const swiperMethod = method;\n\n  // Touch Events\n  el[domMethod]('pointerdown', swiper.onTouchStart, {\n    passive: false\n  });\n  document[domMethod]('pointermove', swiper.onTouchMove, {\n    passive: false,\n    capture\n  });\n  document[domMethod]('pointerup', swiper.onTouchEnd, {\n    passive: true\n  });\n  document[domMethod]('pointercancel', swiper.onTouchEnd, {\n    passive: true\n  });\n  document[domMethod]('pointerout', swiper.onTouchEnd, {\n    passive: true\n  });\n  document[domMethod]('pointerleave', swiper.onTouchEnd, {\n    passive: true\n  });\n\n  // Prevent Links Clicks\n  if (params.preventClicks || params.preventClicksPropagation) {\n    el[domMethod]('click', swiper.onClick, true);\n  }\n  if (params.cssMode) {\n    wrapperEl[domMethod]('scroll', swiper.onScroll);\n  }\n\n  // Resize handler\n  if (params.updateOnWindowResize) {\n    swiper[swiperMethod](device.ios || device.android ? 'resize orientationchange observerUpdate' : 'resize observerUpdate', onResize, true);\n  } else {\n    swiper[swiperMethod]('observerUpdate', onResize, true);\n  }\n\n  // Images loader\n  el[domMethod]('load', swiper.onLoad, {\n    capture: true\n  });\n};\nfunction attachEvents() {\n  const swiper = this;\n  const document = getDocument();\n  const {\n    params\n  } = swiper;\n  swiper.onTouchStart = onTouchStart.bind(swiper);\n  swiper.onTouchMove = onTouchMove.bind(swiper);\n  swiper.onTouchEnd = onTouchEnd.bind(swiper);\n  if (params.cssMode) {\n    swiper.onScroll = onScroll.bind(swiper);\n  }\n  swiper.onClick = onClick.bind(swiper);\n  swiper.onLoad = onLoad.bind(swiper);\n  if (!dummyEventAttached) {\n    document.addEventListener('touchstart', dummyEventListener);\n    dummyEventAttached = true;\n  }\n  events(swiper, 'on');\n}\nfunction detachEvents() {\n  const swiper = this;\n  events(swiper, 'off');\n}\nexport default {\n  attachEvents,\n  detachEvents\n};","export default function onClick(e) {\n  const swiper = this;\n  if (!swiper.enabled) return;\n  if (!swiper.allowClick) {\n    if (swiper.params.preventClicks) e.preventDefault();\n    if (swiper.params.preventClicksPropagation && swiper.animating) {\n      e.stopPropagation();\n      e.stopImmediatePropagation();\n    }\n  }\n}","import { processLazyPreloader } from '../../shared/process-lazy-preloader.js';\nexport default function onLoad(e) {\n  const swiper = this;\n  processLazyPreloader(swiper, e.target);\n  swiper.update();\n}","export default function onResize() {\n  const swiper = this;\n  const {\n    params,\n    el\n  } = swiper;\n  if (el && el.offsetWidth === 0) return;\n\n  // Breakpoints\n  if (params.breakpoints) {\n    swiper.setBreakpoint();\n  }\n\n  // Save locks\n  const {\n    allowSlideNext,\n    allowSlidePrev,\n    snapGrid\n  } = swiper;\n  const isVirtual = swiper.virtual && swiper.params.virtual.enabled;\n\n  // Disable locks on resize\n  swiper.allowSlideNext = true;\n  swiper.allowSlidePrev = true;\n  swiper.updateSize();\n  swiper.updateSlides();\n  swiper.updateSlidesClasses();\n  const isVirtualLoop = isVirtual && params.loop;\n  if ((params.slidesPerView === 'auto' || params.slidesPerView > 1) && swiper.isEnd && !swiper.isBeginning && !swiper.params.centeredSlides && !isVirtualLoop) {\n    swiper.slideTo(swiper.slides.length - 1, 0, false, true);\n  } else {\n    if (swiper.params.loop && !isVirtual) {\n      swiper.slideToLoop(swiper.realIndex, 0, false, true);\n    } else {\n      swiper.slideTo(swiper.activeIndex, 0, false, true);\n    }\n  }\n  if (swiper.autoplay && swiper.autoplay.running && swiper.autoplay.paused) {\n    clearTimeout(swiper.autoplay.resizeTimeout);\n    swiper.autoplay.resizeTimeout = setTimeout(() => {\n      if (swiper.autoplay && swiper.autoplay.running && swiper.autoplay.paused) {\n        swiper.autoplay.resume();\n      }\n    }, 500);\n  }\n  // Return locks after resize\n  swiper.allowSlidePrev = allowSlidePrev;\n  swiper.allowSlideNext = allowSlideNext;\n  if (swiper.params.watchOverflow && snapGrid !== swiper.snapGrid) {\n    swiper.checkOverflow();\n  }\n}","export default function onScroll() {\n  const swiper = this;\n  const {\n    wrapperEl,\n    rtlTranslate,\n    enabled\n  } = swiper;\n  if (!enabled) return;\n  swiper.previousTranslate = swiper.translate;\n  if (swiper.isHorizontal()) {\n    swiper.translate = -wrapperEl.scrollLeft;\n  } else {\n    swiper.translate = -wrapperEl.scrollTop;\n  }\n  // eslint-disable-next-line\n  if (swiper.translate === 0) swiper.translate = 0;\n  swiper.updateActiveIndex();\n  swiper.updateSlidesClasses();\n  let newProgress;\n  const translatesDiff = swiper.maxTranslate() - swiper.minTranslate();\n  if (translatesDiff === 0) {\n    newProgress = 0;\n  } else {\n    newProgress = (swiper.translate - swiper.minTranslate()) / translatesDiff;\n  }\n  if (newProgress !== swiper.progress) {\n    swiper.updateProgress(rtlTranslate ? -swiper.translate : swiper.translate);\n  }\n  swiper.emit('setTranslate', swiper.translate, false);\n}","import { now, nextTick } from '../../shared/utils.js';\nexport default function onTouchEnd(event) {\n  const swiper = this;\n  const data = swiper.touchEventsData;\n  const pointerIndex = data.evCache.findIndex(cachedEv => cachedEv.pointerId === event.pointerId);\n  if (pointerIndex >= 0) {\n    data.evCache.splice(pointerIndex, 1);\n  }\n  if (['pointercancel', 'pointerout', 'pointerleave'].includes(event.type)) {\n    const proceed = event.type === 'pointercancel' && (swiper.browser.isSafari || swiper.browser.isWebView);\n    if (!proceed) {\n      return;\n    }\n  }\n  const {\n    params,\n    touches,\n    rtlTranslate: rtl,\n    slidesGrid,\n    enabled\n  } = swiper;\n  if (!enabled) return;\n  if (!params.simulateTouch && event.pointerType === 'mouse') return;\n  let e = event;\n  if (e.originalEvent) e = e.originalEvent;\n  if (data.allowTouchCallbacks) {\n    swiper.emit('touchEnd', e);\n  }\n  data.allowTouchCallbacks = false;\n  if (!data.isTouched) {\n    if (data.isMoved && params.grabCursor) {\n      swiper.setGrabCursor(false);\n    }\n    data.isMoved = false;\n    data.startMoving = false;\n    return;\n  }\n  // Return Grab Cursor\n  if (params.grabCursor && data.isMoved && data.isTouched && (swiper.allowSlideNext === true || swiper.allowSlidePrev === true)) {\n    swiper.setGrabCursor(false);\n  }\n\n  // Time diff\n  const touchEndTime = now();\n  const timeDiff = touchEndTime - data.touchStartTime;\n\n  // Tap, doubleTap, Click\n  if (swiper.allowClick) {\n    const pathTree = e.path || e.composedPath && e.composedPath();\n    swiper.updateClickedSlide(pathTree && pathTree[0] || e.target);\n    swiper.emit('tap click', e);\n    if (timeDiff < 300 && touchEndTime - data.lastClickTime < 300) {\n      swiper.emit('doubleTap doubleClick', e);\n    }\n  }\n  data.lastClickTime = now();\n  nextTick(() => {\n    if (!swiper.destroyed) swiper.allowClick = true;\n  });\n  if (!data.isTouched || !data.isMoved || !swiper.swipeDirection || touches.diff === 0 || data.currentTranslate === data.startTranslate) {\n    data.isTouched = false;\n    data.isMoved = false;\n    data.startMoving = false;\n    return;\n  }\n  data.isTouched = false;\n  data.isMoved = false;\n  data.startMoving = false;\n  let currentPos;\n  if (params.followFinger) {\n    currentPos = rtl ? swiper.translate : -swiper.translate;\n  } else {\n    currentPos = -data.currentTranslate;\n  }\n  if (params.cssMode) {\n    return;\n  }\n  if (swiper.params.freeMode && params.freeMode.enabled) {\n    swiper.freeMode.onTouchEnd({\n      currentPos\n    });\n    return;\n  }\n\n  // Find current slide\n  let stopIndex = 0;\n  let groupSize = swiper.slidesSizesGrid[0];\n  for (let i = 0; i < slidesGrid.length; i += i < params.slidesPerGroupSkip ? 1 : params.slidesPerGroup) {\n    const increment = i < params.slidesPerGroupSkip - 1 ? 1 : params.slidesPerGroup;\n    if (typeof slidesGrid[i + increment] !== 'undefined') {\n      if (currentPos >= slidesGrid[i] && currentPos < slidesGrid[i + increment]) {\n        stopIndex = i;\n        groupSize = slidesGrid[i + increment] - slidesGrid[i];\n      }\n    } else if (currentPos >= slidesGrid[i]) {\n      stopIndex = i;\n      groupSize = slidesGrid[slidesGrid.length - 1] - slidesGrid[slidesGrid.length - 2];\n    }\n  }\n  let rewindFirstIndex = null;\n  let rewindLastIndex = null;\n  if (params.rewind) {\n    if (swiper.isBeginning) {\n      rewindLastIndex = swiper.params.virtual && swiper.params.virtual.enabled && swiper.virtual ? swiper.virtual.slides.length - 1 : swiper.slides.length - 1;\n    } else if (swiper.isEnd) {\n      rewindFirstIndex = 0;\n    }\n  }\n  // Find current slide size\n  const ratio = (currentPos - slidesGrid[stopIndex]) / groupSize;\n  const increment = stopIndex < params.slidesPerGroupSkip - 1 ? 1 : params.slidesPerGroup;\n  if (timeDiff > params.longSwipesMs) {\n    // Long touches\n    if (!params.longSwipes) {\n      swiper.slideTo(swiper.activeIndex);\n      return;\n    }\n    if (swiper.swipeDirection === 'next') {\n      if (ratio >= params.longSwipesRatio) swiper.slideTo(params.rewind && swiper.isEnd ? rewindFirstIndex : stopIndex + increment);else swiper.slideTo(stopIndex);\n    }\n    if (swiper.swipeDirection === 'prev') {\n      if (ratio > 1 - params.longSwipesRatio) {\n        swiper.slideTo(stopIndex + increment);\n      } else if (rewindLastIndex !== null && ratio < 0 && Math.abs(ratio) > params.longSwipesRatio) {\n        swiper.slideTo(rewindLastIndex);\n      } else {\n        swiper.slideTo(stopIndex);\n      }\n    }\n  } else {\n    // Short swipes\n    if (!params.shortSwipes) {\n      swiper.slideTo(swiper.activeIndex);\n      return;\n    }\n    const isNavButtonTarget = swiper.navigation && (e.target === swiper.navigation.nextEl || e.target === swiper.navigation.prevEl);\n    if (!isNavButtonTarget) {\n      if (swiper.swipeDirection === 'next') {\n        swiper.slideTo(rewindFirstIndex !== null ? rewindFirstIndex : stopIndex + increment);\n      }\n      if (swiper.swipeDirection === 'prev') {\n        swiper.slideTo(rewindLastIndex !== null ? rewindLastIndex : stopIndex);\n      }\n    } else if (e.target === swiper.navigation.nextEl) {\n      swiper.slideTo(stopIndex + increment);\n    } else {\n      swiper.slideTo(stopIndex);\n    }\n  }\n}","import { getDocument } from 'ssr-window';\nimport { now } from '../../shared/utils.js';\nexport default function onTouchMove(event) {\n  const document = getDocument();\n  const swiper = this;\n  const data = swiper.touchEventsData;\n  const {\n    params,\n    touches,\n    rtlTranslate: rtl,\n    enabled\n  } = swiper;\n  if (!enabled) return;\n  if (!params.simulateTouch && event.pointerType === 'mouse') return;\n  let e = event;\n  if (e.originalEvent) e = e.originalEvent;\n  if (!data.isTouched) {\n    if (data.startMoving && data.isScrolling) {\n      swiper.emit('touchMoveOpposite', e);\n    }\n    return;\n  }\n  const pointerIndex = data.evCache.findIndex(cachedEv => cachedEv.pointerId === e.pointerId);\n  if (pointerIndex >= 0) data.evCache[pointerIndex] = e;\n  const targetTouch = data.evCache.length > 1 ? data.evCache[0] : e;\n  const pageX = targetTouch.pageX;\n  const pageY = targetTouch.pageY;\n  if (e.preventedByNestedSwiper) {\n    touches.startX = pageX;\n    touches.startY = pageY;\n    return;\n  }\n  if (!swiper.allowTouchMove) {\n    if (!e.target.matches(data.focusableElements)) {\n      swiper.allowClick = false;\n    }\n    if (data.isTouched) {\n      Object.assign(touches, {\n        startX: pageX,\n        startY: pageY,\n        prevX: swiper.touches.currentX,\n        prevY: swiper.touches.currentY,\n        currentX: pageX,\n        currentY: pageY\n      });\n      data.touchStartTime = now();\n    }\n    return;\n  }\n  if (params.touchReleaseOnEdges && !params.loop) {\n    if (swiper.isVertical()) {\n      // Vertical\n      if (pageY < touches.startY && swiper.translate <= swiper.maxTranslate() || pageY > touches.startY && swiper.translate >= swiper.minTranslate()) {\n        data.isTouched = false;\n        data.isMoved = false;\n        return;\n      }\n    } else if (pageX < touches.startX && swiper.translate <= swiper.maxTranslate() || pageX > touches.startX && swiper.translate >= swiper.minTranslate()) {\n      return;\n    }\n  }\n  if (document.activeElement) {\n    if (e.target === document.activeElement && e.target.matches(data.focusableElements)) {\n      data.isMoved = true;\n      swiper.allowClick = false;\n      return;\n    }\n  }\n  if (data.allowTouchCallbacks) {\n    swiper.emit('touchMove', e);\n  }\n  if (e.targetTouches && e.targetTouches.length > 1) return;\n  touches.currentX = pageX;\n  touches.currentY = pageY;\n  const diffX = touches.currentX - touches.startX;\n  const diffY = touches.currentY - touches.startY;\n  if (swiper.params.threshold && Math.sqrt(diffX ** 2 + diffY ** 2) < swiper.params.threshold) return;\n  if (typeof data.isScrolling === 'undefined') {\n    let touchAngle;\n    if (swiper.isHorizontal() && touches.currentY === touches.startY || swiper.isVertical() && touches.currentX === touches.startX) {\n      data.isScrolling = false;\n    } else {\n      // eslint-disable-next-line\n      if (diffX * diffX + diffY * diffY >= 25) {\n        touchAngle = Math.atan2(Math.abs(diffY), Math.abs(diffX)) * 180 / Math.PI;\n        data.isScrolling = swiper.isHorizontal() ? touchAngle > params.touchAngle : 90 - touchAngle > params.touchAngle;\n      }\n    }\n  }\n  if (data.isScrolling) {\n    swiper.emit('touchMoveOpposite', e);\n  }\n  if (typeof data.startMoving === 'undefined') {\n    if (touches.currentX !== touches.startX || touches.currentY !== touches.startY) {\n      data.startMoving = true;\n    }\n  }\n  if (data.isScrolling || swiper.zoom && swiper.params.zoom && swiper.params.zoom.enabled && data.evCache.length > 1) {\n    data.isTouched = false;\n    return;\n  }\n  if (!data.startMoving) {\n    return;\n  }\n  swiper.allowClick = false;\n  if (!params.cssMode && e.cancelable) {\n    e.preventDefault();\n  }\n  if (params.touchMoveStopPropagation && !params.nested) {\n    e.stopPropagation();\n  }\n  let diff = swiper.isHorizontal() ? diffX : diffY;\n  let touchesDiff = swiper.isHorizontal() ? touches.currentX - touches.previousX : touches.currentY - touches.previousY;\n  if (params.oneWayMovement) {\n    diff = Math.abs(diff) * (rtl ? 1 : -1);\n    touchesDiff = Math.abs(touchesDiff) * (rtl ? 1 : -1);\n  }\n  touches.diff = diff;\n  diff *= params.touchRatio;\n  if (rtl) {\n    diff = -diff;\n    touchesDiff = -touchesDiff;\n  }\n  const prevTouchesDirection = swiper.touchesDirection;\n  swiper.swipeDirection = diff > 0 ? 'prev' : 'next';\n  swiper.touchesDirection = touchesDiff > 0 ? 'prev' : 'next';\n  const isLoop = swiper.params.loop && !params.cssMode;\n  if (!data.isMoved) {\n    if (isLoop) {\n      swiper.loopFix({\n        direction: swiper.swipeDirection\n      });\n    }\n    data.startTranslate = swiper.getTranslate();\n    swiper.setTransition(0);\n    if (swiper.animating) {\n      const evt = new window.CustomEvent('transitionend', {\n        bubbles: true,\n        cancelable: true\n      });\n      swiper.wrapperEl.dispatchEvent(evt);\n    }\n    data.allowMomentumBounce = false;\n    // Grab Cursor\n    if (params.grabCursor && (swiper.allowSlideNext === true || swiper.allowSlidePrev === true)) {\n      swiper.setGrabCursor(true);\n    }\n    swiper.emit('sliderFirstMove', e);\n  }\n  let loopFixed;\n  if (data.isMoved && prevTouchesDirection !== swiper.touchesDirection && isLoop && Math.abs(diff) >= 1) {\n    // need another loop fix\n    swiper.loopFix({\n      direction: swiper.swipeDirection,\n      setTranslate: true\n    });\n    loopFixed = true;\n  }\n  swiper.emit('sliderMove', e);\n  data.isMoved = true;\n  data.currentTranslate = diff + data.startTranslate;\n  let disableParentSwiper = true;\n  let resistanceRatio = params.resistanceRatio;\n  if (params.touchReleaseOnEdges) {\n    resistanceRatio = 0;\n  }\n  if (diff > 0) {\n    if (isLoop && !loopFixed && data.currentTranslate > (params.centeredSlides ? swiper.minTranslate() - swiper.size / 2 : swiper.minTranslate())) {\n      swiper.loopFix({\n        direction: 'prev',\n        setTranslate: true,\n        activeSlideIndex: 0\n      });\n    }\n    if (data.currentTranslate > swiper.minTranslate()) {\n      disableParentSwiper = false;\n      if (params.resistance) {\n        data.currentTranslate = swiper.minTranslate() - 1 + (-swiper.minTranslate() + data.startTranslate + diff) ** resistanceRatio;\n      }\n    }\n  } else if (diff < 0) {\n    if (isLoop && !loopFixed && data.currentTranslate < (params.centeredSlides ? swiper.maxTranslate() + swiper.size / 2 : swiper.maxTranslate())) {\n      swiper.loopFix({\n        direction: 'next',\n        setTranslate: true,\n        activeSlideIndex: swiper.slides.length - (params.slidesPerView === 'auto' ? swiper.slidesPerViewDynamic() : Math.ceil(parseFloat(params.slidesPerView, 10)))\n      });\n    }\n    if (data.currentTranslate < swiper.maxTranslate()) {\n      disableParentSwiper = false;\n      if (params.resistance) {\n        data.currentTranslate = swiper.maxTranslate() + 1 - (swiper.maxTranslate() - data.startTranslate - diff) ** resistanceRatio;\n      }\n    }\n  }\n  if (disableParentSwiper) {\n    e.preventedByNestedSwiper = true;\n  }\n\n  // Directions locks\n  if (!swiper.allowSlideNext && swiper.swipeDirection === 'next' && data.currentTranslate < data.startTranslate) {\n    data.currentTranslate = data.startTranslate;\n  }\n  if (!swiper.allowSlidePrev && swiper.swipeDirection === 'prev' && data.currentTranslate > data.startTranslate) {\n    data.currentTranslate = data.startTranslate;\n  }\n  if (!swiper.allowSlidePrev && !swiper.allowSlideNext) {\n    data.currentTranslate = data.startTranslate;\n  }\n\n  // Threshold\n  if (params.threshold > 0) {\n    if (Math.abs(diff) > params.threshold || data.allowThresholdMove) {\n      if (!data.allowThresholdMove) {\n        data.allowThresholdMove = true;\n        touches.startX = touches.currentX;\n        touches.startY = touches.currentY;\n        data.currentTranslate = data.startTranslate;\n        touches.diff = swiper.isHorizontal() ? touches.currentX - touches.startX : touches.currentY - touches.startY;\n        return;\n      }\n    } else {\n      data.currentTranslate = data.startTranslate;\n      return;\n    }\n  }\n  if (!params.followFinger || params.cssMode) return;\n\n  // Update active index in free mode\n  if (params.freeMode && params.freeMode.enabled && swiper.freeMode || params.watchSlidesProgress) {\n    swiper.updateActiveIndex();\n    swiper.updateSlidesClasses();\n  }\n  if (swiper.params.freeMode && params.freeMode.enabled && swiper.freeMode) {\n    swiper.freeMode.onTouchMove();\n  }\n  // Update progress\n  swiper.updateProgress(data.currentTranslate);\n  // Update translate\n  swiper.setTranslate(data.currentTranslate);\n}","import { getWindow, getDocument } from 'ssr-window';\nimport { now } from '../../shared/utils.js';\n\n// Modified from https://stackoverflow.com/questions/54520554/custom-element-getrootnode-closest-function-crossing-multiple-parent-shadowd\nfunction closestElement(selector, base = this) {\n  function __closestFrom(el) {\n    if (!el || el === getDocument() || el === getWindow()) return null;\n    if (el.assignedSlot) el = el.assignedSlot;\n    const found = el.closest(selector);\n    if (!found && !el.getRootNode) {\n      return null;\n    }\n    return found || __closestFrom(el.getRootNode().host);\n  }\n  return __closestFrom(base);\n}\nexport default function onTouchStart(event) {\n  const swiper = this;\n  const document = getDocument();\n  const window = getWindow();\n  const data = swiper.touchEventsData;\n  data.evCache.push(event);\n  const {\n    params,\n    touches,\n    enabled\n  } = swiper;\n  if (!enabled) return;\n  if (!params.simulateTouch && event.pointerType === 'mouse') return;\n  if (swiper.animating && params.preventInteractionOnTransition) {\n    return;\n  }\n  if (!swiper.animating && params.cssMode && params.loop) {\n    swiper.loopFix();\n  }\n  let e = event;\n  if (e.originalEvent) e = e.originalEvent;\n  let targetEl = e.target;\n  if (params.touchEventsTarget === 'wrapper') {\n    if (!swiper.wrapperEl.contains(targetEl)) return;\n  }\n  if ('which' in e && e.which === 3) return;\n  if ('button' in e && e.button > 0) return;\n  if (data.isTouched && data.isMoved) return;\n\n  // change target el for shadow root component\n  const swipingClassHasValue = !!params.noSwipingClass && params.noSwipingClass !== '';\n  // eslint-disable-next-line\n  const eventPath = event.composedPath ? event.composedPath() : event.path;\n  if (swipingClassHasValue && e.target && e.target.shadowRoot && eventPath) {\n    targetEl = eventPath[0];\n  }\n  const noSwipingSelector = params.noSwipingSelector ? params.noSwipingSelector : `.${params.noSwipingClass}`;\n  const isTargetShadow = !!(e.target && e.target.shadowRoot);\n\n  // use closestElement for shadow root element to get the actual closest for nested shadow root element\n  if (params.noSwiping && (isTargetShadow ? closestElement(noSwipingSelector, targetEl) : targetEl.closest(noSwipingSelector))) {\n    swiper.allowClick = true;\n    return;\n  }\n  if (params.swipeHandler) {\n    if (!targetEl.closest(params.swipeHandler)) return;\n  }\n  touches.currentX = e.pageX;\n  touches.currentY = e.pageY;\n  const startX = touches.currentX;\n  const startY = touches.currentY;\n\n  // Do NOT start if iOS edge swipe is detected. Otherwise iOS app cannot swipe-to-go-back anymore\n\n  const edgeSwipeDetection = params.edgeSwipeDetection || params.iOSEdgeSwipeDetection;\n  const edgeSwipeThreshold = params.edgeSwipeThreshold || params.iOSEdgeSwipeThreshold;\n  if (edgeSwipeDetection && (startX <= edgeSwipeThreshold || startX >= window.innerWidth - edgeSwipeThreshold)) {\n    if (edgeSwipeDetection === 'prevent') {\n      event.preventDefault();\n    } else {\n      return;\n    }\n  }\n  Object.assign(data, {\n    isTouched: true,\n    isMoved: false,\n    allowTouchCallbacks: true,\n    isScrolling: undefined,\n    startMoving: undefined\n  });\n  touches.startX = startX;\n  touches.startY = startY;\n  data.touchStartTime = now();\n  swiper.allowClick = true;\n  swiper.updateSize();\n  swiper.swipeDirection = undefined;\n  if (params.threshold > 0) data.allowThresholdMove = false;\n  let preventDefault = true;\n  if (targetEl.matches(data.focusableElements)) {\n    preventDefault = false;\n    if (targetEl.nodeName === 'SELECT') {\n      data.isTouched = false;\n    }\n  }\n  if (document.activeElement && document.activeElement.matches(data.focusableElements) && document.activeElement !== targetEl) {\n    document.activeElement.blur();\n  }\n  const shouldPreventDefault = preventDefault && swiper.allowTouchMove && params.touchStartPreventDefault;\n  if ((params.touchStartForcePreventDefault || shouldPreventDefault) && !targetEl.isContentEditable) {\n    e.preventDefault();\n  }\n  if (swiper.params.freeMode && swiper.params.freeMode.enabled && swiper.freeMode && swiper.animating && !params.cssMode) {\n    swiper.freeMode.onTouchStart();\n  }\n  swiper.emit('touchStart', e);\n}","import setGrabCursor from './setGrabCursor.js';\nimport unsetGrabCursor from './unsetGrabCursor.js';\nexport default {\n  setGrabCursor,\n  unsetGrabCursor\n};","export default function setGrabCursor(moving) {\n  const swiper = this;\n  if (!swiper.params.simulateTouch || swiper.params.watchOverflow && swiper.isLocked || swiper.params.cssMode) return;\n  const el = swiper.params.touchEventsTarget === 'container' ? swiper.el : swiper.wrapperEl;\n  if (swiper.isElement) {\n    swiper.__preventObserver__ = true;\n  }\n  el.style.cursor = 'move';\n  el.style.cursor = moving ? 'grabbing' : 'grab';\n  if (swiper.isElement) {\n    requestAnimationFrame(() => {\n      swiper.__preventObserver__ = false;\n    });\n  }\n}","export default function unsetGrabCursor() {\n  const swiper = this;\n  if (swiper.params.watchOverflow && swiper.isLocked || swiper.params.cssMode) {\n    return;\n  }\n  if (swiper.isElement) {\n    swiper.__preventObserver__ = true;\n  }\n  swiper[swiper.params.touchEventsTarget === 'container' ? 'el' : 'wrapperEl'].style.cursor = '';\n  if (swiper.isElement) {\n    requestAnimationFrame(() => {\n      swiper.__preventObserver__ = false;\n    });\n  }\n}","import loopCreate from './loopCreate.js';\nimport loopFix from './loopFix.js';\nimport loopDestroy from './loopDestroy.js';\nexport default {\n  loopCreate,\n  loopFix,\n  loopDestroy\n};","import { elementChildren } from '../../shared/utils.js';\nexport default function loopCreate(slideRealIndex) {\n  const swiper = this;\n  const {\n    params,\n    slidesEl\n  } = swiper;\n  if (!params.loop || swiper.virtual && swiper.params.virtual.enabled) return;\n  const slides = elementChildren(slidesEl, `.${params.slideClass}, swiper-slide`);\n  slides.forEach((el, index) => {\n    el.setAttribute('data-swiper-slide-index', index);\n  });\n  swiper.loopFix({\n    slideRealIndex,\n    direction: params.centeredSlides ? undefined : 'next'\n  });\n}","export default function loopDestroy() {\n  const swiper = this;\n  const {\n    params,\n    slidesEl\n  } = swiper;\n  if (!params.loop || swiper.virtual && swiper.params.virtual.enabled) return;\n  swiper.recalcSlides();\n  const newSlidesOrder = [];\n  swiper.slides.forEach(slideEl => {\n    const index = typeof slideEl.swiperSlideIndex === 'undefined' ? slideEl.getAttribute('data-swiper-slide-index') * 1 : slideEl.swiperSlideIndex;\n    newSlidesOrder[index] = slideEl;\n  });\n  swiper.slides.forEach(slideEl => {\n    slideEl.removeAttribute('data-swiper-slide-index');\n  });\n  newSlidesOrder.forEach(slideEl => {\n    slidesEl.append(slideEl);\n  });\n  swiper.recalcSlides();\n  swiper.slideTo(swiper.realIndex, 0);\n}","export default function loopFix({\n  slideRealIndex,\n  slideTo = true,\n  direction,\n  setTranslate,\n  activeSlideIndex,\n  byController,\n  byMousewheel\n} = {}) {\n  const swiper = this;\n  if (!swiper.params.loop) return;\n  swiper.emit('beforeLoopFix');\n  const {\n    slides,\n    allowSlidePrev,\n    allowSlideNext,\n    slidesEl,\n    params\n  } = swiper;\n  swiper.allowSlidePrev = true;\n  swiper.allowSlideNext = true;\n  if (swiper.virtual && params.virtual.enabled) {\n    if (slideTo) {\n      if (!params.centeredSlides && swiper.snapIndex === 0) {\n        swiper.slideTo(swiper.virtual.slides.length, 0, false, true);\n      } else if (params.centeredSlides && swiper.snapIndex < params.slidesPerView) {\n        swiper.slideTo(swiper.virtual.slides.length + swiper.snapIndex, 0, false, true);\n      } else if (swiper.snapIndex === swiper.snapGrid.length - 1) {\n        swiper.slideTo(swiper.virtual.slidesBefore, 0, false, true);\n      }\n    }\n    swiper.allowSlidePrev = allowSlidePrev;\n    swiper.allowSlideNext = allowSlideNext;\n    swiper.emit('loopFix');\n    return;\n  }\n  const slidesPerView = params.slidesPerView === 'auto' ? swiper.slidesPerViewDynamic() : Math.ceil(parseFloat(params.slidesPerView, 10));\n  let loopedSlides = params.loopedSlides || slidesPerView;\n  if (loopedSlides % params.slidesPerGroup !== 0) {\n    loopedSlides += params.slidesPerGroup - loopedSlides % params.slidesPerGroup;\n  }\n  swiper.loopedSlides = loopedSlides;\n  const prependSlidesIndexes = [];\n  const appendSlidesIndexes = [];\n  let activeIndex = swiper.activeIndex;\n  if (typeof activeSlideIndex === 'undefined') {\n    activeSlideIndex = swiper.getSlideIndex(swiper.slides.filter(el => el.classList.contains(params.slideActiveClass))[0]);\n  } else {\n    activeIndex = activeSlideIndex;\n  }\n  const isNext = direction === 'next' || !direction;\n  const isPrev = direction === 'prev' || !direction;\n  let slidesPrepended = 0;\n  let slidesAppended = 0;\n  // prepend last slides before start\n  if (activeSlideIndex < loopedSlides) {\n    slidesPrepended = Math.max(loopedSlides - activeSlideIndex, params.slidesPerGroup);\n    for (let i = 0; i < loopedSlides - activeSlideIndex; i += 1) {\n      const index = i - Math.floor(i / slides.length) * slides.length;\n      prependSlidesIndexes.push(slides.length - index - 1);\n    }\n  } else if (activeSlideIndex /* + slidesPerView */ > swiper.slides.length - loopedSlides * 2) {\n    slidesAppended = Math.max(activeSlideIndex - (swiper.slides.length - loopedSlides * 2), params.slidesPerGroup);\n    for (let i = 0; i < slidesAppended; i += 1) {\n      const index = i - Math.floor(i / slides.length) * slides.length;\n      appendSlidesIndexes.push(index);\n    }\n  }\n  if (isPrev) {\n    prependSlidesIndexes.forEach(index => {\n      slidesEl.prepend(swiper.slides[index]);\n    });\n  }\n  if (isNext) {\n    appendSlidesIndexes.forEach(index => {\n      slidesEl.append(swiper.slides[index]);\n    });\n  }\n  swiper.recalcSlides();\n  if (params.slidesPerView === 'auto') {\n    swiper.updateSlides();\n  }\n  if (params.watchSlidesProgress) {\n    swiper.updateSlidesOffset();\n  }\n  if (slideTo) {\n    if (prependSlidesIndexes.length > 0 && isPrev) {\n      if (typeof slideRealIndex === 'undefined') {\n        const currentSlideTranslate = swiper.slidesGrid[activeIndex];\n        const newSlideTranslate = swiper.slidesGrid[activeIndex + slidesPrepended];\n        const diff = newSlideTranslate - currentSlideTranslate;\n        if (byMousewheel) {\n          swiper.setTranslate(swiper.translate - diff);\n        } else {\n          swiper.slideTo(activeIndex + slidesPrepended, 0, false, true);\n          if (setTranslate) {\n            swiper.touches[swiper.isHorizontal() ? 'startX' : 'startY'] += diff;\n          }\n        }\n      } else {\n        if (setTranslate) {\n          swiper.slideToLoop(slideRealIndex, 0, false, true);\n        }\n      }\n    } else if (appendSlidesIndexes.length > 0 && isNext) {\n      if (typeof slideRealIndex === 'undefined') {\n        const currentSlideTranslate = swiper.slidesGrid[activeIndex];\n        const newSlideTranslate = swiper.slidesGrid[activeIndex - slidesAppended];\n        const diff = newSlideTranslate - currentSlideTranslate;\n        if (byMousewheel) {\n          swiper.setTranslate(swiper.translate - diff);\n        } else {\n          swiper.slideTo(activeIndex - slidesAppended, 0, false, true);\n          if (setTranslate) {\n            swiper.touches[swiper.isHorizontal() ? 'startX' : 'startY'] += diff;\n          }\n        }\n      } else {\n        swiper.slideToLoop(slideRealIndex, 0, false, true);\n      }\n    }\n  }\n  swiper.allowSlidePrev = allowSlidePrev;\n  swiper.allowSlideNext = allowSlideNext;\n  if (swiper.controller && swiper.controller.control && !byController) {\n    const loopParams = {\n      slideRealIndex,\n      slideTo: false,\n      direction,\n      setTranslate,\n      activeSlideIndex,\n      byController: true\n    };\n    if (Array.isArray(swiper.controller.control)) {\n      swiper.controller.control.forEach(c => {\n        if (!c.destroyed && c.params.loop) c.loopFix(loopParams);\n      });\n    } else if (swiper.controller.control instanceof swiper.constructor && swiper.controller.control.params.loop) {\n      swiper.controller.control.loopFix(loopParams);\n    }\n  }\n  swiper.emit('loopFix');\n}","import { extend } from '../shared/utils.js';\nexport default function moduleExtendParams(params, allModulesParams) {\n  return function extendParams(obj = {}) {\n    const moduleParamName = Object.keys(obj)[0];\n    const moduleParams = obj[moduleParamName];\n    if (typeof moduleParams !== 'object' || moduleParams === null) {\n      extend(allModulesParams, obj);\n      return;\n    }\n    if (['navigation', 'pagination', 'scrollbar'].indexOf(moduleParamName) >= 0 && params[moduleParamName] === true) {\n      params[moduleParamName] = {\n        auto: true\n      };\n    }\n    if (!(moduleParamName in params && 'enabled' in moduleParams)) {\n      extend(allModulesParams, obj);\n      return;\n    }\n    if (params[moduleParamName] === true) {\n      params[moduleParamName] = {\n        enabled: true\n      };\n    }\n    if (typeof params[moduleParamName] === 'object' && !('enabled' in params[moduleParamName])) {\n      params[moduleParamName].enabled = true;\n    }\n    if (!params[moduleParamName]) params[moduleParamName] = {\n      enabled: false\n    };\n    extend(allModulesParams, obj);\n  };\n}","import { getWindow } from 'ssr-window';\nimport { elementParents } from '../../../shared/utils.js';\nexport default function Observer({\n  swiper,\n  extendParams,\n  on,\n  emit\n}) {\n  const observers = [];\n  const window = getWindow();\n  const attach = (target, options = {}) => {\n    const ObserverFunc = window.MutationObserver || window.WebkitMutationObserver;\n    const observer = new ObserverFunc(mutations => {\n      // The observerUpdate event should only be triggered\n      // once despite the number of mutations.  Additional\n      // triggers are redundant and are very costly\n      if (swiper.__preventObserver__) return;\n      if (mutations.length === 1) {\n        emit('observerUpdate', mutations[0]);\n        return;\n      }\n      const observerUpdate = function observerUpdate() {\n        emit('observerUpdate', mutations[0]);\n      };\n      if (window.requestAnimationFrame) {\n        window.requestAnimationFrame(observerUpdate);\n      } else {\n        window.setTimeout(observerUpdate, 0);\n      }\n    });\n    observer.observe(target, {\n      attributes: typeof options.attributes === 'undefined' ? true : options.attributes,\n      childList: typeof options.childList === 'undefined' ? true : options.childList,\n      characterData: typeof options.characterData === 'undefined' ? true : options.characterData\n    });\n    observers.push(observer);\n  };\n  const init = () => {\n    if (!swiper.params.observer) return;\n    if (swiper.params.observeParents) {\n      const containerParents = elementParents(swiper.el);\n      for (let i = 0; i < containerParents.length; i += 1) {\n        attach(containerParents[i]);\n      }\n    }\n    // Observe container\n    attach(swiper.el, {\n      childList: swiper.params.observeSlideChildren\n    });\n\n    // Observe wrapper\n    attach(swiper.wrapperEl, {\n      attributes: false\n    });\n  };\n  const destroy = () => {\n    observers.forEach(observer => {\n      observer.disconnect();\n    });\n    observers.splice(0, observers.length);\n  };\n  extendParams({\n    observer: false,\n    observeParents: false,\n    observeSlideChildren: false\n  });\n  on('init', init);\n  on('destroy', destroy);\n}","import { getWindow } from 'ssr-window';\nexport default function Resize({\n  swiper,\n  on,\n  emit\n}) {\n  const window = getWindow();\n  let observer = null;\n  let animationFrame = null;\n  const resizeHandler = () => {\n    if (!swiper || swiper.destroyed || !swiper.initialized) return;\n    emit('beforeResize');\n    emit('resize');\n  };\n  const createObserver = () => {\n    if (!swiper || swiper.destroyed || !swiper.initialized) return;\n    observer = new ResizeObserver(entries => {\n      animationFrame = window.requestAnimationFrame(() => {\n        const {\n          width,\n          height\n        } = swiper;\n        let newWidth = width;\n        let newHeight = height;\n        entries.forEach(({\n          contentBoxSize,\n          contentRect,\n          target\n        }) => {\n          if (target && target !== swiper.el) return;\n          newWidth = contentRect ? contentRect.width : (contentBoxSize[0] || contentBoxSize).inlineSize;\n          newHeight = contentRect ? contentRect.height : (contentBoxSize[0] || contentBoxSize).blockSize;\n        });\n        if (newWidth !== width || newHeight !== height) {\n          resizeHandler();\n        }\n      });\n    });\n    observer.observe(swiper.el);\n  };\n  const removeObserver = () => {\n    if (animationFrame) {\n      window.cancelAnimationFrame(animationFrame);\n    }\n    if (observer && observer.unobserve && swiper.el) {\n      observer.unobserve(swiper.el);\n      observer = null;\n    }\n  };\n  const orientationChangeHandler = () => {\n    if (!swiper || swiper.destroyed || !swiper.initialized) return;\n    emit('orientationchange');\n  };\n  on('init', () => {\n    if (swiper.params.resizeObserver && typeof window.ResizeObserver !== 'undefined') {\n      createObserver();\n      return;\n    }\n    window.addEventListener('resize', resizeHandler);\n    window.addEventListener('orientationchange', orientationChangeHandler);\n  });\n  on('destroy', () => {\n    removeObserver();\n    window.removeEventListener('resize', resizeHandler);\n    window.removeEventListener('orientationchange', orientationChangeHandler);\n  });\n}","import slideTo from './slideTo.js';\nimport slideToLoop from './slideToLoop.js';\nimport slideNext from './slideNext.js';\nimport slidePrev from './slidePrev.js';\nimport slideReset from './slideReset.js';\nimport slideToClosest from './slideToClosest.js';\nimport slideToClickedSlide from './slideToClickedSlide.js';\nexport default {\n  slideTo,\n  slideToLoop,\n  slideNext,\n  slidePrev,\n  slideReset,\n  slideToClosest,\n  slideToClickedSlide\n};","/* eslint no-unused-vars: \"off\" */\nexport default function slideNext(speed = this.params.speed, runCallbacks = true, internal) {\n  const swiper = this;\n  const {\n    enabled,\n    params,\n    animating\n  } = swiper;\n  if (!enabled) return swiper;\n  let perGroup = params.slidesPerGroup;\n  if (params.slidesPerView === 'auto' && params.slidesPerGroup === 1 && params.slidesPerGroupAuto) {\n    perGroup = Math.max(swiper.slidesPerViewDynamic('current', true), 1);\n  }\n  const increment = swiper.activeIndex < params.slidesPerGroupSkip ? 1 : perGroup;\n  const isVirtual = swiper.virtual && params.virtual.enabled;\n  if (params.loop) {\n    if (animating && !isVirtual && params.loopPreventsSliding) return false;\n    swiper.loopFix({\n      direction: 'next'\n    });\n    // eslint-disable-next-line\n    swiper._clientLeft = swiper.wrapperEl.clientLeft;\n  }\n  if (params.rewind && swiper.isEnd) {\n    return swiper.slideTo(0, speed, runCallbacks, internal);\n  }\n  return swiper.slideTo(swiper.activeIndex + increment, speed, runCallbacks, internal);\n}","/* eslint no-unused-vars: \"off\" */\nexport default function slidePrev(speed = this.params.speed, runCallbacks = true, internal) {\n  const swiper = this;\n  const {\n    params,\n    snapGrid,\n    slidesGrid,\n    rtlTranslate,\n    enabled,\n    animating\n  } = swiper;\n  if (!enabled) return swiper;\n  const isVirtual = swiper.virtual && params.virtual.enabled;\n  if (params.loop) {\n    if (animating && !isVirtual && params.loopPreventsSliding) return false;\n    swiper.loopFix({\n      direction: 'prev'\n    });\n    // eslint-disable-next-line\n    swiper._clientLeft = swiper.wrapperEl.clientLeft;\n  }\n  const translate = rtlTranslate ? swiper.translate : -swiper.translate;\n  function normalize(val) {\n    if (val < 0) return -Math.floor(Math.abs(val));\n    return Math.floor(val);\n  }\n  const normalizedTranslate = normalize(translate);\n  const normalizedSnapGrid = snapGrid.map(val => normalize(val));\n  let prevSnap = snapGrid[normalizedSnapGrid.indexOf(normalizedTranslate) - 1];\n  if (typeof prevSnap === 'undefined' && params.cssMode) {\n    let prevSnapIndex;\n    snapGrid.forEach((snap, snapIndex) => {\n      if (normalizedTranslate >= snap) {\n        // prevSnap = snap;\n        prevSnapIndex = snapIndex;\n      }\n    });\n    if (typeof prevSnapIndex !== 'undefined') {\n      prevSnap = snapGrid[prevSnapIndex > 0 ? prevSnapIndex - 1 : prevSnapIndex];\n    }\n  }\n  let prevIndex = 0;\n  if (typeof prevSnap !== 'undefined') {\n    prevIndex = slidesGrid.indexOf(prevSnap);\n    if (prevIndex < 0) prevIndex = swiper.activeIndex - 1;\n    if (params.slidesPerView === 'auto' && params.slidesPerGroup === 1 && params.slidesPerGroupAuto) {\n      prevIndex = prevIndex - swiper.slidesPerViewDynamic('previous', true) + 1;\n      prevIndex = Math.max(prevIndex, 0);\n    }\n  }\n  if (params.rewind && swiper.isBeginning) {\n    const lastIndex = swiper.params.virtual && swiper.params.virtual.enabled && swiper.virtual ? swiper.virtual.slides.length - 1 : swiper.slides.length - 1;\n    return swiper.slideTo(lastIndex, speed, runCallbacks, internal);\n  }\n  return swiper.slideTo(prevIndex, speed, runCallbacks, internal);\n}","/* eslint no-unused-vars: \"off\" */\nexport default function slideReset(speed = this.params.speed, runCallbacks = true, internal) {\n  const swiper = this;\n  return swiper.slideTo(swiper.activeIndex, speed, runCallbacks, internal);\n}","import { animateCSSModeScroll } from '../../shared/utils.js';\nexport default function slideTo(index = 0, speed = this.params.speed, runCallbacks = true, internal, initial) {\n  if (typeof index === 'string') {\n    index = parseInt(index, 10);\n  }\n  const swiper = this;\n  let slideIndex = index;\n  if (slideIndex < 0) slideIndex = 0;\n  const {\n    params,\n    snapGrid,\n    slidesGrid,\n    previousIndex,\n    activeIndex,\n    rtlTranslate: rtl,\n    wrapperEl,\n    enabled\n  } = swiper;\n  if (swiper.animating && params.preventInteractionOnTransition || !enabled && !internal && !initial) {\n    return false;\n  }\n  const skip = Math.min(swiper.params.slidesPerGroupSkip, slideIndex);\n  let snapIndex = skip + Math.floor((slideIndex - skip) / swiper.params.slidesPerGroup);\n  if (snapIndex >= snapGrid.length) snapIndex = snapGrid.length - 1;\n  const translate = -snapGrid[snapIndex];\n  // Normalize slideIndex\n  if (params.normalizeSlideIndex) {\n    for (let i = 0; i < slidesGrid.length; i += 1) {\n      const normalizedTranslate = -Math.floor(translate * 100);\n      const normalizedGrid = Math.floor(slidesGrid[i] * 100);\n      const normalizedGridNext = Math.floor(slidesGrid[i + 1] * 100);\n      if (typeof slidesGrid[i + 1] !== 'undefined') {\n        if (normalizedTranslate >= normalizedGrid && normalizedTranslate < normalizedGridNext - (normalizedGridNext - normalizedGrid) / 2) {\n          slideIndex = i;\n        } else if (normalizedTranslate >= normalizedGrid && normalizedTranslate < normalizedGridNext) {\n          slideIndex = i + 1;\n        }\n      } else if (normalizedTranslate >= normalizedGrid) {\n        slideIndex = i;\n      }\n    }\n  }\n  // Directions locks\n  if (swiper.initialized && slideIndex !== activeIndex) {\n    if (!swiper.allowSlideNext && translate < swiper.translate && translate < swiper.minTranslate()) {\n      return false;\n    }\n    if (!swiper.allowSlidePrev && translate > swiper.translate && translate > swiper.maxTranslate()) {\n      if ((activeIndex || 0) !== slideIndex) {\n        return false;\n      }\n    }\n  }\n  if (slideIndex !== (previousIndex || 0) && runCallbacks) {\n    swiper.emit('beforeSlideChangeStart');\n  }\n\n  // Update progress\n  swiper.updateProgress(translate);\n  let direction;\n  if (slideIndex > activeIndex) direction = 'next';else if (slideIndex < activeIndex) direction = 'prev';else direction = 'reset';\n\n  // Update Index\n  if (rtl && -translate === swiper.translate || !rtl && translate === swiper.translate) {\n    swiper.updateActiveIndex(slideIndex);\n    // Update Height\n    if (params.autoHeight) {\n      swiper.updateAutoHeight();\n    }\n    swiper.updateSlidesClasses();\n    if (params.effect !== 'slide') {\n      swiper.setTranslate(translate);\n    }\n    if (direction !== 'reset') {\n      swiper.transitionStart(runCallbacks, direction);\n      swiper.transitionEnd(runCallbacks, direction);\n    }\n    return false;\n  }\n  if (params.cssMode) {\n    const isH = swiper.isHorizontal();\n    const t = rtl ? translate : -translate;\n    if (speed === 0) {\n      const isVirtual = swiper.virtual && swiper.params.virtual.enabled;\n      if (isVirtual) {\n        swiper.wrapperEl.style.scrollSnapType = 'none';\n        swiper._immediateVirtual = true;\n      }\n      if (isVirtual && !swiper._cssModeVirtualInitialSet && swiper.params.initialSlide > 0) {\n        swiper._cssModeVirtualInitialSet = true;\n        requestAnimationFrame(() => {\n          wrapperEl[isH ? 'scrollLeft' : 'scrollTop'] = t;\n        });\n      } else {\n        wrapperEl[isH ? 'scrollLeft' : 'scrollTop'] = t;\n      }\n      if (isVirtual) {\n        requestAnimationFrame(() => {\n          swiper.wrapperEl.style.scrollSnapType = '';\n          swiper._immediateVirtual = false;\n        });\n      }\n    } else {\n      if (!swiper.support.smoothScroll) {\n        animateCSSModeScroll({\n          swiper,\n          targetPosition: t,\n          side: isH ? 'left' : 'top'\n        });\n        return true;\n      }\n      wrapperEl.scrollTo({\n        [isH ? 'left' : 'top']: t,\n        behavior: 'smooth'\n      });\n    }\n    return true;\n  }\n  swiper.setTransition(speed);\n  swiper.setTranslate(translate);\n  swiper.updateActiveIndex(slideIndex);\n  swiper.updateSlidesClasses();\n  swiper.emit('beforeTransitionStart', speed, internal);\n  swiper.transitionStart(runCallbacks, direction);\n  if (speed === 0) {\n    swiper.transitionEnd(runCallbacks, direction);\n  } else if (!swiper.animating) {\n    swiper.animating = true;\n    if (!swiper.onSlideToWrapperTransitionEnd) {\n      swiper.onSlideToWrapperTransitionEnd = function transitionEnd(e) {\n        if (!swiper || swiper.destroyed) return;\n        if (e.target !== this) return;\n        swiper.wrapperEl.removeEventListener('transitionend', swiper.onSlideToWrapperTransitionEnd);\n        swiper.onSlideToWrapperTransitionEnd = null;\n        delete swiper.onSlideToWrapperTransitionEnd;\n        swiper.transitionEnd(runCallbacks, direction);\n      };\n    }\n    swiper.wrapperEl.addEventListener('transitionend', swiper.onSlideToWrapperTransitionEnd);\n  }\n  return true;\n}","import { elementChildren, nextTick } from '../../shared/utils.js';\nexport default function slideToClickedSlide() {\n  const swiper = this;\n  const {\n    params,\n    slidesEl\n  } = swiper;\n  const slidesPerView = params.slidesPerView === 'auto' ? swiper.slidesPerViewDynamic() : params.slidesPerView;\n  let slideToIndex = swiper.clickedIndex;\n  let realIndex;\n  const slideSelector = swiper.isElement ? `swiper-slide` : `.${params.slideClass}`;\n  if (params.loop) {\n    if (swiper.animating) return;\n    realIndex = parseInt(swiper.clickedSlide.getAttribute('data-swiper-slide-index'), 10);\n    if (params.centeredSlides) {\n      if (slideToIndex < swiper.loopedSlides - slidesPerView / 2 || slideToIndex > swiper.slides.length - swiper.loopedSlides + slidesPerView / 2) {\n        swiper.loopFix();\n        slideToIndex = swiper.getSlideIndex(elementChildren(slidesEl, `${slideSelector}[data-swiper-slide-index=\"${realIndex}\"]`)[0]);\n        nextTick(() => {\n          swiper.slideTo(slideToIndex);\n        });\n      } else {\n        swiper.slideTo(slideToIndex);\n      }\n    } else if (slideToIndex > swiper.slides.length - slidesPerView) {\n      swiper.loopFix();\n      slideToIndex = swiper.getSlideIndex(elementChildren(slidesEl, `${slideSelector}[data-swiper-slide-index=\"${realIndex}\"]`)[0]);\n      nextTick(() => {\n        swiper.slideTo(slideToIndex);\n      });\n    } else {\n      swiper.slideTo(slideToIndex);\n    }\n  } else {\n    swiper.slideTo(slideToIndex);\n  }\n}","/* eslint no-unused-vars: \"off\" */\nexport default function slideToClosest(speed = this.params.speed, runCallbacks = true, internal, threshold = 0.5) {\n  const swiper = this;\n  let index = swiper.activeIndex;\n  const skip = Math.min(swiper.params.slidesPerGroupSkip, index);\n  const snapIndex = skip + Math.floor((index - skip) / swiper.params.slidesPerGroup);\n  const translate = swiper.rtlTranslate ? swiper.translate : -swiper.translate;\n  if (translate >= swiper.snapGrid[snapIndex]) {\n    // The current translate is on or after the current snap index, so the choice\n    // is between the current index and the one after it.\n    const currentSnap = swiper.snapGrid[snapIndex];\n    const nextSnap = swiper.snapGrid[snapIndex + 1];\n    if (translate - currentSnap > (nextSnap - currentSnap) * threshold) {\n      index += swiper.params.slidesPerGroup;\n    }\n  } else {\n    // The current translate is before the current snap index, so the choice\n    // is between the current index and the one before it.\n    const prevSnap = swiper.snapGrid[snapIndex - 1];\n    const currentSnap = swiper.snapGrid[snapIndex];\n    if (translate - prevSnap <= (currentSnap - prevSnap) * threshold) {\n      index -= swiper.params.slidesPerGroup;\n    }\n  }\n  index = Math.max(index, 0);\n  index = Math.min(index, swiper.slidesGrid.length - 1);\n  return swiper.slideTo(index, speed, runCallbacks, internal);\n}","export default function slideToLoop(index = 0, speed = this.params.speed, runCallbacks = true, internal) {\n  if (typeof index === 'string') {\n    const indexAsNumber = parseInt(index, 10);\n    index = indexAsNumber;\n  }\n  const swiper = this;\n  let newIndex = index;\n  if (swiper.params.loop) {\n    if (swiper.virtual && swiper.params.virtual.enabled) {\n      // eslint-disable-next-line\n      newIndex = newIndex + swiper.virtual.slidesBefore;\n    } else {\n      newIndex = swiper.getSlideIndexByData(newIndex);\n    }\n  }\n  return swiper.slideTo(newIndex, speed, runCallbacks, internal);\n}","import setTransition from './setTransition.js';\nimport transitionStart from './transitionStart.js';\nimport transitionEnd from './transitionEnd.js';\nexport default {\n  setTransition,\n  transitionStart,\n  transitionEnd\n};","export default function setTransition(duration, byController) {\n  const swiper = this;\n  if (!swiper.params.cssMode) {\n    swiper.wrapperEl.style.transitionDuration = `${duration}ms`;\n  }\n  swiper.emit('setTransition', duration, byController);\n}","export default function transitionEmit({\n  swiper,\n  runCallbacks,\n  direction,\n  step\n}) {\n  const {\n    activeIndex,\n    previousIndex\n  } = swiper;\n  let dir = direction;\n  if (!dir) {\n    if (activeIndex > previousIndex) dir = 'next';else if (activeIndex < previousIndex) dir = 'prev';else dir = 'reset';\n  }\n  swiper.emit(`transition${step}`);\n  if (runCallbacks && activeIndex !== previousIndex) {\n    if (dir === 'reset') {\n      swiper.emit(`slideResetTransition${step}`);\n      return;\n    }\n    swiper.emit(`slideChangeTransition${step}`);\n    if (dir === 'next') {\n      swiper.emit(`slideNextTransition${step}`);\n    } else {\n      swiper.emit(`slidePrevTransition${step}`);\n    }\n  }\n}","import transitionEmit from './transitionEmit.js';\nexport default function transitionEnd(runCallbacks = true, direction) {\n  const swiper = this;\n  const {\n    params\n  } = swiper;\n  swiper.animating = false;\n  if (params.cssMode) return;\n  swiper.setTransition(0);\n  transitionEmit({\n    swiper,\n    runCallbacks,\n    direction,\n    step: 'End'\n  });\n}","import transitionEmit from './transitionEmit.js';\nexport default function transitionStart(runCallbacks = true, direction) {\n  const swiper = this;\n  const {\n    params\n  } = swiper;\n  if (params.cssMode) return;\n  if (params.autoHeight) {\n    swiper.updateAutoHeight();\n  }\n  transitionEmit({\n    swiper,\n    runCallbacks,\n    direction,\n    step: 'Start'\n  });\n}","import { getTranslate } from '../../shared/utils.js';\nexport default function getSwiperTranslate(axis = this.isHorizontal() ? 'x' : 'y') {\n  const swiper = this;\n  const {\n    params,\n    rtlTranslate: rtl,\n    translate,\n    wrapperEl\n  } = swiper;\n  if (params.virtualTranslate) {\n    return rtl ? -translate : translate;\n  }\n  if (params.cssMode) {\n    return translate;\n  }\n  let currentTranslate = getTranslate(wrapperEl, axis);\n  currentTranslate += swiper.cssOverflowAdjustment();\n  if (rtl) currentTranslate = -currentTranslate;\n  return currentTranslate || 0;\n}","import getTranslate from './getTranslate.js';\nimport setTranslate from './setTranslate.js';\nimport minTranslate from './minTranslate.js';\nimport maxTranslate from './maxTranslate.js';\nimport translateTo from './translateTo.js';\nexport default {\n  getTranslate,\n  setTranslate,\n  minTranslate,\n  maxTranslate,\n  translateTo\n};","export default function maxTranslate() {\n  return -this.snapGrid[this.snapGrid.length - 1];\n}","export default function minTranslate() {\n  return -this.snapGrid[0];\n}","export default function setTranslate(translate, byController) {\n  const swiper = this;\n  const {\n    rtlTranslate: rtl,\n    params,\n    wrapperEl,\n    progress\n  } = swiper;\n  let x = 0;\n  let y = 0;\n  const z = 0;\n  if (swiper.isHorizontal()) {\n    x = rtl ? -translate : translate;\n  } else {\n    y = translate;\n  }\n  if (params.roundLengths) {\n    x = Math.floor(x);\n    y = Math.floor(y);\n  }\n  swiper.previousTranslate = swiper.translate;\n  swiper.translate = swiper.isHorizontal() ? x : y;\n  if (params.cssMode) {\n    wrapperEl[swiper.isHorizontal() ? 'scrollLeft' : 'scrollTop'] = swiper.isHorizontal() ? -x : -y;\n  } else if (!params.virtualTranslate) {\n    if (swiper.isHorizontal()) {\n      x -= swiper.cssOverflowAdjustment();\n    } else {\n      y -= swiper.cssOverflowAdjustment();\n    }\n    wrapperEl.style.transform = `translate3d(${x}px, ${y}px, ${z}px)`;\n  }\n\n  // Check if we need to update progress\n  let newProgress;\n  const translatesDiff = swiper.maxTranslate() - swiper.minTranslate();\n  if (translatesDiff === 0) {\n    newProgress = 0;\n  } else {\n    newProgress = (translate - swiper.minTranslate()) / translatesDiff;\n  }\n  if (newProgress !== progress) {\n    swiper.updateProgress(translate);\n  }\n  swiper.emit('setTranslate', swiper.translate, byController);\n}","import { animateCSSModeScroll } from '../../shared/utils.js';\nexport default function translateTo(translate = 0, speed = this.params.speed, runCallbacks = true, translateBounds = true, internal) {\n  const swiper = this;\n  const {\n    params,\n    wrapperEl\n  } = swiper;\n  if (swiper.animating && params.preventInteractionOnTransition) {\n    return false;\n  }\n  const minTranslate = swiper.minTranslate();\n  const maxTranslate = swiper.maxTranslate();\n  let newTranslate;\n  if (translateBounds && translate > minTranslate) newTranslate = minTranslate;else if (translateBounds && translate < maxTranslate) newTranslate = maxTranslate;else newTranslate = translate;\n\n  // Update progress\n  swiper.updateProgress(newTranslate);\n  if (params.cssMode) {\n    const isH = swiper.isHorizontal();\n    if (speed === 0) {\n      wrapperEl[isH ? 'scrollLeft' : 'scrollTop'] = -newTranslate;\n    } else {\n      if (!swiper.support.smoothScroll) {\n        animateCSSModeScroll({\n          swiper,\n          targetPosition: -newTranslate,\n          side: isH ? 'left' : 'top'\n        });\n        return true;\n      }\n      wrapperEl.scrollTo({\n        [isH ? 'left' : 'top']: -newTranslate,\n        behavior: 'smooth'\n      });\n    }\n    return true;\n  }\n  if (speed === 0) {\n    swiper.setTransition(0);\n    swiper.setTranslate(newTranslate);\n    if (runCallbacks) {\n      swiper.emit('beforeTransitionStart', speed, internal);\n      swiper.emit('transitionEnd');\n    }\n  } else {\n    swiper.setTransition(speed);\n    swiper.setTranslate(newTranslate);\n    if (runCallbacks) {\n      swiper.emit('beforeTransitionStart', speed, internal);\n      swiper.emit('transitionStart');\n    }\n    if (!swiper.animating) {\n      swiper.animating = true;\n      if (!swiper.onTranslateToWrapperTransitionEnd) {\n        swiper.onTranslateToWrapperTransitionEnd = function transitionEnd(e) {\n          if (!swiper || swiper.destroyed) return;\n          if (e.target !== this) return;\n          swiper.wrapperEl.removeEventListener('transitionend', swiper.onTranslateToWrapperTransitionEnd);\n          swiper.onTranslateToWrapperTransitionEnd = null;\n          delete swiper.onTranslateToWrapperTransitionEnd;\n          if (runCallbacks) {\n            swiper.emit('transitionEnd');\n          }\n        };\n      }\n      swiper.wrapperEl.addEventListener('transitionend', swiper.onTranslateToWrapperTransitionEnd);\n    }\n  }\n  return true;\n}","import updateSize from './updateSize.js';\nimport updateSlides from './updateSlides.js';\nimport updateAutoHeight from './updateAutoHeight.js';\nimport updateSlidesOffset from './updateSlidesOffset.js';\nimport updateSlidesProgress from './updateSlidesProgress.js';\nimport updateProgress from './updateProgress.js';\nimport updateSlidesClasses from './updateSlidesClasses.js';\nimport updateActiveIndex from './updateActiveIndex.js';\nimport updateClickedSlide from './updateClickedSlide.js';\nexport default {\n  updateSize,\n  updateSlides,\n  updateAutoHeight,\n  updateSlidesOffset,\n  updateSlidesProgress,\n  updateProgress,\n  updateSlidesClasses,\n  updateActiveIndex,\n  updateClickedSlide\n};","import { preload } from '../../shared/process-lazy-preloader.js';\nexport function getActiveIndexByTranslate(swiper) {\n  const {\n    slidesGrid,\n    params\n  } = swiper;\n  const translate = swiper.rtlTranslate ? swiper.translate : -swiper.translate;\n  let activeIndex;\n  for (let i = 0; i < slidesGrid.length; i += 1) {\n    if (typeof slidesGrid[i + 1] !== 'undefined') {\n      if (translate >= slidesGrid[i] && translate < slidesGrid[i + 1] - (slidesGrid[i + 1] - slidesGrid[i]) / 2) {\n        activeIndex = i;\n      } else if (translate >= slidesGrid[i] && translate < slidesGrid[i + 1]) {\n        activeIndex = i + 1;\n      }\n    } else if (translate >= slidesGrid[i]) {\n      activeIndex = i;\n    }\n  }\n  // Normalize slideIndex\n  if (params.normalizeSlideIndex) {\n    if (activeIndex < 0 || typeof activeIndex === 'undefined') activeIndex = 0;\n  }\n  return activeIndex;\n}\nexport default function updateActiveIndex(newActiveIndex) {\n  const swiper = this;\n  const translate = swiper.rtlTranslate ? swiper.translate : -swiper.translate;\n  const {\n    snapGrid,\n    params,\n    activeIndex: previousIndex,\n    realIndex: previousRealIndex,\n    snapIndex: previousSnapIndex\n  } = swiper;\n  let activeIndex = newActiveIndex;\n  let snapIndex;\n  const getVirtualRealIndex = aIndex => {\n    let realIndex = aIndex - swiper.virtual.slidesBefore;\n    if (realIndex < 0) {\n      realIndex = swiper.virtual.slides.length + realIndex;\n    }\n    if (realIndex >= swiper.virtual.slides.length) {\n      realIndex -= swiper.virtual.slides.length;\n    }\n    return realIndex;\n  };\n  if (typeof activeIndex === 'undefined') {\n    activeIndex = getActiveIndexByTranslate(swiper);\n  }\n  if (snapGrid.indexOf(translate) >= 0) {\n    snapIndex = snapGrid.indexOf(translate);\n  } else {\n    const skip = Math.min(params.slidesPerGroupSkip, activeIndex);\n    snapIndex = skip + Math.floor((activeIndex - skip) / params.slidesPerGroup);\n  }\n  if (snapIndex >= snapGrid.length) snapIndex = snapGrid.length - 1;\n  if (activeIndex === previousIndex) {\n    if (snapIndex !== previousSnapIndex) {\n      swiper.snapIndex = snapIndex;\n      swiper.emit('snapIndexChange');\n    }\n    if (swiper.params.loop && swiper.virtual && swiper.params.virtual.enabled) {\n      swiper.realIndex = getVirtualRealIndex(activeIndex);\n    }\n    return;\n  }\n  // Get real index\n  let realIndex;\n  if (swiper.virtual && params.virtual.enabled && params.loop) {\n    realIndex = getVirtualRealIndex(activeIndex);\n  } else if (swiper.slides[activeIndex]) {\n    realIndex = parseInt(swiper.slides[activeIndex].getAttribute('data-swiper-slide-index') || activeIndex, 10);\n  } else {\n    realIndex = activeIndex;\n  }\n  Object.assign(swiper, {\n    previousSnapIndex,\n    snapIndex,\n    previousRealIndex,\n    realIndex,\n    previousIndex,\n    activeIndex\n  });\n  if (swiper.initialized) {\n    preload(swiper);\n  }\n  swiper.emit('activeIndexChange');\n  swiper.emit('snapIndexChange');\n  if (previousRealIndex !== realIndex) {\n    swiper.emit('realIndexChange');\n  }\n  if (swiper.initialized || swiper.params.runCallbacksOnInit) {\n    swiper.emit('slideChange');\n  }\n}","export default function updateAutoHeight(speed) {\n  const swiper = this;\n  const activeSlides = [];\n  const isVirtual = swiper.virtual && swiper.params.virtual.enabled;\n  let newHeight = 0;\n  let i;\n  if (typeof speed === 'number') {\n    swiper.setTransition(speed);\n  } else if (speed === true) {\n    swiper.setTransition(swiper.params.speed);\n  }\n  const getSlideByIndex = index => {\n    if (isVirtual) {\n      return swiper.slides[swiper.getSlideIndexByData(index)];\n    }\n    return swiper.slides[index];\n  };\n  // Find slides currently in view\n  if (swiper.params.slidesPerView !== 'auto' && swiper.params.slidesPerView > 1) {\n    if (swiper.params.centeredSlides) {\n      (swiper.visibleSlides || []).forEach(slide => {\n        activeSlides.push(slide);\n      });\n    } else {\n      for (i = 0; i < Math.ceil(swiper.params.slidesPerView); i += 1) {\n        const index = swiper.activeIndex + i;\n        if (index > swiper.slides.length && !isVirtual) break;\n        activeSlides.push(getSlideByIndex(index));\n      }\n    }\n  } else {\n    activeSlides.push(getSlideByIndex(swiper.activeIndex));\n  }\n\n  // Find new height from highest slide in view\n  for (i = 0; i < activeSlides.length; i += 1) {\n    if (typeof activeSlides[i] !== 'undefined') {\n      const height = activeSlides[i].offsetHeight;\n      newHeight = height > newHeight ? height : newHeight;\n    }\n  }\n\n  // Update Height\n  if (newHeight || newHeight === 0) swiper.wrapperEl.style.height = `${newHeight}px`;\n}","export default function updateClickedSlide(e) {\n  const swiper = this;\n  const params = swiper.params;\n  const slide = e.closest(`.${params.slideClass}, swiper-slide`);\n  let slideFound = false;\n  let slideIndex;\n  if (slide) {\n    for (let i = 0; i < swiper.slides.length; i += 1) {\n      if (swiper.slides[i] === slide) {\n        slideFound = true;\n        slideIndex = i;\n        break;\n      }\n    }\n  }\n  if (slide && slideFound) {\n    swiper.clickedSlide = slide;\n    if (swiper.virtual && swiper.params.virtual.enabled) {\n      swiper.clickedIndex = parseInt(slide.getAttribute('data-swiper-slide-index'), 10);\n    } else {\n      swiper.clickedIndex = slideIndex;\n    }\n  } else {\n    swiper.clickedSlide = undefined;\n    swiper.clickedIndex = undefined;\n    return;\n  }\n  if (params.slideToClickedSlide && swiper.clickedIndex !== undefined && swiper.clickedIndex !== swiper.activeIndex) {\n    swiper.slideToClickedSlide();\n  }\n}","export default function updateProgress(translate) {\n  const swiper = this;\n  if (typeof translate === 'undefined') {\n    const multiplier = swiper.rtlTranslate ? -1 : 1;\n    // eslint-disable-next-line\n    translate = swiper && swiper.translate && swiper.translate * multiplier || 0;\n  }\n  const params = swiper.params;\n  const translatesDiff = swiper.maxTranslate() - swiper.minTranslate();\n  let {\n    progress,\n    isBeginning,\n    isEnd,\n    progressLoop\n  } = swiper;\n  const wasBeginning = isBeginning;\n  const wasEnd = isEnd;\n  if (translatesDiff === 0) {\n    progress = 0;\n    isBeginning = true;\n    isEnd = true;\n  } else {\n    progress = (translate - swiper.minTranslate()) / translatesDiff;\n    const isBeginningRounded = Math.abs(translate - swiper.minTranslate()) < 1;\n    const isEndRounded = Math.abs(translate - swiper.maxTranslate()) < 1;\n    isBeginning = isBeginningRounded || progress <= 0;\n    isEnd = isEndRounded || progress >= 1;\n    if (isBeginningRounded) progress = 0;\n    if (isEndRounded) progress = 1;\n  }\n  if (params.loop) {\n    const firstSlideIndex = swiper.getSlideIndexByData(0);\n    const lastSlideIndex = swiper.getSlideIndexByData(swiper.slides.length - 1);\n    const firstSlideTranslate = swiper.slidesGrid[firstSlideIndex];\n    const lastSlideTranslate = swiper.slidesGrid[lastSlideIndex];\n    const translateMax = swiper.slidesGrid[swiper.slidesGrid.length - 1];\n    const translateAbs = Math.abs(translate);\n    if (translateAbs >= firstSlideTranslate) {\n      progressLoop = (translateAbs - firstSlideTranslate) / translateMax;\n    } else {\n      progressLoop = (translateAbs + translateMax - lastSlideTranslate) / translateMax;\n    }\n    if (progressLoop > 1) progressLoop -= 1;\n  }\n  Object.assign(swiper, {\n    progress,\n    progressLoop,\n    isBeginning,\n    isEnd\n  });\n  if (params.watchSlidesProgress || params.centeredSlides && params.autoHeight) swiper.updateSlidesProgress(translate);\n  if (isBeginning && !wasBeginning) {\n    swiper.emit('reachBeginning toEdge');\n  }\n  if (isEnd && !wasEnd) {\n    swiper.emit('reachEnd toEdge');\n  }\n  if (wasBeginning && !isBeginning || wasEnd && !isEnd) {\n    swiper.emit('fromEdge');\n  }\n  swiper.emit('progress', progress);\n}","import { elementStyle } from '../../shared/utils.js';\nexport default function updateSize() {\n  const swiper = this;\n  let width;\n  let height;\n  const el = swiper.el;\n  if (typeof swiper.params.width !== 'undefined' && swiper.params.width !== null) {\n    width = swiper.params.width;\n  } else {\n    width = el.clientWidth;\n  }\n  if (typeof swiper.params.height !== 'undefined' && swiper.params.height !== null) {\n    height = swiper.params.height;\n  } else {\n    height = el.clientHeight;\n  }\n  if (width === 0 && swiper.isHorizontal() || height === 0 && swiper.isVertical()) {\n    return;\n  }\n\n  // Subtract paddings\n  width = width - parseInt(elementStyle(el, 'padding-left') || 0, 10) - parseInt(elementStyle(el, 'padding-right') || 0, 10);\n  height = height - parseInt(elementStyle(el, 'padding-top') || 0, 10) - parseInt(elementStyle(el, 'padding-bottom') || 0, 10);\n  if (Number.isNaN(width)) width = 0;\n  if (Number.isNaN(height)) height = 0;\n  Object.assign(swiper, {\n    width,\n    height,\n    size: swiper.isHorizontal() ? width : height\n  });\n}","import { elementChildren, elementOuterSize, elementStyle, setCSSProperty } from '../../shared/utils.js';\nexport default function updateSlides() {\n  const swiper = this;\n  function getDirectionLabel(property) {\n    if (swiper.isHorizontal()) {\n      return property;\n    }\n    // prettier-ignore\n    return {\n      'width': 'height',\n      'margin-top': 'margin-left',\n      'margin-bottom ': 'margin-right',\n      'margin-left': 'margin-top',\n      'margin-right': 'margin-bottom',\n      'padding-left': 'padding-top',\n      'padding-right': 'padding-bottom',\n      'marginRight': 'marginBottom'\n    }[property];\n  }\n  function getDirectionPropertyValue(node, label) {\n    return parseFloat(node.getPropertyValue(getDirectionLabel(label)) || 0);\n  }\n  const params = swiper.params;\n  const {\n    wrapperEl,\n    slidesEl,\n    size: swiperSize,\n    rtlTranslate: rtl,\n    wrongRTL\n  } = swiper;\n  const isVirtual = swiper.virtual && params.virtual.enabled;\n  const previousSlidesLength = isVirtual ? swiper.virtual.slides.length : swiper.slides.length;\n  const slides = elementChildren(slidesEl, `.${swiper.params.slideClass}, swiper-slide`);\n  const slidesLength = isVirtual ? swiper.virtual.slides.length : slides.length;\n  let snapGrid = [];\n  const slidesGrid = [];\n  const slidesSizesGrid = [];\n  let offsetBefore = params.slidesOffsetBefore;\n  if (typeof offsetBefore === 'function') {\n    offsetBefore = params.slidesOffsetBefore.call(swiper);\n  }\n  let offsetAfter = params.slidesOffsetAfter;\n  if (typeof offsetAfter === 'function') {\n    offsetAfter = params.slidesOffsetAfter.call(swiper);\n  }\n  const previousSnapGridLength = swiper.snapGrid.length;\n  const previousSlidesGridLength = swiper.slidesGrid.length;\n  let spaceBetween = params.spaceBetween;\n  let slidePosition = -offsetBefore;\n  let prevSlideSize = 0;\n  let index = 0;\n  if (typeof swiperSize === 'undefined') {\n    return;\n  }\n  if (typeof spaceBetween === 'string' && spaceBetween.indexOf('%') >= 0) {\n    spaceBetween = parseFloat(spaceBetween.replace('%', '')) / 100 * swiperSize;\n  }\n  swiper.virtualSize = -spaceBetween;\n\n  // reset margins\n  slides.forEach(slideEl => {\n    if (rtl) {\n      slideEl.style.marginLeft = '';\n    } else {\n      slideEl.style.marginRight = '';\n    }\n    slideEl.style.marginBottom = '';\n    slideEl.style.marginTop = '';\n  });\n\n  // reset cssMode offsets\n  if (params.centeredSlides && params.cssMode) {\n    setCSSProperty(wrapperEl, '--swiper-centered-offset-before', '');\n    setCSSProperty(wrapperEl, '--swiper-centered-offset-after', '');\n  }\n  const gridEnabled = params.grid && params.grid.rows > 1 && swiper.grid;\n  if (gridEnabled) {\n    swiper.grid.initSlides(slidesLength);\n  }\n\n  // Calc slides\n  let slideSize;\n  const shouldResetSlideSize = params.slidesPerView === 'auto' && params.breakpoints && Object.keys(params.breakpoints).filter(key => {\n    return typeof params.breakpoints[key].slidesPerView !== 'undefined';\n  }).length > 0;\n  for (let i = 0; i < slidesLength; i += 1) {\n    slideSize = 0;\n    let slide;\n    if (slides[i]) slide = slides[i];\n    if (gridEnabled) {\n      swiper.grid.updateSlide(i, slide, slidesLength, getDirectionLabel);\n    }\n    if (slides[i] && elementStyle(slide, 'display') === 'none') continue; // eslint-disable-line\n\n    if (params.slidesPerView === 'auto') {\n      if (shouldResetSlideSize) {\n        slides[i].style[getDirectionLabel('width')] = ``;\n      }\n      const slideStyles = getComputedStyle(slide);\n      const currentTransform = slide.style.transform;\n      const currentWebKitTransform = slide.style.webkitTransform;\n      if (currentTransform) {\n        slide.style.transform = 'none';\n      }\n      if (currentWebKitTransform) {\n        slide.style.webkitTransform = 'none';\n      }\n      if (params.roundLengths) {\n        slideSize = swiper.isHorizontal() ? elementOuterSize(slide, 'width', true) : elementOuterSize(slide, 'height', true);\n      } else {\n        // eslint-disable-next-line\n        const width = getDirectionPropertyValue(slideStyles, 'width');\n        const paddingLeft = getDirectionPropertyValue(slideStyles, 'padding-left');\n        const paddingRight = getDirectionPropertyValue(slideStyles, 'padding-right');\n        const marginLeft = getDirectionPropertyValue(slideStyles, 'margin-left');\n        const marginRight = getDirectionPropertyValue(slideStyles, 'margin-right');\n        const boxSizing = slideStyles.getPropertyValue('box-sizing');\n        if (boxSizing && boxSizing === 'border-box') {\n          slideSize = width + marginLeft + marginRight;\n        } else {\n          const {\n            clientWidth,\n            offsetWidth\n          } = slide;\n          slideSize = width + paddingLeft + paddingRight + marginLeft + marginRight + (offsetWidth - clientWidth);\n        }\n      }\n      if (currentTransform) {\n        slide.style.transform = currentTransform;\n      }\n      if (currentWebKitTransform) {\n        slide.style.webkitTransform = currentWebKitTransform;\n      }\n      if (params.roundLengths) slideSize = Math.floor(slideSize);\n    } else {\n      slideSize = (swiperSize - (params.slidesPerView - 1) * spaceBetween) / params.slidesPerView;\n      if (params.roundLengths) slideSize = Math.floor(slideSize);\n      if (slides[i]) {\n        slides[i].style[getDirectionLabel('width')] = `${slideSize}px`;\n      }\n    }\n    if (slides[i]) {\n      slides[i].swiperSlideSize = slideSize;\n    }\n    slidesSizesGrid.push(slideSize);\n    if (params.centeredSlides) {\n      slidePosition = slidePosition + slideSize / 2 + prevSlideSize / 2 + spaceBetween;\n      if (prevSlideSize === 0 && i !== 0) slidePosition = slidePosition - swiperSize / 2 - spaceBetween;\n      if (i === 0) slidePosition = slidePosition - swiperSize / 2 - spaceBetween;\n      if (Math.abs(slidePosition) < 1 / 1000) slidePosition = 0;\n      if (params.roundLengths) slidePosition = Math.floor(slidePosition);\n      if (index % params.slidesPerGroup === 0) snapGrid.push(slidePosition);\n      slidesGrid.push(slidePosition);\n    } else {\n      if (params.roundLengths) slidePosition = Math.floor(slidePosition);\n      if ((index - Math.min(swiper.params.slidesPerGroupSkip, index)) % swiper.params.slidesPerGroup === 0) snapGrid.push(slidePosition);\n      slidesGrid.push(slidePosition);\n      slidePosition = slidePosition + slideSize + spaceBetween;\n    }\n    swiper.virtualSize += slideSize + spaceBetween;\n    prevSlideSize = slideSize;\n    index += 1;\n  }\n  swiper.virtualSize = Math.max(swiper.virtualSize, swiperSize) + offsetAfter;\n  if (rtl && wrongRTL && (params.effect === 'slide' || params.effect === 'coverflow')) {\n    wrapperEl.style.width = `${swiper.virtualSize + params.spaceBetween}px`;\n  }\n  if (params.setWrapperSize) {\n    wrapperEl.style[getDirectionLabel('width')] = `${swiper.virtualSize + params.spaceBetween}px`;\n  }\n  if (gridEnabled) {\n    swiper.grid.updateWrapperSize(slideSize, snapGrid, getDirectionLabel);\n  }\n\n  // Remove last grid elements depending on width\n  if (!params.centeredSlides) {\n    const newSlidesGrid = [];\n    for (let i = 0; i < snapGrid.length; i += 1) {\n      let slidesGridItem = snapGrid[i];\n      if (params.roundLengths) slidesGridItem = Math.floor(slidesGridItem);\n      if (snapGrid[i] <= swiper.virtualSize - swiperSize) {\n        newSlidesGrid.push(slidesGridItem);\n      }\n    }\n    snapGrid = newSlidesGrid;\n    if (Math.floor(swiper.virtualSize - swiperSize) - Math.floor(snapGrid[snapGrid.length - 1]) > 1) {\n      snapGrid.push(swiper.virtualSize - swiperSize);\n    }\n  }\n  if (isVirtual && params.loop) {\n    const size = slidesSizesGrid[0] + spaceBetween;\n    if (params.slidesPerGroup > 1) {\n      const groups = Math.ceil((swiper.virtual.slidesBefore + swiper.virtual.slidesAfter) / params.slidesPerGroup);\n      const groupSize = size * params.slidesPerGroup;\n      for (let i = 0; i < groups; i += 1) {\n        snapGrid.push(snapGrid[snapGrid.length - 1] + groupSize);\n      }\n    }\n    for (let i = 0; i < swiper.virtual.slidesBefore + swiper.virtual.slidesAfter; i += 1) {\n      if (params.slidesPerGroup === 1) {\n        snapGrid.push(snapGrid[snapGrid.length - 1] + size);\n      }\n      slidesGrid.push(slidesGrid[slidesGrid.length - 1] + size);\n      swiper.virtualSize += size;\n    }\n  }\n  if (snapGrid.length === 0) snapGrid = [0];\n  if (params.spaceBetween !== 0) {\n    const key = swiper.isHorizontal() && rtl ? 'marginLeft' : getDirectionLabel('marginRight');\n    slides.filter((_, slideIndex) => {\n      if (!params.cssMode || params.loop) return true;\n      if (slideIndex === slides.length - 1) {\n        return false;\n      }\n      return true;\n    }).forEach(slideEl => {\n      slideEl.style[key] = `${spaceBetween}px`;\n    });\n  }\n  if (params.centeredSlides && params.centeredSlidesBounds) {\n    let allSlidesSize = 0;\n    slidesSizesGrid.forEach(slideSizeValue => {\n      allSlidesSize += slideSizeValue + (params.spaceBetween ? params.spaceBetween : 0);\n    });\n    allSlidesSize -= params.spaceBetween;\n    const maxSnap = allSlidesSize - swiperSize;\n    snapGrid = snapGrid.map(snap => {\n      if (snap < 0) return -offsetBefore;\n      if (snap > maxSnap) return maxSnap + offsetAfter;\n      return snap;\n    });\n  }\n  if (params.centerInsufficientSlides) {\n    let allSlidesSize = 0;\n    slidesSizesGrid.forEach(slideSizeValue => {\n      allSlidesSize += slideSizeValue + (params.spaceBetween ? params.spaceBetween : 0);\n    });\n    allSlidesSize -= params.spaceBetween;\n    if (allSlidesSize < swiperSize) {\n      const allSlidesOffset = (swiperSize - allSlidesSize) / 2;\n      snapGrid.forEach((snap, snapIndex) => {\n        snapGrid[snapIndex] = snap - allSlidesOffset;\n      });\n      slidesGrid.forEach((snap, snapIndex) => {\n        slidesGrid[snapIndex] = snap + allSlidesOffset;\n      });\n    }\n  }\n  Object.assign(swiper, {\n    slides,\n    snapGrid,\n    slidesGrid,\n    slidesSizesGrid\n  });\n  if (params.centeredSlides && params.cssMode && !params.centeredSlidesBounds) {\n    setCSSProperty(wrapperEl, '--swiper-centered-offset-before', `${-snapGrid[0]}px`);\n    setCSSProperty(wrapperEl, '--swiper-centered-offset-after', `${swiper.size / 2 - slidesSizesGrid[slidesSizesGrid.length - 1] / 2}px`);\n    const addToSnapGrid = -swiper.snapGrid[0];\n    const addToSlidesGrid = -swiper.slidesGrid[0];\n    swiper.snapGrid = swiper.snapGrid.map(v => v + addToSnapGrid);\n    swiper.slidesGrid = swiper.slidesGrid.map(v => v + addToSlidesGrid);\n  }\n  if (slidesLength !== previousSlidesLength) {\n    swiper.emit('slidesLengthChange');\n  }\n  if (snapGrid.length !== previousSnapGridLength) {\n    if (swiper.params.watchOverflow) swiper.checkOverflow();\n    swiper.emit('snapGridLengthChange');\n  }\n  if (slidesGrid.length !== previousSlidesGridLength) {\n    swiper.emit('slidesGridLengthChange');\n  }\n  if (params.watchSlidesProgress) {\n    swiper.updateSlidesOffset();\n  }\n  if (!isVirtual && !params.cssMode && (params.effect === 'slide' || params.effect === 'fade')) {\n    const backFaceHiddenClass = `${params.containerModifierClass}backface-hidden`;\n    const hasClassBackfaceClassAdded = swiper.el.classList.contains(backFaceHiddenClass);\n    if (slidesLength <= params.maxBackfaceHiddenSlides) {\n      if (!hasClassBackfaceClassAdded) swiper.el.classList.add(backFaceHiddenClass);\n    } else if (hasClassBackfaceClassAdded) {\n      swiper.el.classList.remove(backFaceHiddenClass);\n    }\n  }\n}","import { elementChildren, elementNextAll, elementPrevAll } from '../../shared/utils.js';\nexport default function updateSlidesClasses() {\n  const swiper = this;\n  const {\n    slides,\n    params,\n    slidesEl,\n    activeIndex\n  } = swiper;\n  const isVirtual = swiper.virtual && params.virtual.enabled;\n  const getFilteredSlide = selector => {\n    return elementChildren(slidesEl, `.${params.slideClass}${selector}, swiper-slide${selector}`)[0];\n  };\n  slides.forEach(slideEl => {\n    slideEl.classList.remove(params.slideActiveClass, params.slideNextClass, params.slidePrevClass);\n  });\n  let activeSlide;\n  if (isVirtual) {\n    if (params.loop) {\n      let slideIndex = activeIndex - swiper.virtual.slidesBefore;\n      if (slideIndex < 0) slideIndex = swiper.virtual.slides.length + slideIndex;\n      if (slideIndex >= swiper.virtual.slides.length) slideIndex -= swiper.virtual.slides.length;\n      activeSlide = getFilteredSlide(`[data-swiper-slide-index=\"${slideIndex}\"]`);\n    } else {\n      activeSlide = getFilteredSlide(`[data-swiper-slide-index=\"${activeIndex}\"]`);\n    }\n  } else {\n    activeSlide = slides[activeIndex];\n  }\n  if (activeSlide) {\n    // Active classes\n    activeSlide.classList.add(params.slideActiveClass);\n\n    // Next Slide\n    let nextSlide = elementNextAll(activeSlide, `.${params.slideClass}, swiper-slide`)[0];\n    if (params.loop && !nextSlide) {\n      nextSlide = slides[0];\n    }\n    if (nextSlide) {\n      nextSlide.classList.add(params.slideNextClass);\n    }\n    // Prev Slide\n    let prevSlide = elementPrevAll(activeSlide, `.${params.slideClass}, swiper-slide`)[0];\n    if (params.loop && !prevSlide === 0) {\n      prevSlide = slides[slides.length - 1];\n    }\n    if (prevSlide) {\n      prevSlide.classList.add(params.slidePrevClass);\n    }\n  }\n  swiper.emitSlidesClasses();\n}","export default function updateSlidesOffset() {\n  const swiper = this;\n  const slides = swiper.slides;\n  // eslint-disable-next-line\n  const minusOffset = swiper.isElement ? swiper.isHorizontal() ? swiper.wrapperEl.offsetLeft : swiper.wrapperEl.offsetTop : 0;\n  for (let i = 0; i < slides.length; i += 1) {\n    slides[i].swiperSlideOffset = (swiper.isHorizontal() ? slides[i].offsetLeft : slides[i].offsetTop) - minusOffset - swiper.cssOverflowAdjustment();\n  }\n}","export default function updateSlidesProgress(translate = this && this.translate || 0) {\n  const swiper = this;\n  const params = swiper.params;\n  const {\n    slides,\n    rtlTranslate: rtl,\n    snapGrid\n  } = swiper;\n  if (slides.length === 0) return;\n  if (typeof slides[0].swiperSlideOffset === 'undefined') swiper.updateSlidesOffset();\n  let offsetCenter = -translate;\n  if (rtl) offsetCenter = translate;\n\n  // Visible Slides\n  slides.forEach(slideEl => {\n    slideEl.classList.remove(params.slideVisibleClass);\n  });\n  swiper.visibleSlidesIndexes = [];\n  swiper.visibleSlides = [];\n  for (let i = 0; i < slides.length; i += 1) {\n    const slide = slides[i];\n    let slideOffset = slide.swiperSlideOffset;\n    if (params.cssMode && params.centeredSlides) {\n      slideOffset -= slides[0].swiperSlideOffset;\n    }\n    const slideProgress = (offsetCenter + (params.centeredSlides ? swiper.minTranslate() : 0) - slideOffset) / (slide.swiperSlideSize + params.spaceBetween);\n    const originalSlideProgress = (offsetCenter - snapGrid[0] + (params.centeredSlides ? swiper.minTranslate() : 0) - slideOffset) / (slide.swiperSlideSize + params.spaceBetween);\n    const slideBefore = -(offsetCenter - slideOffset);\n    const slideAfter = slideBefore + swiper.slidesSizesGrid[i];\n    const isVisible = slideBefore >= 0 && slideBefore < swiper.size - 1 || slideAfter > 1 && slideAfter <= swiper.size || slideBefore <= 0 && slideAfter >= swiper.size;\n    if (isVisible) {\n      swiper.visibleSlides.push(slide);\n      swiper.visibleSlidesIndexes.push(i);\n      slides[i].classList.add(params.slideVisibleClass);\n    }\n    slide.progress = rtl ? -slideProgress : slideProgress;\n    slide.originalProgress = rtl ? -originalSlideProgress : originalSlideProgress;\n  }\n}","import classesToSelector from '../../shared/classes-to-selector.js';\nimport { createElement, elementIndex } from '../../shared/utils.js';\nexport default function A11y({\n  swiper,\n  extendParams,\n  on\n}) {\n  extendParams({\n    a11y: {\n      enabled: true,\n      notificationClass: 'swiper-notification',\n      prevSlideMessage: 'Previous slide',\n      nextSlideMessage: 'Next slide',\n      firstSlideMessage: 'This is the first slide',\n      lastSlideMessage: 'This is the last slide',\n      paginationBulletMessage: 'Go to slide {{index}}',\n      slideLabelMessage: '{{index}} / {{slidesLength}}',\n      containerMessage: null,\n      containerRoleDescriptionMessage: null,\n      itemRoleDescriptionMessage: null,\n      slideRole: 'group',\n      id: null\n    }\n  });\n  swiper.a11y = {\n    clicked: false\n  };\n  let liveRegion = null;\n  function notify(message) {\n    const notification = liveRegion;\n    if (notification.length === 0) return;\n    notification.innerHTML = '';\n    notification.innerHTML = message;\n  }\n  const makeElementsArray = el => {\n    if (!Array.isArray(el)) el = [el].filter(e => !!e);\n    return el;\n  };\n  function getRandomNumber(size = 16) {\n    const randomChar = () => Math.round(16 * Math.random()).toString(16);\n    return 'x'.repeat(size).replace(/x/g, randomChar);\n  }\n  function makeElFocusable(el) {\n    el = makeElementsArray(el);\n    el.forEach(subEl => {\n      subEl.setAttribute('tabIndex', '0');\n    });\n  }\n  function makeElNotFocusable(el) {\n    el = makeElementsArray(el);\n    el.forEach(subEl => {\n      subEl.setAttribute('tabIndex', '-1');\n    });\n  }\n  function addElRole(el, role) {\n    el = makeElementsArray(el);\n    el.forEach(subEl => {\n      subEl.setAttribute('role', role);\n    });\n  }\n  function addElRoleDescription(el, description) {\n    el = makeElementsArray(el);\n    el.forEach(subEl => {\n      subEl.setAttribute('aria-roledescription', description);\n    });\n  }\n  function addElControls(el, controls) {\n    el = makeElementsArray(el);\n    el.forEach(subEl => {\n      subEl.setAttribute('aria-controls', controls);\n    });\n  }\n  function addElLabel(el, label) {\n    el = makeElementsArray(el);\n    el.forEach(subEl => {\n      subEl.setAttribute('aria-label', label);\n    });\n  }\n  function addElId(el, id) {\n    el = makeElementsArray(el);\n    el.forEach(subEl => {\n      subEl.setAttribute('id', id);\n    });\n  }\n  function addElLive(el, live) {\n    el = makeElementsArray(el);\n    el.forEach(subEl => {\n      subEl.setAttribute('aria-live', live);\n    });\n  }\n  function disableEl(el) {\n    el = makeElementsArray(el);\n    el.forEach(subEl => {\n      subEl.setAttribute('aria-disabled', true);\n    });\n  }\n  function enableEl(el) {\n    el = makeElementsArray(el);\n    el.forEach(subEl => {\n      subEl.setAttribute('aria-disabled', false);\n    });\n  }\n  function onEnterOrSpaceKey(e) {\n    if (e.keyCode !== 13 && e.keyCode !== 32) return;\n    const params = swiper.params.a11y;\n    const targetEl = e.target;\n    if (swiper.pagination && swiper.pagination.el && (targetEl === swiper.pagination.el || swiper.pagination.el.contains(e.target))) {\n      if (!e.target.matches(classesToSelector(swiper.params.pagination.bulletClass))) return;\n    }\n    if (swiper.navigation && swiper.navigation.nextEl && targetEl === swiper.navigation.nextEl) {\n      if (!(swiper.isEnd && !swiper.params.loop)) {\n        swiper.slideNext();\n      }\n      if (swiper.isEnd) {\n        notify(params.lastSlideMessage);\n      } else {\n        notify(params.nextSlideMessage);\n      }\n    }\n    if (swiper.navigation && swiper.navigation.prevEl && targetEl === swiper.navigation.prevEl) {\n      if (!(swiper.isBeginning && !swiper.params.loop)) {\n        swiper.slidePrev();\n      }\n      if (swiper.isBeginning) {\n        notify(params.firstSlideMessage);\n      } else {\n        notify(params.prevSlideMessage);\n      }\n    }\n    if (swiper.pagination && targetEl.matches(classesToSelector(swiper.params.pagination.bulletClass))) {\n      targetEl.click();\n    }\n  }\n  function updateNavigation() {\n    if (swiper.params.loop || swiper.params.rewind || !swiper.navigation) return;\n    const {\n      nextEl,\n      prevEl\n    } = swiper.navigation;\n    if (prevEl) {\n      if (swiper.isBeginning) {\n        disableEl(prevEl);\n        makeElNotFocusable(prevEl);\n      } else {\n        enableEl(prevEl);\n        makeElFocusable(prevEl);\n      }\n    }\n    if (nextEl) {\n      if (swiper.isEnd) {\n        disableEl(nextEl);\n        makeElNotFocusable(nextEl);\n      } else {\n        enableEl(nextEl);\n        makeElFocusable(nextEl);\n      }\n    }\n  }\n  function hasPagination() {\n    return swiper.pagination && swiper.pagination.bullets && swiper.pagination.bullets.length;\n  }\n  function hasClickablePagination() {\n    return hasPagination() && swiper.params.pagination.clickable;\n  }\n  function updatePagination() {\n    const params = swiper.params.a11y;\n    if (!hasPagination()) return;\n    swiper.pagination.bullets.forEach(bulletEl => {\n      if (swiper.params.pagination.clickable) {\n        makeElFocusable(bulletEl);\n        if (!swiper.params.pagination.renderBullet) {\n          addElRole(bulletEl, 'button');\n          addElLabel(bulletEl, params.paginationBulletMessage.replace(/\\{\\{index\\}\\}/, elementIndex(bulletEl) + 1));\n        }\n      }\n      if (bulletEl.matches(classesToSelector(swiper.params.pagination.bulletActiveClass))) {\n        bulletEl.setAttribute('aria-current', 'true');\n      } else {\n        bulletEl.removeAttribute('aria-current');\n      }\n    });\n  }\n  const initNavEl = (el, wrapperId, message) => {\n    makeElFocusable(el);\n    if (el.tagName !== 'BUTTON') {\n      addElRole(el, 'button');\n      el.addEventListener('keydown', onEnterOrSpaceKey);\n    }\n    addElLabel(el, message);\n    addElControls(el, wrapperId);\n  };\n  const handlePointerDown = () => {\n    swiper.a11y.clicked = true;\n  };\n  const handlePointerUp = () => {\n    requestAnimationFrame(() => {\n      requestAnimationFrame(() => {\n        if (!swiper.destroyed) {\n          swiper.a11y.clicked = false;\n        }\n      });\n    });\n  };\n  const handleFocus = e => {\n    if (swiper.a11y.clicked) return;\n    const slideEl = e.target.closest(`.${swiper.params.slideClass}, swiper-slide`);\n    if (!slideEl || !swiper.slides.includes(slideEl)) return;\n    const isActive = swiper.slides.indexOf(slideEl) === swiper.activeIndex;\n    const isVisible = swiper.params.watchSlidesProgress && swiper.visibleSlides && swiper.visibleSlides.includes(slideEl);\n    if (isActive || isVisible) return;\n    if (e.sourceCapabilities && e.sourceCapabilities.firesTouchEvents) return;\n    if (swiper.isHorizontal()) {\n      swiper.el.scrollLeft = 0;\n    } else {\n      swiper.el.scrollTop = 0;\n    }\n    swiper.slideTo(swiper.slides.indexOf(slideEl), 0);\n  };\n  const initSlides = () => {\n    const params = swiper.params.a11y;\n    if (params.itemRoleDescriptionMessage) {\n      addElRoleDescription(swiper.slides, params.itemRoleDescriptionMessage);\n    }\n    if (params.slideRole) {\n      addElRole(swiper.slides, params.slideRole);\n    }\n    const slidesLength = swiper.slides.length;\n    if (params.slideLabelMessage) {\n      swiper.slides.forEach((slideEl, index) => {\n        const slideIndex = swiper.params.loop ? parseInt(slideEl.getAttribute('data-swiper-slide-index'), 10) : index;\n        const ariaLabelMessage = params.slideLabelMessage.replace(/\\{\\{index\\}\\}/, slideIndex + 1).replace(/\\{\\{slidesLength\\}\\}/, slidesLength);\n        addElLabel(slideEl, ariaLabelMessage);\n      });\n    }\n  };\n  const init = () => {\n    const params = swiper.params.a11y;\n    swiper.el.append(liveRegion);\n\n    // Container\n    const containerEl = swiper.el;\n    if (params.containerRoleDescriptionMessage) {\n      addElRoleDescription(containerEl, params.containerRoleDescriptionMessage);\n    }\n    if (params.containerMessage) {\n      addElLabel(containerEl, params.containerMessage);\n    }\n\n    // Wrapper\n    const wrapperEl = swiper.wrapperEl;\n    const wrapperId = params.id || wrapperEl.getAttribute('id') || `swiper-wrapper-${getRandomNumber(16)}`;\n    const live = swiper.params.autoplay && swiper.params.autoplay.enabled ? 'off' : 'polite';\n    addElId(wrapperEl, wrapperId);\n    addElLive(wrapperEl, live);\n\n    // Slide\n    initSlides();\n\n    // Navigation\n    let {\n      nextEl,\n      prevEl\n    } = swiper.navigation ? swiper.navigation : {};\n    nextEl = makeElementsArray(nextEl);\n    prevEl = makeElementsArray(prevEl);\n    if (nextEl) {\n      nextEl.forEach(el => initNavEl(el, wrapperId, params.nextSlideMessage));\n    }\n    if (prevEl) {\n      prevEl.forEach(el => initNavEl(el, wrapperId, params.prevSlideMessage));\n    }\n\n    // Pagination\n    if (hasClickablePagination()) {\n      const paginationEl = Array.isArray(swiper.pagination.el) ? swiper.pagination.el : [swiper.pagination.el];\n      paginationEl.forEach(el => {\n        el.addEventListener('keydown', onEnterOrSpaceKey);\n      });\n    }\n\n    // Tab focus\n    swiper.el.addEventListener('focus', handleFocus, true);\n    swiper.el.addEventListener('pointerdown', handlePointerDown, true);\n    swiper.el.addEventListener('pointerup', handlePointerUp, true);\n  };\n  function destroy() {\n    if (liveRegion && liveRegion.length > 0) liveRegion.remove();\n    let {\n      nextEl,\n      prevEl\n    } = swiper.navigation ? swiper.navigation : {};\n    nextEl = makeElementsArray(nextEl);\n    prevEl = makeElementsArray(prevEl);\n    if (nextEl) {\n      nextEl.forEach(el => el.removeEventListener('keydown', onEnterOrSpaceKey));\n    }\n    if (prevEl) {\n      prevEl.forEach(el => el.removeEventListener('keydown', onEnterOrSpaceKey));\n    }\n\n    // Pagination\n    if (hasClickablePagination()) {\n      const paginationEl = Array.isArray(swiper.pagination.el) ? swiper.pagination.el : [swiper.pagination.el];\n      paginationEl.forEach(el => {\n        el.removeEventListener('keydown', onEnterOrSpaceKey);\n      });\n    }\n\n    // Tab focus\n    swiper.el.removeEventListener('focus', handleFocus, true);\n    swiper.el.removeEventListener('pointerdown', handlePointerDown, true);\n    swiper.el.removeEventListener('pointerup', handlePointerUp, true);\n  }\n  on('beforeInit', () => {\n    liveRegion = createElement('span', swiper.params.a11y.notificationClass);\n    liveRegion.setAttribute('aria-live', 'assertive');\n    liveRegion.setAttribute('aria-atomic', 'true');\n    if (swiper.isElement) {\n      liveRegion.setAttribute('slot', 'container-end');\n    }\n  });\n  on('afterInit', () => {\n    if (!swiper.params.a11y.enabled) return;\n    init();\n  });\n  on('slidesLengthChange snapGridLengthChange slidesGridLengthChange', () => {\n    if (!swiper.params.a11y.enabled) return;\n    initSlides();\n  });\n  on('fromEdge toEdge afterInit lock unlock', () => {\n    if (!swiper.params.a11y.enabled) return;\n    updateNavigation();\n  });\n  on('paginationUpdate', () => {\n    if (!swiper.params.a11y.enabled) return;\n    updatePagination();\n  });\n  on('destroy', () => {\n    if (!swiper.params.a11y.enabled) return;\n    destroy();\n  });\n}","/* eslint no-underscore-dangle: \"off\" */\n/* eslint no-use-before-define: \"off\" */\nimport { getDocument } from 'ssr-window';\nexport default function Autoplay({\n  swiper,\n  extendParams,\n  on,\n  emit,\n  params\n}) {\n  swiper.autoplay = {\n    running: false,\n    paused: false,\n    timeLeft: 0\n  };\n  extendParams({\n    autoplay: {\n      enabled: false,\n      delay: 3000,\n      waitForTransition: true,\n      disableOnInteraction: true,\n      stopOnLastSlide: false,\n      reverseDirection: false,\n      pauseOnMouseEnter: false\n    }\n  });\n  let timeout;\n  let raf;\n  let autoplayDelayTotal = params && params.autoplay ? params.autoplay.delay : 3000;\n  let autoplayDelayCurrent = params && params.autoplay ? params.autoplay.delay : 3000;\n  let autoplayTimeLeft;\n  let autoplayStartTime = new Date().getTime;\n  let wasPaused;\n  let isTouched;\n  let pausedByTouch;\n  let touchStartTimeout;\n  let slideChanged;\n  let pausedByInteraction;\n  function onTransitionEnd(e) {\n    if (!swiper || swiper.destroyed || !swiper.wrapperEl) return;\n    if (e.target !== swiper.wrapperEl) return;\n    swiper.wrapperEl.removeEventListener('transitionend', onTransitionEnd);\n    resume();\n  }\n  const calcTimeLeft = () => {\n    if (swiper.destroyed || !swiper.autoplay.running) return;\n    if (swiper.autoplay.paused) {\n      wasPaused = true;\n    } else if (wasPaused) {\n      autoplayDelayCurrent = autoplayTimeLeft;\n      wasPaused = false;\n    }\n    const timeLeft = swiper.autoplay.paused ? autoplayTimeLeft : autoplayStartTime + autoplayDelayCurrent - new Date().getTime();\n    swiper.autoplay.timeLeft = timeLeft;\n    emit('autoplayTimeLeft', timeLeft, timeLeft / autoplayDelayTotal);\n    raf = requestAnimationFrame(() => {\n      calcTimeLeft();\n    });\n  };\n  const getSlideDelay = () => {\n    let activeSlideEl;\n    if (swiper.virtual && swiper.params.virtual.enabled) {\n      activeSlideEl = swiper.slides.filter(slideEl => slideEl.classList.contains('swiper-slide-active'))[0];\n    } else {\n      activeSlideEl = swiper.slides[swiper.activeIndex];\n    }\n    if (!activeSlideEl) return undefined;\n    const currentSlideDelay = parseInt(activeSlideEl.getAttribute('data-swiper-autoplay'), 10);\n    return currentSlideDelay;\n  };\n  const run = delayForce => {\n    if (swiper.destroyed || !swiper.autoplay.running) return;\n    cancelAnimationFrame(raf);\n    calcTimeLeft();\n    let delay = typeof delayForce === 'undefined' ? swiper.params.autoplay.delay : delayForce;\n    autoplayDelayTotal = swiper.params.autoplay.delay;\n    autoplayDelayCurrent = swiper.params.autoplay.delay;\n    const currentSlideDelay = getSlideDelay();\n    if (!Number.isNaN(currentSlideDelay) && currentSlideDelay > 0 && typeof delayForce === 'undefined') {\n      delay = currentSlideDelay;\n      autoplayDelayTotal = currentSlideDelay;\n      autoplayDelayCurrent = currentSlideDelay;\n    }\n    autoplayTimeLeft = delay;\n    const speed = swiper.params.speed;\n    const proceed = () => {\n      if (!swiper || swiper.destroyed) return;\n      if (swiper.params.autoplay.reverseDirection) {\n        if (!swiper.isBeginning || swiper.params.loop || swiper.params.rewind) {\n          swiper.slidePrev(speed, true, true);\n          emit('autoplay');\n        } else if (!swiper.params.autoplay.stopOnLastSlide) {\n          swiper.slideTo(swiper.slides.length - 1, speed, true, true);\n          emit('autoplay');\n        }\n      } else {\n        if (!swiper.isEnd || swiper.params.loop || swiper.params.rewind) {\n          swiper.slideNext(speed, true, true);\n          emit('autoplay');\n        } else if (!swiper.params.autoplay.stopOnLastSlide) {\n          swiper.slideTo(0, speed, true, true);\n          emit('autoplay');\n        }\n      }\n      if (swiper.params.cssMode) {\n        autoplayStartTime = new Date().getTime();\n        requestAnimationFrame(() => {\n          run();\n        });\n      }\n    };\n    if (delay > 0) {\n      clearTimeout(timeout);\n      timeout = setTimeout(() => {\n        proceed();\n      }, delay);\n    } else {\n      requestAnimationFrame(() => {\n        proceed();\n      });\n    }\n\n    // eslint-disable-next-line\n    return delay;\n  };\n  const start = () => {\n    swiper.autoplay.running = true;\n    run();\n    emit('autoplayStart');\n  };\n  const stop = () => {\n    swiper.autoplay.running = false;\n    clearTimeout(timeout);\n    cancelAnimationFrame(raf);\n    emit('autoplayStop');\n  };\n  const pause = (internal, reset) => {\n    if (swiper.destroyed || !swiper.autoplay.running) return;\n    clearTimeout(timeout);\n    if (!internal) {\n      pausedByInteraction = true;\n    }\n    const proceed = () => {\n      emit('autoplayPause');\n      if (swiper.params.autoplay.waitForTransition) {\n        swiper.wrapperEl.addEventListener('transitionend', onTransitionEnd);\n      } else {\n        resume();\n      }\n    };\n    swiper.autoplay.paused = true;\n    if (reset) {\n      if (slideChanged) {\n        autoplayTimeLeft = swiper.params.autoplay.delay;\n      }\n      slideChanged = false;\n      proceed();\n      return;\n    }\n    const delay = autoplayTimeLeft || swiper.params.autoplay.delay;\n    autoplayTimeLeft = delay - (new Date().getTime() - autoplayStartTime);\n    if (swiper.isEnd && autoplayTimeLeft < 0 && !swiper.params.loop) return;\n    if (autoplayTimeLeft < 0) autoplayTimeLeft = 0;\n    proceed();\n  };\n  const resume = () => {\n    if (swiper.isEnd && autoplayTimeLeft < 0 && !swiper.params.loop || swiper.destroyed || !swiper.autoplay.running) return;\n    autoplayStartTime = new Date().getTime();\n    if (pausedByInteraction) {\n      pausedByInteraction = false;\n      run(autoplayTimeLeft);\n    } else {\n      run();\n    }\n    swiper.autoplay.paused = false;\n    emit('autoplayResume');\n  };\n  const onVisibilityChange = () => {\n    if (swiper.destroyed || !swiper.autoplay.running) return;\n    const document = getDocument();\n    if (document.visibilityState === 'hidden') {\n      pausedByInteraction = true;\n      pause(true);\n    }\n    if (document.visibilityState === 'visible') {\n      resume();\n    }\n  };\n  const onPointerEnter = e => {\n    if (e.pointerType !== 'mouse') return;\n    pausedByInteraction = true;\n    pause(true);\n  };\n  const onPointerLeave = e => {\n    if (e.pointerType !== 'mouse') return;\n    if (swiper.autoplay.paused) {\n      resume();\n    }\n  };\n  const attachMouseEvents = () => {\n    if (swiper.params.autoplay.pauseOnMouseEnter) {\n      swiper.el.addEventListener('pointerenter', onPointerEnter);\n      swiper.el.addEventListener('pointerleave', onPointerLeave);\n    }\n  };\n  const detachMouseEvents = () => {\n    swiper.el.removeEventListener('pointerenter', onPointerEnter);\n    swiper.el.removeEventListener('pointerleave', onPointerLeave);\n  };\n  const attachDocumentEvents = () => {\n    const document = getDocument();\n    document.addEventListener('visibilitychange', onVisibilityChange);\n  };\n  const detachDocumentEvents = () => {\n    const document = getDocument();\n    document.removeEventListener('visibilitychange', onVisibilityChange);\n  };\n  on('init', () => {\n    if (swiper.params.autoplay.enabled) {\n      attachMouseEvents();\n      attachDocumentEvents();\n      autoplayStartTime = new Date().getTime();\n      start();\n    }\n  });\n  on('destroy', () => {\n    detachMouseEvents();\n    detachDocumentEvents();\n    if (swiper.autoplay.running) {\n      stop();\n    }\n  });\n  on('beforeTransitionStart', (_s, speed, internal) => {\n    if (swiper.destroyed || !swiper.autoplay.running) return;\n    if (internal || !swiper.params.autoplay.disableOnInteraction) {\n      pause(true, true);\n    } else {\n      stop();\n    }\n  });\n  on('sliderFirstMove', () => {\n    if (swiper.destroyed || !swiper.autoplay.running) return;\n    if (swiper.params.autoplay.disableOnInteraction) {\n      stop();\n      return;\n    }\n    isTouched = true;\n    pausedByTouch = false;\n    pausedByInteraction = false;\n    touchStartTimeout = setTimeout(() => {\n      pausedByInteraction = true;\n      pausedByTouch = true;\n      pause(true);\n    }, 200);\n  });\n  on('touchEnd', () => {\n    if (swiper.destroyed || !swiper.autoplay.running || !isTouched) return;\n    clearTimeout(touchStartTimeout);\n    clearTimeout(timeout);\n    if (swiper.params.autoplay.disableOnInteraction) {\n      pausedByTouch = false;\n      isTouched = false;\n      return;\n    }\n    if (pausedByTouch && swiper.params.cssMode) resume();\n    pausedByTouch = false;\n    isTouched = false;\n  });\n  on('slideChange', () => {\n    if (swiper.destroyed || !swiper.autoplay.running) return;\n    slideChanged = true;\n  });\n  Object.assign(swiper.autoplay, {\n    start,\n    stop,\n    pause,\n    resume\n  });\n}","/* eslint no-bitwise: [\"error\", { \"allow\": [\">>\"] }] */\nimport { elementTransitionEnd, nextTick } from '../../shared/utils.js';\nexport default function Controller({\n  swiper,\n  extendParams,\n  on\n}) {\n  extendParams({\n    controller: {\n      control: undefined,\n      inverse: false,\n      by: 'slide' // or 'container'\n    }\n  });\n\n  swiper.controller = {\n    control: undefined\n  };\n  function LinearSpline(x, y) {\n    const binarySearch = function search() {\n      let maxIndex;\n      let minIndex;\n      let guess;\n      return (array, val) => {\n        minIndex = -1;\n        maxIndex = array.length;\n        while (maxIndex - minIndex > 1) {\n          guess = maxIndex + minIndex >> 1;\n          if (array[guess] <= val) {\n            minIndex = guess;\n          } else {\n            maxIndex = guess;\n          }\n        }\n        return maxIndex;\n      };\n    }();\n    this.x = x;\n    this.y = y;\n    this.lastIndex = x.length - 1;\n    // Given an x value (x2), return the expected y2 value:\n    // (x1,y1) is the known point before given value,\n    // (x3,y3) is the known point after given value.\n    let i1;\n    let i3;\n    this.interpolate = function interpolate(x2) {\n      if (!x2) return 0;\n\n      // Get the indexes of x1 and x3 (the array indexes before and after given x2):\n      i3 = binarySearch(this.x, x2);\n      i1 = i3 - 1;\n\n      // We have our indexes i1 & i3, so we can calculate already:\n      // y2 := ((x2−x1) × (y3−y1)) ÷ (x3−x1) + y1\n      return (x2 - this.x[i1]) * (this.y[i3] - this.y[i1]) / (this.x[i3] - this.x[i1]) + this.y[i1];\n    };\n    return this;\n  }\n  function getInterpolateFunction(c) {\n    swiper.controller.spline = swiper.params.loop ? new LinearSpline(swiper.slidesGrid, c.slidesGrid) : new LinearSpline(swiper.snapGrid, c.snapGrid);\n  }\n  function setTranslate(_t, byController) {\n    const controlled = swiper.controller.control;\n    let multiplier;\n    let controlledTranslate;\n    const Swiper = swiper.constructor;\n    function setControlledTranslate(c) {\n      if (c.destroyed) return;\n\n      // this will create an Interpolate function based on the snapGrids\n      // x is the Grid of the scrolled scroller and y will be the controlled scroller\n      // it makes sense to create this only once and recall it for the interpolation\n      // the function does a lot of value caching for performance\n      const translate = swiper.rtlTranslate ? -swiper.translate : swiper.translate;\n      if (swiper.params.controller.by === 'slide') {\n        getInterpolateFunction(c);\n        // i am not sure why the values have to be multiplicated this way, tried to invert the snapGrid\n        // but it did not work out\n        controlledTranslate = -swiper.controller.spline.interpolate(-translate);\n      }\n      if (!controlledTranslate || swiper.params.controller.by === 'container') {\n        multiplier = (c.maxTranslate() - c.minTranslate()) / (swiper.maxTranslate() - swiper.minTranslate());\n        if (Number.isNaN(multiplier) || !Number.isFinite(multiplier)) {\n          multiplier = 1;\n        }\n        controlledTranslate = (translate - swiper.minTranslate()) * multiplier + c.minTranslate();\n      }\n      if (swiper.params.controller.inverse) {\n        controlledTranslate = c.maxTranslate() - controlledTranslate;\n      }\n      c.updateProgress(controlledTranslate);\n      c.setTranslate(controlledTranslate, swiper);\n      c.updateActiveIndex();\n      c.updateSlidesClasses();\n    }\n    if (Array.isArray(controlled)) {\n      for (let i = 0; i < controlled.length; i += 1) {\n        if (controlled[i] !== byController && controlled[i] instanceof Swiper) {\n          setControlledTranslate(controlled[i]);\n        }\n      }\n    } else if (controlled instanceof Swiper && byController !== controlled) {\n      setControlledTranslate(controlled);\n    }\n  }\n  function setTransition(duration, byController) {\n    const Swiper = swiper.constructor;\n    const controlled = swiper.controller.control;\n    let i;\n    function setControlledTransition(c) {\n      if (c.destroyed) return;\n      c.setTransition(duration, swiper);\n      if (duration !== 0) {\n        c.transitionStart();\n        if (c.params.autoHeight) {\n          nextTick(() => {\n            c.updateAutoHeight();\n          });\n        }\n        elementTransitionEnd(c.wrapperEl, () => {\n          if (!controlled) return;\n          c.transitionEnd();\n        });\n      }\n    }\n    if (Array.isArray(controlled)) {\n      for (i = 0; i < controlled.length; i += 1) {\n        if (controlled[i] !== byController && controlled[i] instanceof Swiper) {\n          setControlledTransition(controlled[i]);\n        }\n      }\n    } else if (controlled instanceof Swiper && byController !== controlled) {\n      setControlledTransition(controlled);\n    }\n  }\n  function removeSpline() {\n    if (!swiper.controller.control) return;\n    if (swiper.controller.spline) {\n      swiper.controller.spline = undefined;\n      delete swiper.controller.spline;\n    }\n  }\n  on('beforeInit', () => {\n    if (typeof window !== 'undefined' && (\n    // eslint-disable-line\n    typeof swiper.params.controller.control === 'string' || swiper.params.controller.control instanceof HTMLElement)) {\n      const controlElement = document.querySelector(swiper.params.controller.control);\n      if (controlElement && controlElement.swiper) {\n        swiper.controller.control = controlElement.swiper;\n      } else if (controlElement) {\n        const onControllerSwiper = e => {\n          swiper.controller.control = e.detail[0];\n          swiper.update();\n          controlElement.removeEventListener('init', onControllerSwiper);\n        };\n        controlElement.addEventListener('init', onControllerSwiper);\n      }\n      return;\n    }\n    swiper.controller.control = swiper.params.controller.control;\n  });\n  on('update', () => {\n    removeSpline();\n  });\n  on('resize', () => {\n    removeSpline();\n  });\n  on('observerUpdate', () => {\n    removeSpline();\n  });\n  on('setTranslate', (_s, translate, byController) => {\n    if (!swiper.controller.control || swiper.controller.control.destroyed) return;\n    swiper.controller.setTranslate(translate, byController);\n  });\n  on('setTransition', (_s, duration, byController) => {\n    if (!swiper.controller.control || swiper.controller.control.destroyed) return;\n    swiper.controller.setTransition(duration, byController);\n  });\n  Object.assign(swiper.controller, {\n    setTranslate,\n    setTransition\n  });\n}","import createShadow from '../../shared/create-shadow.js';\nimport effectInit from '../../shared/effect-init.js';\nimport effectTarget from '../../shared/effect-target.js';\nimport effectVirtualTransitionEnd from '../../shared/effect-virtual-transition-end.js';\nimport { getSlideTransformEl } from '../../shared/utils.js';\nexport default function EffectCards({\n  swiper,\n  extendParams,\n  on\n}) {\n  extendParams({\n    cardsEffect: {\n      slideShadows: true,\n      rotate: true,\n      perSlideRotate: 2,\n      perSlideOffset: 8\n    }\n  });\n  const setTranslate = () => {\n    const {\n      slides,\n      activeIndex\n    } = swiper;\n    const params = swiper.params.cardsEffect;\n    const {\n      startTranslate,\n      isTouched\n    } = swiper.touchEventsData;\n    const currentTranslate = swiper.translate;\n    for (let i = 0; i < slides.length; i += 1) {\n      const slideEl = slides[i];\n      const slideProgress = slideEl.progress;\n      const progress = Math.min(Math.max(slideProgress, -4), 4);\n      let offset = slideEl.swiperSlideOffset;\n      if (swiper.params.centeredSlides && !swiper.params.cssMode) {\n        swiper.wrapperEl.style.transform = `translateX(${swiper.minTranslate()}px)`;\n      }\n      if (swiper.params.centeredSlides && swiper.params.cssMode) {\n        offset -= slides[0].swiperSlideOffset;\n      }\n      let tX = swiper.params.cssMode ? -offset - swiper.translate : -offset;\n      let tY = 0;\n      const tZ = -100 * Math.abs(progress);\n      let scale = 1;\n      let rotate = -params.perSlideRotate * progress;\n      let tXAdd = params.perSlideOffset - Math.abs(progress) * 0.75;\n      const slideIndex = swiper.virtual && swiper.params.virtual.enabled ? swiper.virtual.from + i : i;\n      const isSwipeToNext = (slideIndex === activeIndex || slideIndex === activeIndex - 1) && progress > 0 && progress < 1 && (isTouched || swiper.params.cssMode) && currentTranslate < startTranslate;\n      const isSwipeToPrev = (slideIndex === activeIndex || slideIndex === activeIndex + 1) && progress < 0 && progress > -1 && (isTouched || swiper.params.cssMode) && currentTranslate > startTranslate;\n      if (isSwipeToNext || isSwipeToPrev) {\n        const subProgress = (1 - Math.abs((Math.abs(progress) - 0.5) / 0.5)) ** 0.5;\n        rotate += -28 * progress * subProgress;\n        scale += -0.5 * subProgress;\n        tXAdd += 96 * subProgress;\n        tY = `${-25 * subProgress * Math.abs(progress)}%`;\n      }\n      if (progress < 0) {\n        // next\n        tX = `calc(${tX}px + (${tXAdd * Math.abs(progress)}%))`;\n      } else if (progress > 0) {\n        // prev\n        tX = `calc(${tX}px + (-${tXAdd * Math.abs(progress)}%))`;\n      } else {\n        tX = `${tX}px`;\n      }\n      if (!swiper.isHorizontal()) {\n        const prevY = tY;\n        tY = tX;\n        tX = prevY;\n      }\n      const scaleString = progress < 0 ? `${1 + (1 - scale) * progress}` : `${1 - (1 - scale) * progress}`;\n      const transform = `\n        translate3d(${tX}, ${tY}, ${tZ}px)\n        rotateZ(${params.rotate ? rotate : 0}deg)\n        scale(${scaleString})\n      `;\n      if (params.slideShadows) {\n        // Set shadows\n        let shadowEl = slideEl.querySelector('.swiper-slide-shadow');\n        if (!shadowEl) {\n          shadowEl = createShadow(params, slideEl);\n        }\n        if (shadowEl) shadowEl.style.opacity = Math.min(Math.max((Math.abs(progress) - 0.5) / 0.5, 0), 1);\n      }\n      slideEl.style.zIndex = -Math.abs(Math.round(slideProgress)) + slides.length;\n      const targetEl = effectTarget(params, slideEl);\n      targetEl.style.transform = transform;\n    }\n  };\n  const setTransition = duration => {\n    const transformElements = swiper.slides.map(slideEl => getSlideTransformEl(slideEl));\n    transformElements.forEach(el => {\n      el.style.transitionDuration = `${duration}ms`;\n      el.querySelectorAll('.swiper-slide-shadow').forEach(shadowEl => {\n        shadowEl.style.transitionDuration = `${duration}ms`;\n      });\n    });\n    effectVirtualTransitionEnd({\n      swiper,\n      duration,\n      transformElements\n    });\n  };\n  effectInit({\n    effect: 'cards',\n    swiper,\n    on,\n    setTranslate,\n    setTransition,\n    perspective: () => true,\n    overwriteParams: () => ({\n      watchSlidesProgress: true,\n      virtualTranslate: !swiper.params.cssMode\n    })\n  });\n}","import createShadow from '../../shared/create-shadow.js';\nimport effectInit from '../../shared/effect-init.js';\nimport effectTarget from '../../shared/effect-target.js';\nimport { getSlideTransformEl } from '../../shared/utils.js';\nexport default function EffectCoverflow({\n  swiper,\n  extendParams,\n  on\n}) {\n  extendParams({\n    coverflowEffect: {\n      rotate: 50,\n      stretch: 0,\n      depth: 100,\n      scale: 1,\n      modifier: 1,\n      slideShadows: true\n    }\n  });\n  const setTranslate = () => {\n    const {\n      width: swiperWidth,\n      height: swiperHeight,\n      slides,\n      slidesSizesGrid\n    } = swiper;\n    const params = swiper.params.coverflowEffect;\n    const isHorizontal = swiper.isHorizontal();\n    const transform = swiper.translate;\n    const center = isHorizontal ? -transform + swiperWidth / 2 : -transform + swiperHeight / 2;\n    const rotate = isHorizontal ? params.rotate : -params.rotate;\n    const translate = params.depth;\n    // Each slide offset from center\n    for (let i = 0, length = slides.length; i < length; i += 1) {\n      const slideEl = slides[i];\n      const slideSize = slidesSizesGrid[i];\n      const slideOffset = slideEl.swiperSlideOffset;\n      const centerOffset = (center - slideOffset - slideSize / 2) / slideSize;\n      const offsetMultiplier = typeof params.modifier === 'function' ? params.modifier(centerOffset) : centerOffset * params.modifier;\n      let rotateY = isHorizontal ? rotate * offsetMultiplier : 0;\n      let rotateX = isHorizontal ? 0 : rotate * offsetMultiplier;\n      // var rotateZ = 0\n      let translateZ = -translate * Math.abs(offsetMultiplier);\n      let stretch = params.stretch;\n      // Allow percentage to make a relative stretch for responsive sliders\n      if (typeof stretch === 'string' && stretch.indexOf('%') !== -1) {\n        stretch = parseFloat(params.stretch) / 100 * slideSize;\n      }\n      let translateY = isHorizontal ? 0 : stretch * offsetMultiplier;\n      let translateX = isHorizontal ? stretch * offsetMultiplier : 0;\n      let scale = 1 - (1 - params.scale) * Math.abs(offsetMultiplier);\n\n      // Fix for ultra small values\n      if (Math.abs(translateX) < 0.001) translateX = 0;\n      if (Math.abs(translateY) < 0.001) translateY = 0;\n      if (Math.abs(translateZ) < 0.001) translateZ = 0;\n      if (Math.abs(rotateY) < 0.001) rotateY = 0;\n      if (Math.abs(rotateX) < 0.001) rotateX = 0;\n      if (Math.abs(scale) < 0.001) scale = 0;\n      const slideTransform = `translate3d(${translateX}px,${translateY}px,${translateZ}px)  rotateX(${rotateX}deg) rotateY(${rotateY}deg) scale(${scale})`;\n      const targetEl = effectTarget(params, slideEl);\n      targetEl.style.transform = slideTransform;\n      slideEl.style.zIndex = -Math.abs(Math.round(offsetMultiplier)) + 1;\n      if (params.slideShadows) {\n        // Set shadows\n        let shadowBeforeEl = isHorizontal ? slideEl.querySelector('.swiper-slide-shadow-left') : slideEl.querySelector('.swiper-slide-shadow-top');\n        let shadowAfterEl = isHorizontal ? slideEl.querySelector('.swiper-slide-shadow-right') : slideEl.querySelector('.swiper-slide-shadow-bottom');\n        if (!shadowBeforeEl) {\n          shadowBeforeEl = createShadow(params, slideEl, isHorizontal ? 'left' : 'top');\n        }\n        if (!shadowAfterEl) {\n          shadowAfterEl = createShadow(params, slideEl, isHorizontal ? 'right' : 'bottom');\n        }\n        if (shadowBeforeEl) shadowBeforeEl.style.opacity = offsetMultiplier > 0 ? offsetMultiplier : 0;\n        if (shadowAfterEl) shadowAfterEl.style.opacity = -offsetMultiplier > 0 ? -offsetMultiplier : 0;\n      }\n    }\n  };\n  const setTransition = duration => {\n    const transformElements = swiper.slides.map(slideEl => getSlideTransformEl(slideEl));\n    transformElements.forEach(el => {\n      el.style.transitionDuration = `${duration}ms`;\n      el.querySelectorAll('.swiper-slide-shadow-top, .swiper-slide-shadow-right, .swiper-slide-shadow-bottom, .swiper-slide-shadow-left').forEach(shadowEl => {\n        shadowEl.style.transitionDuration = `${duration}ms`;\n      });\n    });\n  };\n  effectInit({\n    effect: 'coverflow',\n    swiper,\n    on,\n    setTranslate,\n    setTransition,\n    perspective: () => true,\n    overwriteParams: () => ({\n      watchSlidesProgress: true\n    })\n  });\n}","import createShadow from '../../shared/create-shadow.js';\nimport effectInit from '../../shared/effect-init.js';\nimport effectTarget from '../../shared/effect-target.js';\nimport effectVirtualTransitionEnd from '../../shared/effect-virtual-transition-end.js';\nimport { getSlideTransformEl } from '../../shared/utils.js';\nexport default function EffectCreative({\n  swiper,\n  extendParams,\n  on\n}) {\n  extendParams({\n    creativeEffect: {\n      limitProgress: 1,\n      shadowPerProgress: false,\n      progressMultiplier: 1,\n      perspective: true,\n      prev: {\n        translate: [0, 0, 0],\n        rotate: [0, 0, 0],\n        opacity: 1,\n        scale: 1\n      },\n      next: {\n        translate: [0, 0, 0],\n        rotate: [0, 0, 0],\n        opacity: 1,\n        scale: 1\n      }\n    }\n  });\n  const getTranslateValue = value => {\n    if (typeof value === 'string') return value;\n    return `${value}px`;\n  };\n  const setTranslate = () => {\n    const {\n      slides,\n      wrapperEl,\n      slidesSizesGrid\n    } = swiper;\n    const params = swiper.params.creativeEffect;\n    const {\n      progressMultiplier: multiplier\n    } = params;\n    const isCenteredSlides = swiper.params.centeredSlides;\n    if (isCenteredSlides) {\n      const margin = slidesSizesGrid[0] / 2 - swiper.params.slidesOffsetBefore || 0;\n      wrapperEl.style.transform = `translateX(calc(50% - ${margin}px))`;\n    }\n    for (let i = 0; i < slides.length; i += 1) {\n      const slideEl = slides[i];\n      const slideProgress = slideEl.progress;\n      const progress = Math.min(Math.max(slideEl.progress, -params.limitProgress), params.limitProgress);\n      let originalProgress = progress;\n      if (!isCenteredSlides) {\n        originalProgress = Math.min(Math.max(slideEl.originalProgress, -params.limitProgress), params.limitProgress);\n      }\n      const offset = slideEl.swiperSlideOffset;\n      const t = [swiper.params.cssMode ? -offset - swiper.translate : -offset, 0, 0];\n      const r = [0, 0, 0];\n      let custom = false;\n      if (!swiper.isHorizontal()) {\n        t[1] = t[0];\n        t[0] = 0;\n      }\n      let data = {\n        translate: [0, 0, 0],\n        rotate: [0, 0, 0],\n        scale: 1,\n        opacity: 1\n      };\n      if (progress < 0) {\n        data = params.next;\n        custom = true;\n      } else if (progress > 0) {\n        data = params.prev;\n        custom = true;\n      }\n      // set translate\n      t.forEach((value, index) => {\n        t[index] = `calc(${value}px + (${getTranslateValue(data.translate[index])} * ${Math.abs(progress * multiplier)}))`;\n      });\n      // set rotates\n      r.forEach((value, index) => {\n        r[index] = data.rotate[index] * Math.abs(progress * multiplier);\n      });\n      slideEl.style.zIndex = -Math.abs(Math.round(slideProgress)) + slides.length;\n      const translateString = t.join(', ');\n      const rotateString = `rotateX(${r[0]}deg) rotateY(${r[1]}deg) rotateZ(${r[2]}deg)`;\n      const scaleString = originalProgress < 0 ? `scale(${1 + (1 - data.scale) * originalProgress * multiplier})` : `scale(${1 - (1 - data.scale) * originalProgress * multiplier})`;\n      const opacityString = originalProgress < 0 ? 1 + (1 - data.opacity) * originalProgress * multiplier : 1 - (1 - data.opacity) * originalProgress * multiplier;\n      const transform = `translate3d(${translateString}) ${rotateString} ${scaleString}`;\n\n      // Set shadows\n      if (custom && data.shadow || !custom) {\n        let shadowEl = slideEl.querySelector('.swiper-slide-shadow');\n        if (!shadowEl && data.shadow) {\n          shadowEl = createShadow(params, slideEl);\n        }\n        if (shadowEl) {\n          const shadowOpacity = params.shadowPerProgress ? progress * (1 / params.limitProgress) : progress;\n          shadowEl.style.opacity = Math.min(Math.max(Math.abs(shadowOpacity), 0), 1);\n        }\n      }\n      const targetEl = effectTarget(params, slideEl);\n      targetEl.style.transform = transform;\n      targetEl.style.opacity = opacityString;\n      if (data.origin) {\n        targetEl.style.transformOrigin = data.origin;\n      }\n    }\n  };\n  const setTransition = duration => {\n    const transformElements = swiper.slides.map(slideEl => getSlideTransformEl(slideEl));\n    transformElements.forEach(el => {\n      el.style.transitionDuration = `${duration}ms`;\n      el.querySelectorAll('.swiper-slide-shadow').forEach(shadowEl => {\n        shadowEl.style.transitionDuration = `${duration}ms`;\n      });\n    });\n    effectVirtualTransitionEnd({\n      swiper,\n      duration,\n      transformElements,\n      allSlides: true\n    });\n  };\n  effectInit({\n    effect: 'creative',\n    swiper,\n    on,\n    setTranslate,\n    setTransition,\n    perspective: () => swiper.params.creativeEffect.perspective,\n    overwriteParams: () => ({\n      watchSlidesProgress: true,\n      virtualTranslate: !swiper.params.cssMode\n    })\n  });\n}","import effectInit from '../../shared/effect-init.js';\nimport { createElement } from '../../shared/utils.js';\nexport default function EffectCube({\n  swiper,\n  extendParams,\n  on\n}) {\n  extendParams({\n    cubeEffect: {\n      slideShadows: true,\n      shadow: true,\n      shadowOffset: 20,\n      shadowScale: 0.94\n    }\n  });\n  const createSlideShadows = (slideEl, progress, isHorizontal) => {\n    let shadowBefore = isHorizontal ? slideEl.querySelector('.swiper-slide-shadow-left') : slideEl.querySelector('.swiper-slide-shadow-top');\n    let shadowAfter = isHorizontal ? slideEl.querySelector('.swiper-slide-shadow-right') : slideEl.querySelector('.swiper-slide-shadow-bottom');\n    if (!shadowBefore) {\n      shadowBefore = createElement('div', `swiper-slide-shadow-${isHorizontal ? 'left' : 'top'}`);\n      slideEl.append(shadowBefore);\n    }\n    if (!shadowAfter) {\n      shadowAfter = createElement('div', `swiper-slide-shadow-${isHorizontal ? 'right' : 'bottom'}`);\n      slideEl.append(shadowAfter);\n    }\n    if (shadowBefore) shadowBefore.style.opacity = Math.max(-progress, 0);\n    if (shadowAfter) shadowAfter.style.opacity = Math.max(progress, 0);\n  };\n  const recreateShadows = () => {\n    // create new ones\n    const isHorizontal = swiper.isHorizontal();\n    swiper.slides.forEach(slideEl => {\n      const progress = Math.max(Math.min(slideEl.progress, 1), -1);\n      createSlideShadows(slideEl, progress, isHorizontal);\n    });\n  };\n  const setTranslate = () => {\n    const {\n      el,\n      wrapperEl,\n      slides,\n      width: swiperWidth,\n      height: swiperHeight,\n      rtlTranslate: rtl,\n      size: swiperSize,\n      browser\n    } = swiper;\n    const params = swiper.params.cubeEffect;\n    const isHorizontal = swiper.isHorizontal();\n    const isVirtual = swiper.virtual && swiper.params.virtual.enabled;\n    let wrapperRotate = 0;\n    let cubeShadowEl;\n    if (params.shadow) {\n      if (isHorizontal) {\n        cubeShadowEl = swiper.slidesEl.querySelector('.swiper-cube-shadow');\n        if (!cubeShadowEl) {\n          cubeShadowEl = createElement('div', 'swiper-cube-shadow');\n          swiper.slidesEl.append(cubeShadowEl);\n        }\n        cubeShadowEl.style.height = `${swiperWidth}px`;\n      } else {\n        cubeShadowEl = el.querySelector('.swiper-cube-shadow');\n        if (!cubeShadowEl) {\n          cubeShadowEl = createElement('div', 'swiper-cube-shadow');\n          el.append(cubeShadowEl);\n        }\n      }\n    }\n    for (let i = 0; i < slides.length; i += 1) {\n      const slideEl = slides[i];\n      let slideIndex = i;\n      if (isVirtual) {\n        slideIndex = parseInt(slideEl.getAttribute('data-swiper-slide-index'), 10);\n      }\n      let slideAngle = slideIndex * 90;\n      let round = Math.floor(slideAngle / 360);\n      if (rtl) {\n        slideAngle = -slideAngle;\n        round = Math.floor(-slideAngle / 360);\n      }\n      const progress = Math.max(Math.min(slideEl.progress, 1), -1);\n      let tx = 0;\n      let ty = 0;\n      let tz = 0;\n      if (slideIndex % 4 === 0) {\n        tx = -round * 4 * swiperSize;\n        tz = 0;\n      } else if ((slideIndex - 1) % 4 === 0) {\n        tx = 0;\n        tz = -round * 4 * swiperSize;\n      } else if ((slideIndex - 2) % 4 === 0) {\n        tx = swiperSize + round * 4 * swiperSize;\n        tz = swiperSize;\n      } else if ((slideIndex - 3) % 4 === 0) {\n        tx = -swiperSize;\n        tz = 3 * swiperSize + swiperSize * 4 * round;\n      }\n      if (rtl) {\n        tx = -tx;\n      }\n      if (!isHorizontal) {\n        ty = tx;\n        tx = 0;\n      }\n      const transform = `rotateX(${isHorizontal ? 0 : -slideAngle}deg) rotateY(${isHorizontal ? slideAngle : 0}deg) translate3d(${tx}px, ${ty}px, ${tz}px)`;\n      if (progress <= 1 && progress > -1) {\n        wrapperRotate = slideIndex * 90 + progress * 90;\n        if (rtl) wrapperRotate = -slideIndex * 90 - progress * 90;\n      }\n      slideEl.style.transform = transform;\n      if (params.slideShadows) {\n        createSlideShadows(slideEl, progress, isHorizontal);\n      }\n    }\n    wrapperEl.style.transformOrigin = `50% 50% -${swiperSize / 2}px`;\n    wrapperEl.style['-webkit-transform-origin'] = `50% 50% -${swiperSize / 2}px`;\n    if (params.shadow) {\n      if (isHorizontal) {\n        cubeShadowEl.style.transform = `translate3d(0px, ${swiperWidth / 2 + params.shadowOffset}px, ${-swiperWidth / 2}px) rotateX(90deg) rotateZ(0deg) scale(${params.shadowScale})`;\n      } else {\n        const shadowAngle = Math.abs(wrapperRotate) - Math.floor(Math.abs(wrapperRotate) / 90) * 90;\n        const multiplier = 1.5 - (Math.sin(shadowAngle * 2 * Math.PI / 360) / 2 + Math.cos(shadowAngle * 2 * Math.PI / 360) / 2);\n        const scale1 = params.shadowScale;\n        const scale2 = params.shadowScale / multiplier;\n        const offset = params.shadowOffset;\n        cubeShadowEl.style.transform = `scale3d(${scale1}, 1, ${scale2}) translate3d(0px, ${swiperHeight / 2 + offset}px, ${-swiperHeight / 2 / scale2}px) rotateX(-90deg)`;\n      }\n    }\n    const zFactor = (browser.isSafari || browser.isWebView) && browser.needPerspectiveFix ? -swiperSize / 2 : 0;\n    wrapperEl.style.transform = `translate3d(0px,0,${zFactor}px) rotateX(${swiper.isHorizontal() ? 0 : wrapperRotate}deg) rotateY(${swiper.isHorizontal() ? -wrapperRotate : 0}deg)`;\n    wrapperEl.style.setProperty('--swiper-cube-translate-z', `${zFactor}px`);\n  };\n  const setTransition = duration => {\n    const {\n      el,\n      slides\n    } = swiper;\n    slides.forEach(slideEl => {\n      slideEl.style.transitionDuration = `${duration}ms`;\n      slideEl.querySelectorAll('.swiper-slide-shadow-top, .swiper-slide-shadow-right, .swiper-slide-shadow-bottom, .swiper-slide-shadow-left').forEach(subEl => {\n        subEl.style.transitionDuration = `${duration}ms`;\n      });\n    });\n    if (swiper.params.cubeEffect.shadow && !swiper.isHorizontal()) {\n      const shadowEl = el.querySelector('.swiper-cube-shadow');\n      if (shadowEl) shadowEl.style.transitionDuration = `${duration}ms`;\n    }\n  };\n  effectInit({\n    effect: 'cube',\n    swiper,\n    on,\n    setTranslate,\n    setTransition,\n    recreateShadows,\n    getEffectParams: () => swiper.params.cubeEffect,\n    perspective: () => true,\n    overwriteParams: () => ({\n      slidesPerView: 1,\n      slidesPerGroup: 1,\n      watchSlidesProgress: true,\n      resistanceRatio: 0,\n      spaceBetween: 0,\n      centeredSlides: false,\n      virtualTranslate: true\n    })\n  });\n}","import effectInit from '../../shared/effect-init.js';\nimport effectTarget from '../../shared/effect-target.js';\nimport effectVirtualTransitionEnd from '../../shared/effect-virtual-transition-end.js';\nimport { getSlideTransformEl } from '../../shared/utils.js';\nexport default function EffectFade({\n  swiper,\n  extendParams,\n  on\n}) {\n  extendParams({\n    fadeEffect: {\n      crossFade: false\n    }\n  });\n  const setTranslate = () => {\n    const {\n      slides\n    } = swiper;\n    const params = swiper.params.fadeEffect;\n    for (let i = 0; i < slides.length; i += 1) {\n      const slideEl = swiper.slides[i];\n      const offset = slideEl.swiperSlideOffset;\n      let tx = -offset;\n      if (!swiper.params.virtualTranslate) tx -= swiper.translate;\n      let ty = 0;\n      if (!swiper.isHorizontal()) {\n        ty = tx;\n        tx = 0;\n      }\n      const slideOpacity = swiper.params.fadeEffect.crossFade ? Math.max(1 - Math.abs(slideEl.progress), 0) : 1 + Math.min(Math.max(slideEl.progress, -1), 0);\n      const targetEl = effectTarget(params, slideEl);\n      targetEl.style.opacity = slideOpacity;\n      targetEl.style.transform = `translate3d(${tx}px, ${ty}px, 0px)`;\n    }\n  };\n  const setTransition = duration => {\n    const transformElements = swiper.slides.map(slideEl => getSlideTransformEl(slideEl));\n    transformElements.forEach(el => {\n      el.style.transitionDuration = `${duration}ms`;\n    });\n    effectVirtualTransitionEnd({\n      swiper,\n      duration,\n      transformElements,\n      allSlides: true\n    });\n  };\n  effectInit({\n    effect: 'fade',\n    swiper,\n    on,\n    setTranslate,\n    setTransition,\n    overwriteParams: () => ({\n      slidesPerView: 1,\n      slidesPerGroup: 1,\n      watchSlidesProgress: true,\n      spaceBetween: 0,\n      virtualTranslate: !swiper.params.cssMode\n    })\n  });\n}","import createShadow from '../../shared/create-shadow.js';\nimport effectInit from '../../shared/effect-init.js';\nimport effectTarget from '../../shared/effect-target.js';\nimport effectVirtualTransitionEnd from '../../shared/effect-virtual-transition-end.js';\nimport { getSlideTransformEl } from '../../shared/utils.js';\nexport default function EffectFlip({\n  swiper,\n  extendParams,\n  on\n}) {\n  extendParams({\n    flipEffect: {\n      slideShadows: true,\n      limitRotation: true\n    }\n  });\n  const createSlideShadows = (slideEl, progress, params) => {\n    let shadowBefore = swiper.isHorizontal() ? slideEl.querySelector('.swiper-slide-shadow-left') : slideEl.querySelector('.swiper-slide-shadow-top');\n    let shadowAfter = swiper.isHorizontal() ? slideEl.querySelector('.swiper-slide-shadow-right') : slideEl.querySelector('.swiper-slide-shadow-bottom');\n    if (!shadowBefore) {\n      shadowBefore = createShadow(params, slideEl, swiper.isHorizontal() ? 'left' : 'top');\n    }\n    if (!shadowAfter) {\n      shadowAfter = createShadow(params, slideEl, swiper.isHorizontal() ? 'right' : 'bottom');\n    }\n    if (shadowBefore) shadowBefore.style.opacity = Math.max(-progress, 0);\n    if (shadowAfter) shadowAfter.style.opacity = Math.max(progress, 0);\n  };\n  const recreateShadows = () => {\n    // Set shadows\n    const params = swiper.params.flipEffect;\n    swiper.slides.forEach(slideEl => {\n      let progress = slideEl.progress;\n      if (swiper.params.flipEffect.limitRotation) {\n        progress = Math.max(Math.min(slideEl.progress, 1), -1);\n      }\n      createSlideShadows(slideEl, progress, params);\n    });\n  };\n  const setTranslate = () => {\n    const {\n      slides,\n      rtlTranslate: rtl\n    } = swiper;\n    const params = swiper.params.flipEffect;\n    for (let i = 0; i < slides.length; i += 1) {\n      const slideEl = slides[i];\n      let progress = slideEl.progress;\n      if (swiper.params.flipEffect.limitRotation) {\n        progress = Math.max(Math.min(slideEl.progress, 1), -1);\n      }\n      const offset = slideEl.swiperSlideOffset;\n      const rotate = -180 * progress;\n      let rotateY = rotate;\n      let rotateX = 0;\n      let tx = swiper.params.cssMode ? -offset - swiper.translate : -offset;\n      let ty = 0;\n      if (!swiper.isHorizontal()) {\n        ty = tx;\n        tx = 0;\n        rotateX = -rotateY;\n        rotateY = 0;\n      } else if (rtl) {\n        rotateY = -rotateY;\n      }\n      slideEl.style.zIndex = -Math.abs(Math.round(progress)) + slides.length;\n      if (params.slideShadows) {\n        createSlideShadows(slideEl, progress, params);\n      }\n      const transform = `translate3d(${tx}px, ${ty}px, 0px) rotateX(${rotateX}deg) rotateY(${rotateY}deg)`;\n      const targetEl = effectTarget(params, slideEl);\n      targetEl.style.transform = transform;\n    }\n  };\n  const setTransition = duration => {\n    const transformElements = swiper.slides.map(slideEl => getSlideTransformEl(slideEl));\n    transformElements.forEach(el => {\n      el.style.transitionDuration = `${duration}ms`;\n      el.querySelectorAll('.swiper-slide-shadow-top, .swiper-slide-shadow-right, .swiper-slide-shadow-bottom, .swiper-slide-shadow-left').forEach(shadowEl => {\n        shadowEl.style.transitionDuration = `${duration}ms`;\n      });\n    });\n    effectVirtualTransitionEnd({\n      swiper,\n      duration,\n      transformElements\n    });\n  };\n  effectInit({\n    effect: 'flip',\n    swiper,\n    on,\n    setTranslate,\n    setTransition,\n    recreateShadows,\n    getEffectParams: () => swiper.params.flipEffect,\n    perspective: () => true,\n    overwriteParams: () => ({\n      slidesPerView: 1,\n      slidesPerGroup: 1,\n      watchSlidesProgress: true,\n      spaceBetween: 0,\n      virtualTranslate: !swiper.params.cssMode\n    })\n  });\n}","import { elementTransitionEnd, now } from '../../shared/utils.js';\nexport default function freeMode({\n  swiper,\n  extendParams,\n  emit,\n  once\n}) {\n  extendParams({\n    freeMode: {\n      enabled: false,\n      momentum: true,\n      momentumRatio: 1,\n      momentumBounce: true,\n      momentumBounceRatio: 1,\n      momentumVelocityRatio: 1,\n      sticky: false,\n      minimumVelocity: 0.02\n    }\n  });\n  function onTouchStart() {\n    const translate = swiper.getTranslate();\n    swiper.setTranslate(translate);\n    swiper.setTransition(0);\n    swiper.touchEventsData.velocities.length = 0;\n    swiper.freeMode.onTouchEnd({\n      currentPos: swiper.rtl ? swiper.translate : -swiper.translate\n    });\n  }\n  function onTouchMove() {\n    const {\n      touchEventsData: data,\n      touches\n    } = swiper;\n    // Velocity\n    if (data.velocities.length === 0) {\n      data.velocities.push({\n        position: touches[swiper.isHorizontal() ? 'startX' : 'startY'],\n        time: data.touchStartTime\n      });\n    }\n    data.velocities.push({\n      position: touches[swiper.isHorizontal() ? 'currentX' : 'currentY'],\n      time: now()\n    });\n  }\n  function onTouchEnd({\n    currentPos\n  }) {\n    const {\n      params,\n      wrapperEl,\n      rtlTranslate: rtl,\n      snapGrid,\n      touchEventsData: data\n    } = swiper;\n    // Time diff\n    const touchEndTime = now();\n    const timeDiff = touchEndTime - data.touchStartTime;\n    if (currentPos < -swiper.minTranslate()) {\n      swiper.slideTo(swiper.activeIndex);\n      return;\n    }\n    if (currentPos > -swiper.maxTranslate()) {\n      if (swiper.slides.length < snapGrid.length) {\n        swiper.slideTo(snapGrid.length - 1);\n      } else {\n        swiper.slideTo(swiper.slides.length - 1);\n      }\n      return;\n    }\n    if (params.freeMode.momentum) {\n      if (data.velocities.length > 1) {\n        const lastMoveEvent = data.velocities.pop();\n        const velocityEvent = data.velocities.pop();\n        const distance = lastMoveEvent.position - velocityEvent.position;\n        const time = lastMoveEvent.time - velocityEvent.time;\n        swiper.velocity = distance / time;\n        swiper.velocity /= 2;\n        if (Math.abs(swiper.velocity) < params.freeMode.minimumVelocity) {\n          swiper.velocity = 0;\n        }\n        // this implies that the user stopped moving a finger then released.\n        // There would be no events with distance zero, so the last event is stale.\n        if (time > 150 || now() - lastMoveEvent.time > 300) {\n          swiper.velocity = 0;\n        }\n      } else {\n        swiper.velocity = 0;\n      }\n      swiper.velocity *= params.freeMode.momentumVelocityRatio;\n      data.velocities.length = 0;\n      let momentumDuration = 1000 * params.freeMode.momentumRatio;\n      const momentumDistance = swiper.velocity * momentumDuration;\n      let newPosition = swiper.translate + momentumDistance;\n      if (rtl) newPosition = -newPosition;\n      let doBounce = false;\n      let afterBouncePosition;\n      const bounceAmount = Math.abs(swiper.velocity) * 20 * params.freeMode.momentumBounceRatio;\n      let needsLoopFix;\n      if (newPosition < swiper.maxTranslate()) {\n        if (params.freeMode.momentumBounce) {\n          if (newPosition + swiper.maxTranslate() < -bounceAmount) {\n            newPosition = swiper.maxTranslate() - bounceAmount;\n          }\n          afterBouncePosition = swiper.maxTranslate();\n          doBounce = true;\n          data.allowMomentumBounce = true;\n        } else {\n          newPosition = swiper.maxTranslate();\n        }\n        if (params.loop && params.centeredSlides) needsLoopFix = true;\n      } else if (newPosition > swiper.minTranslate()) {\n        if (params.freeMode.momentumBounce) {\n          if (newPosition - swiper.minTranslate() > bounceAmount) {\n            newPosition = swiper.minTranslate() + bounceAmount;\n          }\n          afterBouncePosition = swiper.minTranslate();\n          doBounce = true;\n          data.allowMomentumBounce = true;\n        } else {\n          newPosition = swiper.minTranslate();\n        }\n        if (params.loop && params.centeredSlides) needsLoopFix = true;\n      } else if (params.freeMode.sticky) {\n        let nextSlide;\n        for (let j = 0; j < snapGrid.length; j += 1) {\n          if (snapGrid[j] > -newPosition) {\n            nextSlide = j;\n            break;\n          }\n        }\n        if (Math.abs(snapGrid[nextSlide] - newPosition) < Math.abs(snapGrid[nextSlide - 1] - newPosition) || swiper.swipeDirection === 'next') {\n          newPosition = snapGrid[nextSlide];\n        } else {\n          newPosition = snapGrid[nextSlide - 1];\n        }\n        newPosition = -newPosition;\n      }\n      if (needsLoopFix) {\n        once('transitionEnd', () => {\n          swiper.loopFix();\n        });\n      }\n      // Fix duration\n      if (swiper.velocity !== 0) {\n        if (rtl) {\n          momentumDuration = Math.abs((-newPosition - swiper.translate) / swiper.velocity);\n        } else {\n          momentumDuration = Math.abs((newPosition - swiper.translate) / swiper.velocity);\n        }\n        if (params.freeMode.sticky) {\n          // If freeMode.sticky is active and the user ends a swipe with a slow-velocity\n          // event, then durations can be 20+ seconds to slide one (or zero!) slides.\n          // It's easy to see this when simulating touch with mouse events. To fix this,\n          // limit single-slide swipes to the default slide duration. This also has the\n          // nice side effect of matching slide speed if the user stopped moving before\n          // lifting finger or mouse vs. moving slowly before lifting the finger/mouse.\n          // For faster swipes, also apply limits (albeit higher ones).\n          const moveDistance = Math.abs((rtl ? -newPosition : newPosition) - swiper.translate);\n          const currentSlideSize = swiper.slidesSizesGrid[swiper.activeIndex];\n          if (moveDistance < currentSlideSize) {\n            momentumDuration = params.speed;\n          } else if (moveDistance < 2 * currentSlideSize) {\n            momentumDuration = params.speed * 1.5;\n          } else {\n            momentumDuration = params.speed * 2.5;\n          }\n        }\n      } else if (params.freeMode.sticky) {\n        swiper.slideToClosest();\n        return;\n      }\n      if (params.freeMode.momentumBounce && doBounce) {\n        swiper.updateProgress(afterBouncePosition);\n        swiper.setTransition(momentumDuration);\n        swiper.setTranslate(newPosition);\n        swiper.transitionStart(true, swiper.swipeDirection);\n        swiper.animating = true;\n        elementTransitionEnd(wrapperEl, () => {\n          if (!swiper || swiper.destroyed || !data.allowMomentumBounce) return;\n          emit('momentumBounce');\n          swiper.setTransition(params.speed);\n          setTimeout(() => {\n            swiper.setTranslate(afterBouncePosition);\n            elementTransitionEnd(wrapperEl, () => {\n              if (!swiper || swiper.destroyed) return;\n              swiper.transitionEnd();\n            });\n          }, 0);\n        });\n      } else if (swiper.velocity) {\n        emit('_freeModeNoMomentumRelease');\n        swiper.updateProgress(newPosition);\n        swiper.setTransition(momentumDuration);\n        swiper.setTranslate(newPosition);\n        swiper.transitionStart(true, swiper.swipeDirection);\n        if (!swiper.animating) {\n          swiper.animating = true;\n          elementTransitionEnd(wrapperEl, () => {\n            if (!swiper || swiper.destroyed) return;\n            swiper.transitionEnd();\n          });\n        }\n      } else {\n        swiper.updateProgress(newPosition);\n      }\n      swiper.updateActiveIndex();\n      swiper.updateSlidesClasses();\n    } else if (params.freeMode.sticky) {\n      swiper.slideToClosest();\n      return;\n    } else if (params.freeMode) {\n      emit('_freeModeNoMomentumRelease');\n    }\n    if (!params.freeMode.momentum || timeDiff >= params.longSwipesMs) {\n      swiper.updateProgress();\n      swiper.updateActiveIndex();\n      swiper.updateSlidesClasses();\n    }\n  }\n  Object.assign(swiper, {\n    freeMode: {\n      onTouchStart,\n      onTouchMove,\n      onTouchEnd\n    }\n  });\n}","export default function Grid({\n  swiper,\n  extendParams\n}) {\n  extendParams({\n    grid: {\n      rows: 1,\n      fill: 'column'\n    }\n  });\n  let slidesNumberEvenToRows;\n  let slidesPerRow;\n  let numFullColumns;\n  const initSlides = slidesLength => {\n    const {\n      slidesPerView\n    } = swiper.params;\n    const {\n      rows,\n      fill\n    } = swiper.params.grid;\n    slidesPerRow = slidesNumberEvenToRows / rows;\n    numFullColumns = Math.floor(slidesLength / rows);\n    if (Math.floor(slidesLength / rows) === slidesLength / rows) {\n      slidesNumberEvenToRows = slidesLength;\n    } else {\n      slidesNumberEvenToRows = Math.ceil(slidesLength / rows) * rows;\n    }\n    if (slidesPerView !== 'auto' && fill === 'row') {\n      slidesNumberEvenToRows = Math.max(slidesNumberEvenToRows, slidesPerView * rows);\n    }\n  };\n  const updateSlide = (i, slide, slidesLength, getDirectionLabel) => {\n    const {\n      slidesPerGroup,\n      spaceBetween\n    } = swiper.params;\n    const {\n      rows,\n      fill\n    } = swiper.params.grid;\n    // Set slides order\n    let newSlideOrderIndex;\n    let column;\n    let row;\n    if (fill === 'row' && slidesPerGroup > 1) {\n      const groupIndex = Math.floor(i / (slidesPerGroup * rows));\n      const slideIndexInGroup = i - rows * slidesPerGroup * groupIndex;\n      const columnsInGroup = groupIndex === 0 ? slidesPerGroup : Math.min(Math.ceil((slidesLength - groupIndex * rows * slidesPerGroup) / rows), slidesPerGroup);\n      row = Math.floor(slideIndexInGroup / columnsInGroup);\n      column = slideIndexInGroup - row * columnsInGroup + groupIndex * slidesPerGroup;\n      newSlideOrderIndex = column + row * slidesNumberEvenToRows / rows;\n      slide.style.order = newSlideOrderIndex;\n    } else if (fill === 'column') {\n      column = Math.floor(i / rows);\n      row = i - column * rows;\n      if (column > numFullColumns || column === numFullColumns && row === rows - 1) {\n        row += 1;\n        if (row >= rows) {\n          row = 0;\n          column += 1;\n        }\n      }\n    } else {\n      row = Math.floor(i / slidesPerRow);\n      column = i - row * slidesPerRow;\n    }\n    slide.style[getDirectionLabel('margin-top')] = row !== 0 ? spaceBetween && `${spaceBetween}px` : '';\n  };\n  const updateWrapperSize = (slideSize, snapGrid, getDirectionLabel) => {\n    const {\n      spaceBetween,\n      centeredSlides,\n      roundLengths\n    } = swiper.params;\n    const {\n      rows\n    } = swiper.params.grid;\n    swiper.virtualSize = (slideSize + spaceBetween) * slidesNumberEvenToRows;\n    swiper.virtualSize = Math.ceil(swiper.virtualSize / rows) - spaceBetween;\n    swiper.wrapperEl.style[getDirectionLabel('width')] = `${swiper.virtualSize + spaceBetween}px`;\n    if (centeredSlides) {\n      const newSlidesGrid = [];\n      for (let i = 0; i < snapGrid.length; i += 1) {\n        let slidesGridItem = snapGrid[i];\n        if (roundLengths) slidesGridItem = Math.floor(slidesGridItem);\n        if (snapGrid[i] < swiper.virtualSize + snapGrid[0]) newSlidesGrid.push(slidesGridItem);\n      }\n      snapGrid.splice(0, snapGrid.length);\n      snapGrid.push(...newSlidesGrid);\n    }\n  };\n  swiper.grid = {\n    initSlides,\n    updateSlide,\n    updateWrapperSize\n  };\n}","import { getWindow, getDocument } from 'ssr-window';\nimport { elementChildren } from '../../shared/utils.js';\nexport default function HashNavigation({\n  swiper,\n  extendParams,\n  emit,\n  on\n}) {\n  let initialized = false;\n  const document = getDocument();\n  const window = getWindow();\n  extendParams({\n    hashNavigation: {\n      enabled: false,\n      replaceState: false,\n      watchState: false,\n      getSlideIndex(_s, hash) {\n        if (swiper.virtual && swiper.params.virtual.enabled) {\n          const slideWithHash = swiper.slides.filter(slideEl => slideEl.getAttribute('data-hash') === hash)[0];\n          if (!slideWithHash) return 0;\n          const index = parseInt(slideWithHash.getAttribute('data-swiper-slide-index'), 10);\n          return index;\n        }\n        return swiper.getSlideIndex(elementChildren(swiper.slidesEl, `.${swiper.params.slideClass}[data-hash=\"${hash}\"], swiper-slide[data-hash=\"${hash}\"]`)[0]);\n      }\n    }\n  });\n  const onHashChange = () => {\n    emit('hashChange');\n    const newHash = document.location.hash.replace('#', '');\n    const activeSlideEl = swiper.slidesEl.querySelector(`[data-swiper-slide-index=\"${swiper.activeIndex}\"]`);\n    const activeSlideHash = activeSlideEl ? activeSlideEl.getAttribute('data-hash') : '';\n    if (newHash !== activeSlideHash) {\n      const newIndex = swiper.params.hashNavigation.getSlideIndex(swiper, newHash);\n      console.log(newIndex);\n      if (typeof newIndex === 'undefined') return;\n      swiper.slideTo(newIndex);\n    }\n  };\n  const setHash = () => {\n    if (!initialized || !swiper.params.hashNavigation.enabled) return;\n    const activeSlideEl = swiper.slidesEl.querySelector(`[data-swiper-slide-index=\"${swiper.activeIndex}\"]`);\n    const activeSlideHash = activeSlideEl ? activeSlideEl.getAttribute('data-hash') || activeSlideEl.getAttribute('data-history') : '';\n    if (swiper.params.hashNavigation.replaceState && window.history && window.history.replaceState) {\n      window.history.replaceState(null, null, `#${activeSlideHash}` || '');\n      emit('hashSet');\n    } else {\n      document.location.hash = activeSlideHash || '';\n      emit('hashSet');\n    }\n  };\n  const init = () => {\n    if (!swiper.params.hashNavigation.enabled || swiper.params.history && swiper.params.history.enabled) return;\n    initialized = true;\n    const hash = document.location.hash.replace('#', '');\n    if (hash) {\n      const speed = 0;\n      const index = swiper.params.hashNavigation.getSlideIndex(swiper, hash);\n      swiper.slideTo(index || 0, speed, swiper.params.runCallbacksOnInit, true);\n    }\n    if (swiper.params.hashNavigation.watchState) {\n      window.addEventListener('hashchange', onHashChange);\n    }\n  };\n  const destroy = () => {\n    if (swiper.params.hashNavigation.watchState) {\n      window.removeEventListener('hashchange', onHashChange);\n    }\n  };\n  on('init', () => {\n    if (swiper.params.hashNavigation.enabled) {\n      init();\n    }\n  });\n  on('destroy', () => {\n    if (swiper.params.hashNavigation.enabled) {\n      destroy();\n    }\n  });\n  on('transitionEnd _freeModeNoMomentumRelease', () => {\n    if (initialized) {\n      setHash();\n    }\n  });\n  on('slideChange', () => {\n    if (initialized && swiper.params.cssMode) {\n      setHash();\n    }\n  });\n}","import { getWindow } from 'ssr-window';\nexport default function History({\n  swiper,\n  extendParams,\n  on\n}) {\n  extendParams({\n    history: {\n      enabled: false,\n      root: '',\n      replaceState: false,\n      key: 'slides',\n      keepQuery: false\n    }\n  });\n  let initialized = false;\n  let paths = {};\n  const slugify = text => {\n    return text.toString().replace(/\\s+/g, '-').replace(/[^\\w-]+/g, '').replace(/--+/g, '-').replace(/^-+/, '').replace(/-+$/, '');\n  };\n  const getPathValues = urlOverride => {\n    const window = getWindow();\n    let location;\n    if (urlOverride) {\n      location = new URL(urlOverride);\n    } else {\n      location = window.location;\n    }\n    const pathArray = location.pathname.slice(1).split('/').filter(part => part !== '');\n    const total = pathArray.length;\n    const key = pathArray[total - 2];\n    const value = pathArray[total - 1];\n    return {\n      key,\n      value\n    };\n  };\n  const setHistory = (key, index) => {\n    const window = getWindow();\n    if (!initialized || !swiper.params.history.enabled) return;\n    let location;\n    if (swiper.params.url) {\n      location = new URL(swiper.params.url);\n    } else {\n      location = window.location;\n    }\n    const slide = swiper.slides[index];\n    let value = slugify(slide.getAttribute('data-history'));\n    if (swiper.params.history.root.length > 0) {\n      let root = swiper.params.history.root;\n      if (root[root.length - 1] === '/') root = root.slice(0, root.length - 1);\n      value = `${root}/${key ? `${key}/` : ''}${value}`;\n    } else if (!location.pathname.includes(key)) {\n      value = `${key ? `${key}/` : ''}${value}`;\n    }\n    if (swiper.params.history.keepQuery) {\n      value += location.search;\n    }\n    const currentState = window.history.state;\n    if (currentState && currentState.value === value) {\n      return;\n    }\n    if (swiper.params.history.replaceState) {\n      window.history.replaceState({\n        value\n      }, null, value);\n    } else {\n      window.history.pushState({\n        value\n      }, null, value);\n    }\n  };\n  const scrollToSlide = (speed, value, runCallbacks) => {\n    if (value) {\n      for (let i = 0, length = swiper.slides.length; i < length; i += 1) {\n        const slide = swiper.slides[i];\n        const slideHistory = slugify(slide.getAttribute('data-history'));\n        if (slideHistory === value) {\n          const index = swiper.getSlideIndex(slide);\n          swiper.slideTo(index, speed, runCallbacks);\n        }\n      }\n    } else {\n      swiper.slideTo(0, speed, runCallbacks);\n    }\n  };\n  const setHistoryPopState = () => {\n    paths = getPathValues(swiper.params.url);\n    scrollToSlide(swiper.params.speed, paths.value, false);\n  };\n  const init = () => {\n    const window = getWindow();\n    if (!swiper.params.history) return;\n    if (!window.history || !window.history.pushState) {\n      swiper.params.history.enabled = false;\n      swiper.params.hashNavigation.enabled = true;\n      return;\n    }\n    initialized = true;\n    paths = getPathValues(swiper.params.url);\n    if (!paths.key && !paths.value) {\n      if (!swiper.params.history.replaceState) {\n        window.addEventListener('popstate', setHistoryPopState);\n      }\n      return;\n    }\n    scrollToSlide(0, paths.value, swiper.params.runCallbacksOnInit);\n    if (!swiper.params.history.replaceState) {\n      window.addEventListener('popstate', setHistoryPopState);\n    }\n  };\n  const destroy = () => {\n    const window = getWindow();\n    if (!swiper.params.history.replaceState) {\n      window.removeEventListener('popstate', setHistoryPopState);\n    }\n  };\n  on('init', () => {\n    if (swiper.params.history.enabled) {\n      init();\n    }\n  });\n  on('destroy', () => {\n    if (swiper.params.history.enabled) {\n      destroy();\n    }\n  });\n  on('transitionEnd _freeModeNoMomentumRelease', () => {\n    if (initialized) {\n      setHistory(swiper.params.history.key, swiper.activeIndex);\n    }\n  });\n  on('slideChange', () => {\n    if (initialized && swiper.params.cssMode) {\n      setHistory(swiper.params.history.key, swiper.activeIndex);\n    }\n  });\n}","/* eslint-disable consistent-return */\nimport { getWindow, getDocument } from 'ssr-window';\nimport { elementOffset, elementParents } from '../../shared/utils.js';\nexport default function Keyboard({\n  swiper,\n  extendParams,\n  on,\n  emit\n}) {\n  const document = getDocument();\n  const window = getWindow();\n  swiper.keyboard = {\n    enabled: false\n  };\n  extendParams({\n    keyboard: {\n      enabled: false,\n      onlyInViewport: true,\n      pageUpDown: true\n    }\n  });\n  function handle(event) {\n    if (!swiper.enabled) return;\n    const {\n      rtlTranslate: rtl\n    } = swiper;\n    let e = event;\n    if (e.originalEvent) e = e.originalEvent; // jquery fix\n    const kc = e.keyCode || e.charCode;\n    const pageUpDown = swiper.params.keyboard.pageUpDown;\n    const isPageUp = pageUpDown && kc === 33;\n    const isPageDown = pageUpDown && kc === 34;\n    const isArrowLeft = kc === 37;\n    const isArrowRight = kc === 39;\n    const isArrowUp = kc === 38;\n    const isArrowDown = kc === 40;\n    // Directions locks\n    if (!swiper.allowSlideNext && (swiper.isHorizontal() && isArrowRight || swiper.isVertical() && isArrowDown || isPageDown)) {\n      return false;\n    }\n    if (!swiper.allowSlidePrev && (swiper.isHorizontal() && isArrowLeft || swiper.isVertical() && isArrowUp || isPageUp)) {\n      return false;\n    }\n    if (e.shiftKey || e.altKey || e.ctrlKey || e.metaKey) {\n      return undefined;\n    }\n    if (document.activeElement && document.activeElement.nodeName && (document.activeElement.nodeName.toLowerCase() === 'input' || document.activeElement.nodeName.toLowerCase() === 'textarea')) {\n      return undefined;\n    }\n    if (swiper.params.keyboard.onlyInViewport && (isPageUp || isPageDown || isArrowLeft || isArrowRight || isArrowUp || isArrowDown)) {\n      let inView = false;\n      // Check that swiper should be inside of visible area of window\n      if (elementParents(swiper.el, `.${swiper.params.slideClass}, swiper-slide`).length > 0 && elementParents(swiper.el, `.${swiper.params.slideActiveClass}`).length === 0) {\n        return undefined;\n      }\n      const el = swiper.el;\n      const swiperWidth = el.clientWidth;\n      const swiperHeight = el.clientHeight;\n      const windowWidth = window.innerWidth;\n      const windowHeight = window.innerHeight;\n      const swiperOffset = elementOffset(el);\n      if (rtl) swiperOffset.left -= el.scrollLeft;\n      const swiperCoord = [[swiperOffset.left, swiperOffset.top], [swiperOffset.left + swiperWidth, swiperOffset.top], [swiperOffset.left, swiperOffset.top + swiperHeight], [swiperOffset.left + swiperWidth, swiperOffset.top + swiperHeight]];\n      for (let i = 0; i < swiperCoord.length; i += 1) {\n        const point = swiperCoord[i];\n        if (point[0] >= 0 && point[0] <= windowWidth && point[1] >= 0 && point[1] <= windowHeight) {\n          if (point[0] === 0 && point[1] === 0) continue; // eslint-disable-line\n          inView = true;\n        }\n      }\n      if (!inView) return undefined;\n    }\n    if (swiper.isHorizontal()) {\n      if (isPageUp || isPageDown || isArrowLeft || isArrowRight) {\n        if (e.preventDefault) e.preventDefault();else e.returnValue = false;\n      }\n      if ((isPageDown || isArrowRight) && !rtl || (isPageUp || isArrowLeft) && rtl) swiper.slideNext();\n      if ((isPageUp || isArrowLeft) && !rtl || (isPageDown || isArrowRight) && rtl) swiper.slidePrev();\n    } else {\n      if (isPageUp || isPageDown || isArrowUp || isArrowDown) {\n        if (e.preventDefault) e.preventDefault();else e.returnValue = false;\n      }\n      if (isPageDown || isArrowDown) swiper.slideNext();\n      if (isPageUp || isArrowUp) swiper.slidePrev();\n    }\n    emit('keyPress', kc);\n    return undefined;\n  }\n  function enable() {\n    if (swiper.keyboard.enabled) return;\n    document.addEventListener('keydown', handle);\n    swiper.keyboard.enabled = true;\n  }\n  function disable() {\n    if (!swiper.keyboard.enabled) return;\n    document.removeEventListener('keydown', handle);\n    swiper.keyboard.enabled = false;\n  }\n  on('init', () => {\n    if (swiper.params.keyboard.enabled) {\n      enable();\n    }\n  });\n  on('destroy', () => {\n    if (swiper.keyboard.enabled) {\n      disable();\n    }\n  });\n  Object.assign(swiper.keyboard, {\n    enable,\n    disable\n  });\n}","import appendSlide from './methods/appendSlide.js';\nimport prependSlide from './methods/prependSlide.js';\nimport addSlide from './methods/addSlide.js';\nimport removeSlide from './methods/removeSlide.js';\nimport removeAllSlides from './methods/removeAllSlides.js';\nexport default function Manipulation({\n  swiper\n}) {\n  Object.assign(swiper, {\n    appendSlide: appendSlide.bind(swiper),\n    prependSlide: prependSlide.bind(swiper),\n    addSlide: addSlide.bind(swiper),\n    removeSlide: removeSlide.bind(swiper),\n    removeAllSlides: removeAllSlides.bind(swiper)\n  });\n}","export default function addSlide(index, slides) {\n  const swiper = this;\n  const {\n    params,\n    activeIndex,\n    slidesEl\n  } = swiper;\n  let activeIndexBuffer = activeIndex;\n  if (params.loop) {\n    activeIndexBuffer -= swiper.loopedSlides;\n    swiper.loopDestroy();\n    swiper.recalcSlides();\n  }\n  const baseLength = swiper.slides.length;\n  if (index <= 0) {\n    swiper.prependSlide(slides);\n    return;\n  }\n  if (index >= baseLength) {\n    swiper.appendSlide(slides);\n    return;\n  }\n  let newActiveIndex = activeIndexBuffer > index ? activeIndexBuffer + 1 : activeIndexBuffer;\n  const slidesBuffer = [];\n  for (let i = baseLength - 1; i >= index; i -= 1) {\n    const currentSlide = swiper.slides[i];\n    currentSlide.remove();\n    slidesBuffer.unshift(currentSlide);\n  }\n  if (typeof slides === 'object' && 'length' in slides) {\n    for (let i = 0; i < slides.length; i += 1) {\n      if (slides[i]) slidesEl.append(slides[i]);\n    }\n    newActiveIndex = activeIndexBuffer > index ? activeIndexBuffer + slides.length : activeIndexBuffer;\n  } else {\n    slidesEl.append(slides);\n  }\n  for (let i = 0; i < slidesBuffer.length; i += 1) {\n    slidesEl.append(slidesBuffer[i]);\n  }\n  swiper.recalcSlides();\n  if (params.loop) {\n    swiper.loopCreate();\n  }\n  if (!params.observer || swiper.isElement) {\n    swiper.update();\n  }\n  if (params.loop) {\n    swiper.slideTo(newActiveIndex + swiper.loopedSlides, 0, false);\n  } else {\n    swiper.slideTo(newActiveIndex, 0, false);\n  }\n}","export default function appendSlide(slides) {\n  const swiper = this;\n  const {\n    params,\n    slidesEl\n  } = swiper;\n  if (params.loop) {\n    swiper.loopDestroy();\n  }\n  const appendElement = slideEl => {\n    if (typeof slideEl === 'string') {\n      const tempDOM = document.createElement('div');\n      tempDOM.innerHTML = slideEl;\n      slidesEl.append(tempDOM.children[0]);\n      tempDOM.innerHTML = '';\n    } else {\n      slidesEl.append(slideEl);\n    }\n  };\n  if (typeof slides === 'object' && 'length' in slides) {\n    for (let i = 0; i < slides.length; i += 1) {\n      if (slides[i]) appendElement(slides[i]);\n    }\n  } else {\n    appendElement(slides);\n  }\n  swiper.recalcSlides();\n  if (params.loop) {\n    swiper.loopCreate();\n  }\n  if (!params.observer || swiper.isElement) {\n    swiper.update();\n  }\n}","export default function prependSlide(slides) {\n  const swiper = this;\n  const {\n    params,\n    activeIndex,\n    slidesEl\n  } = swiper;\n  if (params.loop) {\n    swiper.loopDestroy();\n  }\n  let newActiveIndex = activeIndex + 1;\n  const prependElement = slideEl => {\n    if (typeof slideEl === 'string') {\n      const tempDOM = document.createElement('div');\n      tempDOM.innerHTML = slideEl;\n      slidesEl.prepend(tempDOM.children[0]);\n      tempDOM.innerHTML = '';\n    } else {\n      slidesEl.prepend(slideEl);\n    }\n  };\n  if (typeof slides === 'object' && 'length' in slides) {\n    for (let i = 0; i < slides.length; i += 1) {\n      if (slides[i]) prependElement(slides[i]);\n    }\n    newActiveIndex = activeIndex + slides.length;\n  } else {\n    prependElement(slides);\n  }\n  swiper.recalcSlides();\n  if (params.loop) {\n    swiper.loopCreate();\n  }\n  if (!params.observer || swiper.isElement) {\n    swiper.update();\n  }\n  swiper.slideTo(newActiveIndex, 0, false);\n}","export default function removeAllSlides() {\n  const swiper = this;\n  const slidesIndexes = [];\n  for (let i = 0; i < swiper.slides.length; i += 1) {\n    slidesIndexes.push(i);\n  }\n  swiper.removeSlide(slidesIndexes);\n}","export default function removeSlide(slidesIndexes) {\n  const swiper = this;\n  const {\n    params,\n    activeIndex\n  } = swiper;\n  let activeIndexBuffer = activeIndex;\n  if (params.loop) {\n    activeIndexBuffer -= swiper.loopedSlides;\n    swiper.loopDestroy();\n  }\n  let newActiveIndex = activeIndexBuffer;\n  let indexToRemove;\n  if (typeof slidesIndexes === 'object' && 'length' in slidesIndexes) {\n    for (let i = 0; i < slidesIndexes.length; i += 1) {\n      indexToRemove = slidesIndexes[i];\n      if (swiper.slides[indexToRemove]) swiper.slides[indexToRemove].remove();\n      if (indexToRemove < newActiveIndex) newActiveIndex -= 1;\n    }\n    newActiveIndex = Math.max(newActiveIndex, 0);\n  } else {\n    indexToRemove = slidesIndexes;\n    if (swiper.slides[indexToRemove]) swiper.slides[indexToRemove].remove();\n    if (indexToRemove < newActiveIndex) newActiveIndex -= 1;\n    newActiveIndex = Math.max(newActiveIndex, 0);\n  }\n  swiper.recalcSlides();\n  if (params.loop) {\n    swiper.loopCreate();\n  }\n  if (!params.observer || swiper.isElement) {\n    swiper.update();\n  }\n  if (params.loop) {\n    swiper.slideTo(newActiveIndex + swiper.loopedSlides, 0, false);\n  } else {\n    swiper.slideTo(newActiveIndex, 0, false);\n  }\n}","/* eslint-disable consistent-return */\nimport { getWindow } from 'ssr-window';\nimport { now, nextTick } from '../../shared/utils.js';\nexport default function Mousewheel({\n  swiper,\n  extendParams,\n  on,\n  emit\n}) {\n  const window = getWindow();\n  extendParams({\n    mousewheel: {\n      enabled: false,\n      releaseOnEdges: false,\n      invert: false,\n      forceToAxis: false,\n      sensitivity: 1,\n      eventsTarget: 'container',\n      thresholdDelta: null,\n      thresholdTime: null\n    }\n  });\n  swiper.mousewheel = {\n    enabled: false\n  };\n  let timeout;\n  let lastScrollTime = now();\n  let lastEventBeforeSnap;\n  const recentWheelEvents = [];\n  function normalize(e) {\n    // Reasonable defaults\n    const PIXEL_STEP = 10;\n    const LINE_HEIGHT = 40;\n    const PAGE_HEIGHT = 800;\n    let sX = 0;\n    let sY = 0; // spinX, spinY\n    let pX = 0;\n    let pY = 0; // pixelX, pixelY\n\n    // Legacy\n    if ('detail' in e) {\n      sY = e.detail;\n    }\n    if ('wheelDelta' in e) {\n      sY = -e.wheelDelta / 120;\n    }\n    if ('wheelDeltaY' in e) {\n      sY = -e.wheelDeltaY / 120;\n    }\n    if ('wheelDeltaX' in e) {\n      sX = -e.wheelDeltaX / 120;\n    }\n\n    // side scrolling on FF with DOMMouseScroll\n    if ('axis' in e && e.axis === e.HORIZONTAL_AXIS) {\n      sX = sY;\n      sY = 0;\n    }\n    pX = sX * PIXEL_STEP;\n    pY = sY * PIXEL_STEP;\n    if ('deltaY' in e) {\n      pY = e.deltaY;\n    }\n    if ('deltaX' in e) {\n      pX = e.deltaX;\n    }\n    if (e.shiftKey && !pX) {\n      // if user scrolls with shift he wants horizontal scroll\n      pX = pY;\n      pY = 0;\n    }\n    if ((pX || pY) && e.deltaMode) {\n      if (e.deltaMode === 1) {\n        // delta in LINE units\n        pX *= LINE_HEIGHT;\n        pY *= LINE_HEIGHT;\n      } else {\n        // delta in PAGE units\n        pX *= PAGE_HEIGHT;\n        pY *= PAGE_HEIGHT;\n      }\n    }\n\n    // Fall-back if spin cannot be determined\n    if (pX && !sX) {\n      sX = pX < 1 ? -1 : 1;\n    }\n    if (pY && !sY) {\n      sY = pY < 1 ? -1 : 1;\n    }\n    return {\n      spinX: sX,\n      spinY: sY,\n      pixelX: pX,\n      pixelY: pY\n    };\n  }\n  function handleMouseEnter() {\n    if (!swiper.enabled) return;\n    swiper.mouseEntered = true;\n  }\n  function handleMouseLeave() {\n    if (!swiper.enabled) return;\n    swiper.mouseEntered = false;\n  }\n  function animateSlider(newEvent) {\n    if (swiper.params.mousewheel.thresholdDelta && newEvent.delta < swiper.params.mousewheel.thresholdDelta) {\n      // Prevent if delta of wheel scroll delta is below configured threshold\n      return false;\n    }\n    if (swiper.params.mousewheel.thresholdTime && now() - lastScrollTime < swiper.params.mousewheel.thresholdTime) {\n      // Prevent if time between scrolls is below configured threshold\n      return false;\n    }\n\n    // If the movement is NOT big enough and\n    // if the last time the user scrolled was too close to the current one (avoid continuously triggering the slider):\n    //   Don't go any further (avoid insignificant scroll movement).\n    if (newEvent.delta >= 6 && now() - lastScrollTime < 60) {\n      // Return false as a default\n      return true;\n    }\n    // If user is scrolling towards the end:\n    //   If the slider hasn't hit the latest slide or\n    //   if the slider is a loop and\n    //   if the slider isn't moving right now:\n    //     Go to next slide and\n    //     emit a scroll event.\n    // Else (the user is scrolling towards the beginning) and\n    // if the slider hasn't hit the first slide or\n    // if the slider is a loop and\n    // if the slider isn't moving right now:\n    //   Go to prev slide and\n    //   emit a scroll event.\n    if (newEvent.direction < 0) {\n      if ((!swiper.isEnd || swiper.params.loop) && !swiper.animating) {\n        swiper.slideNext();\n        emit('scroll', newEvent.raw);\n      }\n    } else if ((!swiper.isBeginning || swiper.params.loop) && !swiper.animating) {\n      swiper.slidePrev();\n      emit('scroll', newEvent.raw);\n    }\n    // If you got here is because an animation has been triggered so store the current time\n    lastScrollTime = new window.Date().getTime();\n    // Return false as a default\n    return false;\n  }\n  function releaseScroll(newEvent) {\n    const params = swiper.params.mousewheel;\n    if (newEvent.direction < 0) {\n      if (swiper.isEnd && !swiper.params.loop && params.releaseOnEdges) {\n        // Return true to animate scroll on edges\n        return true;\n      }\n    } else if (swiper.isBeginning && !swiper.params.loop && params.releaseOnEdges) {\n      // Return true to animate scroll on edges\n      return true;\n    }\n    return false;\n  }\n  function handle(event) {\n    let e = event;\n    let disableParentSwiper = true;\n    if (!swiper.enabled) return;\n    const params = swiper.params.mousewheel;\n    if (swiper.params.cssMode) {\n      e.preventDefault();\n    }\n    let targetEl = swiper.el;\n    if (swiper.params.mousewheel.eventsTarget !== 'container') {\n      targetEl = document.querySelector(swiper.params.mousewheel.eventsTarget);\n    }\n    const targetElContainsTarget = targetEl && targetEl.contains(e.target);\n    if (!swiper.mouseEntered && !targetElContainsTarget && !params.releaseOnEdges) return true;\n    if (e.originalEvent) e = e.originalEvent; // jquery fix\n    let delta = 0;\n    const rtlFactor = swiper.rtlTranslate ? -1 : 1;\n    const data = normalize(e);\n    if (params.forceToAxis) {\n      if (swiper.isHorizontal()) {\n        if (Math.abs(data.pixelX) > Math.abs(data.pixelY)) delta = -data.pixelX * rtlFactor;else return true;\n      } else if (Math.abs(data.pixelY) > Math.abs(data.pixelX)) delta = -data.pixelY;else return true;\n    } else {\n      delta = Math.abs(data.pixelX) > Math.abs(data.pixelY) ? -data.pixelX * rtlFactor : -data.pixelY;\n    }\n    if (delta === 0) return true;\n    if (params.invert) delta = -delta;\n\n    // Get the scroll positions\n    let positions = swiper.getTranslate() + delta * params.sensitivity;\n    if (positions >= swiper.minTranslate()) positions = swiper.minTranslate();\n    if (positions <= swiper.maxTranslate()) positions = swiper.maxTranslate();\n\n    // When loop is true:\n    //     the disableParentSwiper will be true.\n    // When loop is false:\n    //     if the scroll positions is not on edge,\n    //     then the disableParentSwiper will be true.\n    //     if the scroll on edge positions,\n    //     then the disableParentSwiper will be false.\n    disableParentSwiper = swiper.params.loop ? true : !(positions === swiper.minTranslate() || positions === swiper.maxTranslate());\n    if (disableParentSwiper && swiper.params.nested) e.stopPropagation();\n    if (!swiper.params.freeMode || !swiper.params.freeMode.enabled) {\n      // Register the new event in a variable which stores the relevant data\n      const newEvent = {\n        time: now(),\n        delta: Math.abs(delta),\n        direction: Math.sign(delta),\n        raw: event\n      };\n\n      // Keep the most recent events\n      if (recentWheelEvents.length >= 2) {\n        recentWheelEvents.shift(); // only store the last N events\n      }\n\n      const prevEvent = recentWheelEvents.length ? recentWheelEvents[recentWheelEvents.length - 1] : undefined;\n      recentWheelEvents.push(newEvent);\n\n      // If there is at least one previous recorded event:\n      //   If direction has changed or\n      //   if the scroll is quicker than the previous one:\n      //     Animate the slider.\n      // Else (this is the first time the wheel is moved):\n      //     Animate the slider.\n      if (prevEvent) {\n        if (newEvent.direction !== prevEvent.direction || newEvent.delta > prevEvent.delta || newEvent.time > prevEvent.time + 150) {\n          animateSlider(newEvent);\n        }\n      } else {\n        animateSlider(newEvent);\n      }\n\n      // If it's time to release the scroll:\n      //   Return now so you don't hit the preventDefault.\n      if (releaseScroll(newEvent)) {\n        return true;\n      }\n    } else {\n      // Freemode or scrollContainer:\n\n      // If we recently snapped after a momentum scroll, then ignore wheel events\n      // to give time for the deceleration to finish. Stop ignoring after 500 msecs\n      // or if it's a new scroll (larger delta or inverse sign as last event before\n      // an end-of-momentum snap).\n      const newEvent = {\n        time: now(),\n        delta: Math.abs(delta),\n        direction: Math.sign(delta)\n      };\n      const ignoreWheelEvents = lastEventBeforeSnap && newEvent.time < lastEventBeforeSnap.time + 500 && newEvent.delta <= lastEventBeforeSnap.delta && newEvent.direction === lastEventBeforeSnap.direction;\n      if (!ignoreWheelEvents) {\n        lastEventBeforeSnap = undefined;\n        let position = swiper.getTranslate() + delta * params.sensitivity;\n        const wasBeginning = swiper.isBeginning;\n        const wasEnd = swiper.isEnd;\n        if (position >= swiper.minTranslate()) position = swiper.minTranslate();\n        if (position <= swiper.maxTranslate()) position = swiper.maxTranslate();\n        swiper.setTransition(0);\n        swiper.setTranslate(position);\n        swiper.updateProgress();\n        swiper.updateActiveIndex();\n        swiper.updateSlidesClasses();\n        if (!wasBeginning && swiper.isBeginning || !wasEnd && swiper.isEnd) {\n          swiper.updateSlidesClasses();\n        }\n        if (swiper.params.loop) {\n          swiper.loopFix({\n            direction: newEvent.direction < 0 ? 'next' : 'prev',\n            byMousewheel: true\n          });\n        }\n        if (swiper.params.freeMode.sticky) {\n          // When wheel scrolling starts with sticky (aka snap) enabled, then detect\n          // the end of a momentum scroll by storing recent (N=15?) wheel events.\n          // 1. do all N events have decreasing or same (absolute value) delta?\n          // 2. did all N events arrive in the last M (M=500?) msecs?\n          // 3. does the earliest event have an (absolute value) delta that's\n          //    at least P (P=1?) larger than the most recent event's delta?\n          // 4. does the latest event have a delta that's smaller than Q (Q=6?) pixels?\n          // If 1-4 are \"yes\" then we're near the end of a momentum scroll deceleration.\n          // Snap immediately and ignore remaining wheel events in this scroll.\n          // See comment above for \"remaining wheel events in this scroll\" determination.\n          // If 1-4 aren't satisfied, then wait to snap until 500ms after the last event.\n          clearTimeout(timeout);\n          timeout = undefined;\n          if (recentWheelEvents.length >= 15) {\n            recentWheelEvents.shift(); // only store the last N events\n          }\n\n          const prevEvent = recentWheelEvents.length ? recentWheelEvents[recentWheelEvents.length - 1] : undefined;\n          const firstEvent = recentWheelEvents[0];\n          recentWheelEvents.push(newEvent);\n          if (prevEvent && (newEvent.delta > prevEvent.delta || newEvent.direction !== prevEvent.direction)) {\n            // Increasing or reverse-sign delta means the user started scrolling again. Clear the wheel event log.\n            recentWheelEvents.splice(0);\n          } else if (recentWheelEvents.length >= 15 && newEvent.time - firstEvent.time < 500 && firstEvent.delta - newEvent.delta >= 1 && newEvent.delta <= 6) {\n            // We're at the end of the deceleration of a momentum scroll, so there's no need\n            // to wait for more events. Snap ASAP on the next tick.\n            // Also, because there's some remaining momentum we'll bias the snap in the\n            // direction of the ongoing scroll because it's better UX for the scroll to snap\n            // in the same direction as the scroll instead of reversing to snap.  Therefore,\n            // if it's already scrolled more than 20% in the current direction, keep going.\n            const snapToThreshold = delta > 0 ? 0.8 : 0.2;\n            lastEventBeforeSnap = newEvent;\n            recentWheelEvents.splice(0);\n            timeout = nextTick(() => {\n              swiper.slideToClosest(swiper.params.speed, true, undefined, snapToThreshold);\n            }, 0); // no delay; move on next tick\n          }\n\n          if (!timeout) {\n            // if we get here, then we haven't detected the end of a momentum scroll, so\n            // we'll consider a scroll \"complete\" when there haven't been any wheel events\n            // for 500ms.\n            timeout = nextTick(() => {\n              const snapToThreshold = 0.5;\n              lastEventBeforeSnap = newEvent;\n              recentWheelEvents.splice(0);\n              swiper.slideToClosest(swiper.params.speed, true, undefined, snapToThreshold);\n            }, 500);\n          }\n        }\n\n        // Emit event\n        if (!ignoreWheelEvents) emit('scroll', e);\n\n        // Stop autoplay\n        if (swiper.params.autoplay && swiper.params.autoplayDisableOnInteraction) swiper.autoplay.stop();\n        // Return page scroll on edge positions\n        if (position === swiper.minTranslate() || position === swiper.maxTranslate()) return true;\n      }\n    }\n    if (e.preventDefault) e.preventDefault();else e.returnValue = false;\n    return false;\n  }\n  function events(method) {\n    let targetEl = swiper.el;\n    if (swiper.params.mousewheel.eventsTarget !== 'container') {\n      targetEl = document.querySelector(swiper.params.mousewheel.eventsTarget);\n    }\n    targetEl[method]('mouseenter', handleMouseEnter);\n    targetEl[method]('mouseleave', handleMouseLeave);\n    targetEl[method]('wheel', handle);\n  }\n  function enable() {\n    if (swiper.params.cssMode) {\n      swiper.wrapperEl.removeEventListener('wheel', handle);\n      return true;\n    }\n    if (swiper.mousewheel.enabled) return false;\n    events('addEventListener');\n    swiper.mousewheel.enabled = true;\n    return true;\n  }\n  function disable() {\n    if (swiper.params.cssMode) {\n      swiper.wrapperEl.addEventListener(event, handle);\n      return true;\n    }\n    if (!swiper.mousewheel.enabled) return false;\n    events('removeEventListener');\n    swiper.mousewheel.enabled = false;\n    return true;\n  }\n  on('init', () => {\n    if (!swiper.params.mousewheel.enabled && swiper.params.cssMode) {\n      disable();\n    }\n    if (swiper.params.mousewheel.enabled) enable();\n  });\n  on('destroy', () => {\n    if (swiper.params.cssMode) {\n      enable();\n    }\n    if (swiper.mousewheel.enabled) disable();\n  });\n  Object.assign(swiper.mousewheel, {\n    enable,\n    disable\n  });\n}","import createElementIfNotDefined from '../../shared/create-element-if-not-defined.js';\nexport default function Navigation({\n  swiper,\n  extendParams,\n  on,\n  emit\n}) {\n  extendParams({\n    navigation: {\n      nextEl: null,\n      prevEl: null,\n      hideOnClick: false,\n      disabledClass: 'swiper-button-disabled',\n      hiddenClass: 'swiper-button-hidden',\n      lockClass: 'swiper-button-lock',\n      navigationDisabledClass: 'swiper-navigation-disabled'\n    }\n  });\n  swiper.navigation = {\n    nextEl: null,\n    prevEl: null\n  };\n  const makeElementsArray = el => {\n    if (!Array.isArray(el)) el = [el].filter(e => !!e);\n    return el;\n  };\n  function getEl(el) {\n    let res;\n    if (el && typeof el === 'string' && swiper.isElement) {\n      res = swiper.el.shadowRoot.querySelector(el);\n      if (res) return res;\n    }\n    if (el) {\n      if (typeof el === 'string') res = [...document.querySelectorAll(el)];\n      if (swiper.params.uniqueNavElements && typeof el === 'string' && res.length > 1 && swiper.el.querySelectorAll(el).length === 1) {\n        res = swiper.el.querySelector(el);\n      }\n    }\n    if (el && !res) return el;\n    // if (Array.isArray(res) && res.length === 1) res = res[0];\n    return res;\n  }\n  function toggleEl(el, disabled) {\n    const params = swiper.params.navigation;\n    el = makeElementsArray(el);\n    el.forEach(subEl => {\n      if (subEl) {\n        subEl.classList[disabled ? 'add' : 'remove'](...params.disabledClass.split(' '));\n        if (subEl.tagName === 'BUTTON') subEl.disabled = disabled;\n        if (swiper.params.watchOverflow && swiper.enabled) {\n          subEl.classList[swiper.isLocked ? 'add' : 'remove'](params.lockClass);\n        }\n      }\n    });\n  }\n  function update() {\n    // Update Navigation Buttons\n    const {\n      nextEl,\n      prevEl\n    } = swiper.navigation;\n    if (swiper.params.loop) {\n      toggleEl(prevEl, false);\n      toggleEl(nextEl, false);\n      return;\n    }\n    toggleEl(prevEl, swiper.isBeginning && !swiper.params.rewind);\n    toggleEl(nextEl, swiper.isEnd && !swiper.params.rewind);\n  }\n  function onPrevClick(e) {\n    e.preventDefault();\n    if (swiper.isBeginning && !swiper.params.loop && !swiper.params.rewind) return;\n    swiper.slidePrev();\n    emit('navigationPrev');\n  }\n  function onNextClick(e) {\n    e.preventDefault();\n    if (swiper.isEnd && !swiper.params.loop && !swiper.params.rewind) return;\n    swiper.slideNext();\n    emit('navigationNext');\n  }\n  function init() {\n    const params = swiper.params.navigation;\n    swiper.params.navigation = createElementIfNotDefined(swiper, swiper.originalParams.navigation, swiper.params.navigation, {\n      nextEl: 'swiper-button-next',\n      prevEl: 'swiper-button-prev'\n    });\n    if (!(params.nextEl || params.prevEl)) return;\n    let nextEl = getEl(params.nextEl);\n    let prevEl = getEl(params.prevEl);\n    Object.assign(swiper.navigation, {\n      nextEl,\n      prevEl\n    });\n    nextEl = makeElementsArray(nextEl);\n    prevEl = makeElementsArray(prevEl);\n    const initButton = (el, dir) => {\n      if (el) {\n        el.addEventListener('click', dir === 'next' ? onNextClick : onPrevClick);\n      }\n      if (!swiper.enabled && el) {\n        el.classList.add(...params.lockClass.split(' '));\n      }\n    };\n    nextEl.forEach(el => initButton(el, 'next'));\n    prevEl.forEach(el => initButton(el, 'prev'));\n  }\n  function destroy() {\n    let {\n      nextEl,\n      prevEl\n    } = swiper.navigation;\n    nextEl = makeElementsArray(nextEl);\n    prevEl = makeElementsArray(prevEl);\n    const destroyButton = (el, dir) => {\n      el.removeEventListener('click', dir === 'next' ? onNextClick : onPrevClick);\n      el.classList.remove(...swiper.params.navigation.disabledClass.split(' '));\n    };\n    nextEl.forEach(el => destroyButton(el, 'next'));\n    prevEl.forEach(el => destroyButton(el, 'prev'));\n  }\n  on('init', () => {\n    if (swiper.params.navigation.enabled === false) {\n      // eslint-disable-next-line\n      disable();\n    } else {\n      init();\n      update();\n    }\n  });\n  on('toEdge fromEdge lock unlock', () => {\n    update();\n  });\n  on('destroy', () => {\n    destroy();\n  });\n  on('enable disable', () => {\n    let {\n      nextEl,\n      prevEl\n    } = swiper.navigation;\n    nextEl = makeElementsArray(nextEl);\n    prevEl = makeElementsArray(prevEl);\n    [...nextEl, ...prevEl].filter(el => !!el).forEach(el => el.classList[swiper.enabled ? 'remove' : 'add'](swiper.params.navigation.lockClass));\n  });\n  on('click', (_s, e) => {\n    let {\n      nextEl,\n      prevEl\n    } = swiper.navigation;\n    nextEl = makeElementsArray(nextEl);\n    prevEl = makeElementsArray(prevEl);\n    const targetEl = e.target;\n    if (swiper.params.navigation.hideOnClick && !prevEl.includes(targetEl) && !nextEl.includes(targetEl)) {\n      if (swiper.pagination && swiper.params.pagination && swiper.params.pagination.clickable && (swiper.pagination.el === targetEl || swiper.pagination.el.contains(targetEl))) return;\n      let isHidden;\n      if (nextEl.length) {\n        isHidden = nextEl[0].classList.contains(swiper.params.navigation.hiddenClass);\n      } else if (prevEl.length) {\n        isHidden = prevEl[0].classList.contains(swiper.params.navigation.hiddenClass);\n      }\n      if (isHidden === true) {\n        emit('navigationShow');\n      } else {\n        emit('navigationHide');\n      }\n      [...nextEl, ...prevEl].filter(el => !!el).forEach(el => el.classList.toggle(swiper.params.navigation.hiddenClass));\n    }\n  });\n  const enable = () => {\n    swiper.el.classList.remove(...swiper.params.navigation.navigationDisabledClass.split(' '));\n    init();\n    update();\n  };\n  const disable = () => {\n    swiper.el.classList.add(...swiper.params.navigation.navigationDisabledClass.split(' '));\n    destroy();\n  };\n  Object.assign(swiper.navigation, {\n    enable,\n    disable,\n    update,\n    init,\n    destroy\n  });\n}","import classesToSelector from '../../shared/classes-to-selector.js';\nimport createElementIfNotDefined from '../../shared/create-element-if-not-defined.js';\nimport { elementIndex, elementOuterSize, elementParents } from '../../shared/utils.js';\nexport default function Pagination({\n  swiper,\n  extendParams,\n  on,\n  emit\n}) {\n  const pfx = 'swiper-pagination';\n  extendParams({\n    pagination: {\n      el: null,\n      bulletElement: 'span',\n      clickable: false,\n      hideOnClick: false,\n      renderBullet: null,\n      renderProgressbar: null,\n      renderFraction: null,\n      renderCustom: null,\n      progressbarOpposite: false,\n      type: 'bullets',\n      // 'bullets' or 'progressbar' or 'fraction' or 'custom'\n      dynamicBullets: false,\n      dynamicMainBullets: 1,\n      formatFractionCurrent: number => number,\n      formatFractionTotal: number => number,\n      bulletClass: `${pfx}-bullet`,\n      bulletActiveClass: `${pfx}-bullet-active`,\n      modifierClass: `${pfx}-`,\n      currentClass: `${pfx}-current`,\n      totalClass: `${pfx}-total`,\n      hiddenClass: `${pfx}-hidden`,\n      progressbarFillClass: `${pfx}-progressbar-fill`,\n      progressbarOppositeClass: `${pfx}-progressbar-opposite`,\n      clickableClass: `${pfx}-clickable`,\n      lockClass: `${pfx}-lock`,\n      horizontalClass: `${pfx}-horizontal`,\n      verticalClass: `${pfx}-vertical`,\n      paginationDisabledClass: `${pfx}-disabled`\n    }\n  });\n  swiper.pagination = {\n    el: null,\n    bullets: []\n  };\n  let bulletSize;\n  let dynamicBulletIndex = 0;\n  const makeElementsArray = el => {\n    if (!Array.isArray(el)) el = [el].filter(e => !!e);\n    return el;\n  };\n  function isPaginationDisabled() {\n    return !swiper.params.pagination.el || !swiper.pagination.el || Array.isArray(swiper.pagination.el) && swiper.pagination.el.length === 0;\n  }\n  function setSideBullets(bulletEl, position) {\n    const {\n      bulletActiveClass\n    } = swiper.params.pagination;\n    if (!bulletEl) return;\n    bulletEl = bulletEl[`${position === 'prev' ? 'previous' : 'next'}ElementSibling`];\n    if (bulletEl) {\n      bulletEl.classList.add(`${bulletActiveClass}-${position}`);\n      bulletEl = bulletEl[`${position === 'prev' ? 'previous' : 'next'}ElementSibling`];\n      if (bulletEl) {\n        bulletEl.classList.add(`${bulletActiveClass}-${position}-${position}`);\n      }\n    }\n  }\n  function onBulletClick(e) {\n    const bulletEl = e.target.closest(classesToSelector(swiper.params.pagination.bulletClass));\n    if (!bulletEl) {\n      return;\n    }\n    e.preventDefault();\n    const index = elementIndex(bulletEl) * swiper.params.slidesPerGroup;\n    if (swiper.params.loop) {\n      if (swiper.realIndex === index) return;\n      const newSlideIndex = swiper.getSlideIndexByData(index);\n      const currentSlideIndex = swiper.getSlideIndexByData(swiper.realIndex);\n      if (newSlideIndex > swiper.slides.length - swiper.loopedSlides) {\n        swiper.loopFix({\n          direction: newSlideIndex > currentSlideIndex ? 'next' : 'prev',\n          activeSlideIndex: newSlideIndex,\n          slideTo: false\n        });\n      }\n      swiper.slideToLoop(index);\n    } else {\n      swiper.slideTo(index);\n    }\n  }\n  function update() {\n    // Render || Update Pagination bullets/items\n    const rtl = swiper.rtl;\n    const params = swiper.params.pagination;\n    if (isPaginationDisabled()) return;\n    let el = swiper.pagination.el;\n    el = makeElementsArray(el);\n    // Current/Total\n    let current;\n    let previousIndex;\n    const slidesLength = swiper.virtual && swiper.params.virtual.enabled ? swiper.virtual.slides.length : swiper.slides.length;\n    const total = swiper.params.loop ? Math.ceil(slidesLength / swiper.params.slidesPerGroup) : swiper.snapGrid.length;\n    if (swiper.params.loop) {\n      previousIndex = swiper.previousRealIndex || 0;\n      current = swiper.params.slidesPerGroup > 1 ? Math.floor(swiper.realIndex / swiper.params.slidesPerGroup) : swiper.realIndex;\n    } else if (typeof swiper.snapIndex !== 'undefined') {\n      current = swiper.snapIndex;\n      previousIndex = swiper.previousSnapIndex;\n    } else {\n      previousIndex = swiper.previousIndex || 0;\n      current = swiper.activeIndex || 0;\n    }\n    // Types\n    if (params.type === 'bullets' && swiper.pagination.bullets && swiper.pagination.bullets.length > 0) {\n      const bullets = swiper.pagination.bullets;\n      let firstIndex;\n      let lastIndex;\n      let midIndex;\n      if (params.dynamicBullets) {\n        bulletSize = elementOuterSize(bullets[0], swiper.isHorizontal() ? 'width' : 'height', true);\n        el.forEach(subEl => {\n          subEl.style[swiper.isHorizontal() ? 'width' : 'height'] = `${bulletSize * (params.dynamicMainBullets + 4)}px`;\n        });\n        if (params.dynamicMainBullets > 1 && previousIndex !== undefined) {\n          dynamicBulletIndex += current - (previousIndex || 0);\n          if (dynamicBulletIndex > params.dynamicMainBullets - 1) {\n            dynamicBulletIndex = params.dynamicMainBullets - 1;\n          } else if (dynamicBulletIndex < 0) {\n            dynamicBulletIndex = 0;\n          }\n        }\n        firstIndex = Math.max(current - dynamicBulletIndex, 0);\n        lastIndex = firstIndex + (Math.min(bullets.length, params.dynamicMainBullets) - 1);\n        midIndex = (lastIndex + firstIndex) / 2;\n      }\n      bullets.forEach(bulletEl => {\n        const classesToRemove = [...['', '-next', '-next-next', '-prev', '-prev-prev', '-main'].map(suffix => `${params.bulletActiveClass}${suffix}`)].map(s => typeof s === 'string' && s.includes(' ') ? s.split(' ') : s).flat();\n        bulletEl.classList.remove(...classesToRemove);\n      });\n      if (el.length > 1) {\n        bullets.forEach(bullet => {\n          const bulletIndex = elementIndex(bullet);\n          if (bulletIndex === current) {\n            bullet.classList.add(...params.bulletActiveClass.split(' '));\n          }\n          if (params.dynamicBullets) {\n            if (bulletIndex >= firstIndex && bulletIndex <= lastIndex) {\n              bullet.classList.add(...`${params.bulletActiveClass}-main`.split(' '));\n            }\n            if (bulletIndex === firstIndex) {\n              setSideBullets(bullet, 'prev');\n            }\n            if (bulletIndex === lastIndex) {\n              setSideBullets(bullet, 'next');\n            }\n          }\n        });\n      } else {\n        const bullet = bullets[current];\n        if (bullet) {\n          bullet.classList.add(...params.bulletActiveClass.split(' '));\n        }\n        if (params.dynamicBullets) {\n          const firstDisplayedBullet = bullets[firstIndex];\n          const lastDisplayedBullet = bullets[lastIndex];\n          for (let i = firstIndex; i <= lastIndex; i += 1) {\n            if (bullets[i]) {\n              bullets[i].classList.add(...`${params.bulletActiveClass}-main`.split(' '));\n            }\n          }\n          setSideBullets(firstDisplayedBullet, 'prev');\n          setSideBullets(lastDisplayedBullet, 'next');\n        }\n      }\n      if (params.dynamicBullets) {\n        const dynamicBulletsLength = Math.min(bullets.length, params.dynamicMainBullets + 4);\n        const bulletsOffset = (bulletSize * dynamicBulletsLength - bulletSize) / 2 - midIndex * bulletSize;\n        const offsetProp = rtl ? 'right' : 'left';\n        bullets.forEach(bullet => {\n          bullet.style[swiper.isHorizontal() ? offsetProp : 'top'] = `${bulletsOffset}px`;\n        });\n      }\n    }\n    el.forEach((subEl, subElIndex) => {\n      if (params.type === 'fraction') {\n        subEl.querySelectorAll(classesToSelector(params.currentClass)).forEach(fractionEl => {\n          fractionEl.textContent = params.formatFractionCurrent(current + 1);\n        });\n        subEl.querySelectorAll(classesToSelector(params.totalClass)).forEach(totalEl => {\n          totalEl.textContent = params.formatFractionTotal(total);\n        });\n      }\n      if (params.type === 'progressbar') {\n        let progressbarDirection;\n        if (params.progressbarOpposite) {\n          progressbarDirection = swiper.isHorizontal() ? 'vertical' : 'horizontal';\n        } else {\n          progressbarDirection = swiper.isHorizontal() ? 'horizontal' : 'vertical';\n        }\n        const scale = (current + 1) / total;\n        let scaleX = 1;\n        let scaleY = 1;\n        if (progressbarDirection === 'horizontal') {\n          scaleX = scale;\n        } else {\n          scaleY = scale;\n        }\n        subEl.querySelectorAll(classesToSelector(params.progressbarFillClass)).forEach(progressEl => {\n          progressEl.style.transform = `translate3d(0,0,0) scaleX(${scaleX}) scaleY(${scaleY})`;\n          progressEl.style.transitionDuration = `${swiper.params.speed}ms`;\n        });\n      }\n      if (params.type === 'custom' && params.renderCustom) {\n        subEl.innerHTML = params.renderCustom(swiper, current + 1, total);\n        if (subElIndex === 0) emit('paginationRender', subEl);\n      } else {\n        if (subElIndex === 0) emit('paginationRender', subEl);\n        emit('paginationUpdate', subEl);\n      }\n      if (swiper.params.watchOverflow && swiper.enabled) {\n        subEl.classList[swiper.isLocked ? 'add' : 'remove'](params.lockClass);\n      }\n    });\n  }\n  function render() {\n    // Render Container\n    const params = swiper.params.pagination;\n    if (isPaginationDisabled()) return;\n    const slidesLength = swiper.virtual && swiper.params.virtual.enabled ? swiper.virtual.slides.length : swiper.slides.length;\n    let el = swiper.pagination.el;\n    el = makeElementsArray(el);\n    let paginationHTML = '';\n    if (params.type === 'bullets') {\n      let numberOfBullets = swiper.params.loop ? Math.ceil(slidesLength / swiper.params.slidesPerGroup) : swiper.snapGrid.length;\n      if (swiper.params.freeMode && swiper.params.freeMode.enabled && numberOfBullets > slidesLength) {\n        numberOfBullets = slidesLength;\n      }\n      for (let i = 0; i < numberOfBullets; i += 1) {\n        if (params.renderBullet) {\n          paginationHTML += params.renderBullet.call(swiper, i, params.bulletClass);\n        } else {\n          paginationHTML += `<${params.bulletElement} class=\"${params.bulletClass}\"></${params.bulletElement}>`;\n        }\n      }\n    }\n    if (params.type === 'fraction') {\n      if (params.renderFraction) {\n        paginationHTML = params.renderFraction.call(swiper, params.currentClass, params.totalClass);\n      } else {\n        paginationHTML = `<span class=\"${params.currentClass}\"></span>` + ' / ' + `<span class=\"${params.totalClass}\"></span>`;\n      }\n    }\n    if (params.type === 'progressbar') {\n      if (params.renderProgressbar) {\n        paginationHTML = params.renderProgressbar.call(swiper, params.progressbarFillClass);\n      } else {\n        paginationHTML = `<span class=\"${params.progressbarFillClass}\"></span>`;\n      }\n    }\n    swiper.pagination.bullets = [];\n    el.forEach(subEl => {\n      if (params.type !== 'custom') {\n        subEl.innerHTML = paginationHTML || '';\n      }\n      if (params.type === 'bullets') {\n        swiper.pagination.bullets.push(...subEl.querySelectorAll(classesToSelector(params.bulletClass)));\n      }\n    });\n    if (params.type !== 'custom') {\n      emit('paginationRender', el[0]);\n    }\n  }\n  function init() {\n    swiper.params.pagination = createElementIfNotDefined(swiper, swiper.originalParams.pagination, swiper.params.pagination, {\n      el: 'swiper-pagination'\n    });\n    const params = swiper.params.pagination;\n    if (!params.el) return;\n    let el;\n    if (typeof params.el === 'string' && swiper.isElement) {\n      el = swiper.el.shadowRoot.querySelector(params.el);\n    }\n    if (!el && typeof params.el === 'string') {\n      el = [...document.querySelectorAll(params.el)];\n    }\n    if (!el) {\n      el = params.el;\n    }\n    if (!el || el.length === 0) return;\n    if (swiper.params.uniqueNavElements && typeof params.el === 'string' && Array.isArray(el) && el.length > 1) {\n      el = [...swiper.el.querySelectorAll(params.el)];\n      // check if it belongs to another nested Swiper\n      if (el.length > 1) {\n        el = el.filter(subEl => {\n          if (elementParents(subEl, '.swiper')[0] !== swiper.el) return false;\n          return true;\n        })[0];\n      }\n    }\n    if (Array.isArray(el) && el.length === 1) el = el[0];\n    Object.assign(swiper.pagination, {\n      el\n    });\n    el = makeElementsArray(el);\n    el.forEach(subEl => {\n      if (params.type === 'bullets' && params.clickable) {\n        subEl.classList.add(params.clickableClass);\n      }\n      subEl.classList.add(params.modifierClass + params.type);\n      subEl.classList.add(swiper.isHorizontal() ? params.horizontalClass : params.verticalClass);\n      if (params.type === 'bullets' && params.dynamicBullets) {\n        subEl.classList.add(`${params.modifierClass}${params.type}-dynamic`);\n        dynamicBulletIndex = 0;\n        if (params.dynamicMainBullets < 1) {\n          params.dynamicMainBullets = 1;\n        }\n      }\n      if (params.type === 'progressbar' && params.progressbarOpposite) {\n        subEl.classList.add(params.progressbarOppositeClass);\n      }\n      if (params.clickable) {\n        subEl.addEventListener('click', onBulletClick);\n      }\n      if (!swiper.enabled) {\n        subEl.classList.add(params.lockClass);\n      }\n    });\n  }\n  function destroy() {\n    const params = swiper.params.pagination;\n    if (isPaginationDisabled()) return;\n    let el = swiper.pagination.el;\n    if (el) {\n      el = makeElementsArray(el);\n      el.forEach(subEl => {\n        subEl.classList.remove(params.hiddenClass);\n        subEl.classList.remove(params.modifierClass + params.type);\n        subEl.classList.remove(swiper.isHorizontal() ? params.horizontalClass : params.verticalClass);\n        if (params.clickable) {\n          subEl.removeEventListener('click', onBulletClick);\n        }\n      });\n    }\n    if (swiper.pagination.bullets) swiper.pagination.bullets.forEach(subEl => subEl.classList.remove(...params.bulletActiveClass.split(' ')));\n  }\n  on('changeDirection', () => {\n    if (!swiper.pagination || !swiper.pagination.el) return;\n    const params = swiper.params.pagination;\n    let {\n      el\n    } = swiper.pagination;\n    el = makeElementsArray(el);\n    el.forEach(subEl => {\n      subEl.classList.remove(params.horizontalClass, params.verticalClass);\n      subEl.classList.add(swiper.isHorizontal() ? params.horizontalClass : params.verticalClass);\n    });\n  });\n  on('init', () => {\n    if (swiper.params.pagination.enabled === false) {\n      // eslint-disable-next-line\n      disable();\n    } else {\n      init();\n      render();\n      update();\n    }\n  });\n  on('activeIndexChange', () => {\n    if (typeof swiper.snapIndex === 'undefined') {\n      update();\n    }\n  });\n  on('snapIndexChange', () => {\n    update();\n  });\n  on('snapGridLengthChange', () => {\n    render();\n    update();\n  });\n  on('destroy', () => {\n    destroy();\n  });\n  on('enable disable', () => {\n    let {\n      el\n    } = swiper.pagination;\n    if (el) {\n      el = makeElementsArray(el);\n      el.forEach(subEl => subEl.classList[swiper.enabled ? 'remove' : 'add'](swiper.params.pagination.lockClass));\n    }\n  });\n  on('lock unlock', () => {\n    update();\n  });\n  on('click', (_s, e) => {\n    const targetEl = e.target;\n    let {\n      el\n    } = swiper.pagination;\n    if (!Array.isArray(el)) el = [el].filter(element => !!element);\n    if (swiper.params.pagination.el && swiper.params.pagination.hideOnClick && el && el.length > 0 && !targetEl.classList.contains(swiper.params.pagination.bulletClass)) {\n      if (swiper.navigation && (swiper.navigation.nextEl && targetEl === swiper.navigation.nextEl || swiper.navigation.prevEl && targetEl === swiper.navigation.prevEl)) return;\n      const isHidden = el[0].classList.contains(swiper.params.pagination.hiddenClass);\n      if (isHidden === true) {\n        emit('paginationShow');\n      } else {\n        emit('paginationHide');\n      }\n      el.forEach(subEl => subEl.classList.toggle(swiper.params.pagination.hiddenClass));\n    }\n  });\n  const enable = () => {\n    swiper.el.classList.remove(swiper.params.pagination.paginationDisabledClass);\n    let {\n      el\n    } = swiper.pagination;\n    if (el) {\n      el = makeElementsArray(el);\n      el.forEach(subEl => subEl.classList.remove(swiper.params.pagination.paginationDisabledClass));\n    }\n    init();\n    render();\n    update();\n  };\n  const disable = () => {\n    swiper.el.classList.add(swiper.params.pagination.paginationDisabledClass);\n    let {\n      el\n    } = swiper.pagination;\n    if (el) {\n      el = makeElementsArray(el);\n      el.forEach(subEl => subEl.classList.add(swiper.params.pagination.paginationDisabledClass));\n    }\n    destroy();\n  };\n  Object.assign(swiper.pagination, {\n    enable,\n    disable,\n    render,\n    update,\n    init,\n    destroy\n  });\n}","import { elementChildren } from '../../shared/utils.js';\nexport default function Parallax({\n  swiper,\n  extendParams,\n  on\n}) {\n  extendParams({\n    parallax: {\n      enabled: false\n    }\n  });\n  const setTransform = (el, progress) => {\n    const {\n      rtl\n    } = swiper;\n    const rtlFactor = rtl ? -1 : 1;\n    const p = el.getAttribute('data-swiper-parallax') || '0';\n    let x = el.getAttribute('data-swiper-parallax-x');\n    let y = el.getAttribute('data-swiper-parallax-y');\n    const scale = el.getAttribute('data-swiper-parallax-scale');\n    const opacity = el.getAttribute('data-swiper-parallax-opacity');\n    const rotate = el.getAttribute('data-swiper-parallax-rotate');\n    if (x || y) {\n      x = x || '0';\n      y = y || '0';\n    } else if (swiper.isHorizontal()) {\n      x = p;\n      y = '0';\n    } else {\n      y = p;\n      x = '0';\n    }\n    if (x.indexOf('%') >= 0) {\n      x = `${parseInt(x, 10) * progress * rtlFactor}%`;\n    } else {\n      x = `${x * progress * rtlFactor}px`;\n    }\n    if (y.indexOf('%') >= 0) {\n      y = `${parseInt(y, 10) * progress}%`;\n    } else {\n      y = `${y * progress}px`;\n    }\n    if (typeof opacity !== 'undefined' && opacity !== null) {\n      const currentOpacity = opacity - (opacity - 1) * (1 - Math.abs(progress));\n      el.style.opacity = currentOpacity;\n    }\n    let transform = `translate3d(${x}, ${y}, 0px)`;\n    if (typeof scale !== 'undefined' && scale !== null) {\n      const currentScale = scale - (scale - 1) * (1 - Math.abs(progress));\n      transform += ` scale(${currentScale})`;\n    }\n    if (rotate && typeof rotate !== 'undefined' && rotate !== null) {\n      const currentRotate = rotate * progress * -1;\n      transform += ` rotate(${currentRotate}deg)`;\n    }\n    el.style.transform = transform;\n  };\n  const setTranslate = () => {\n    const {\n      el,\n      slides,\n      progress,\n      snapGrid\n    } = swiper;\n    elementChildren(el, '[data-swiper-parallax], [data-swiper-parallax-x], [data-swiper-parallax-y], [data-swiper-parallax-opacity], [data-swiper-parallax-scale]').forEach(subEl => {\n      setTransform(subEl, progress);\n    });\n    slides.forEach((slideEl, slideIndex) => {\n      let slideProgress = slideEl.progress;\n      if (swiper.params.slidesPerGroup > 1 && swiper.params.slidesPerView !== 'auto') {\n        slideProgress += Math.ceil(slideIndex / 2) - progress * (snapGrid.length - 1);\n      }\n      slideProgress = Math.min(Math.max(slideProgress, -1), 1);\n      slideEl.querySelectorAll('[data-swiper-parallax], [data-swiper-parallax-x], [data-swiper-parallax-y], [data-swiper-parallax-opacity], [data-swiper-parallax-scale], [data-swiper-parallax-rotate]').forEach(subEl => {\n        setTransform(subEl, slideProgress);\n      });\n    });\n  };\n  const setTransition = (duration = swiper.params.speed) => {\n    const {\n      el\n    } = swiper;\n    el.querySelectorAll('[data-swiper-parallax], [data-swiper-parallax-x], [data-swiper-parallax-y], [data-swiper-parallax-opacity], [data-swiper-parallax-scale]').forEach(parallaxEl => {\n      let parallaxDuration = parseInt(parallaxEl.getAttribute('data-swiper-parallax-duration'), 10) || duration;\n      if (duration === 0) parallaxDuration = 0;\n      parallaxEl.style.transitionDuration = `${parallaxDuration}ms`;\n    });\n  };\n  on('beforeInit', () => {\n    if (!swiper.params.parallax.enabled) return;\n    swiper.params.watchSlidesProgress = true;\n    swiper.originalParams.watchSlidesProgress = true;\n  });\n  on('init', () => {\n    if (!swiper.params.parallax.enabled) return;\n    setTranslate();\n  });\n  on('setTranslate', () => {\n    if (!swiper.params.parallax.enabled) return;\n    setTranslate();\n  });\n  on('setTransition', (_swiper, duration) => {\n    if (!swiper.params.parallax.enabled) return;\n    setTransition(duration);\n  });\n}","import { getDocument } from 'ssr-window';\nimport { createElement, elementOffset, nextTick } from '../../shared/utils.js';\nimport createElementIfNotDefined from '../../shared/create-element-if-not-defined.js';\nexport default function Scrollbar({\n  swiper,\n  extendParams,\n  on,\n  emit\n}) {\n  const document = getDocument();\n  let isTouched = false;\n  let timeout = null;\n  let dragTimeout = null;\n  let dragStartPos;\n  let dragSize;\n  let trackSize;\n  let divider;\n  extendParams({\n    scrollbar: {\n      el: null,\n      dragSize: 'auto',\n      hide: false,\n      draggable: false,\n      snapOnRelease: true,\n      lockClass: 'swiper-scrollbar-lock',\n      dragClass: 'swiper-scrollbar-drag',\n      scrollbarDisabledClass: 'swiper-scrollbar-disabled',\n      horizontalClass: `swiper-scrollbar-horizontal`,\n      verticalClass: `swiper-scrollbar-vertical`\n    }\n  });\n  swiper.scrollbar = {\n    el: null,\n    dragEl: null\n  };\n  function setTranslate() {\n    if (!swiper.params.scrollbar.el || !swiper.scrollbar.el) return;\n    const {\n      scrollbar,\n      rtlTranslate: rtl\n    } = swiper;\n    const {\n      dragEl,\n      el\n    } = scrollbar;\n    const params = swiper.params.scrollbar;\n    const progress = swiper.params.loop ? swiper.progressLoop : swiper.progress;\n    let newSize = dragSize;\n    let newPos = (trackSize - dragSize) * progress;\n    if (rtl) {\n      newPos = -newPos;\n      if (newPos > 0) {\n        newSize = dragSize - newPos;\n        newPos = 0;\n      } else if (-newPos + dragSize > trackSize) {\n        newSize = trackSize + newPos;\n      }\n    } else if (newPos < 0) {\n      newSize = dragSize + newPos;\n      newPos = 0;\n    } else if (newPos + dragSize > trackSize) {\n      newSize = trackSize - newPos;\n    }\n    if (swiper.isHorizontal()) {\n      dragEl.style.transform = `translate3d(${newPos}px, 0, 0)`;\n      dragEl.style.width = `${newSize}px`;\n    } else {\n      dragEl.style.transform = `translate3d(0px, ${newPos}px, 0)`;\n      dragEl.style.height = `${newSize}px`;\n    }\n    if (params.hide) {\n      clearTimeout(timeout);\n      el.style.opacity = 1;\n      timeout = setTimeout(() => {\n        el.style.opacity = 0;\n        el.style.transitionDuration = '400ms';\n      }, 1000);\n    }\n  }\n  function setTransition(duration) {\n    if (!swiper.params.scrollbar.el || !swiper.scrollbar.el) return;\n    swiper.scrollbar.dragEl.style.transitionDuration = `${duration}ms`;\n  }\n  function updateSize() {\n    if (!swiper.params.scrollbar.el || !swiper.scrollbar.el) return;\n    const {\n      scrollbar\n    } = swiper;\n    const {\n      dragEl,\n      el\n    } = scrollbar;\n    dragEl.style.width = '';\n    dragEl.style.height = '';\n    trackSize = swiper.isHorizontal() ? el.offsetWidth : el.offsetHeight;\n    divider = swiper.size / (swiper.virtualSize + swiper.params.slidesOffsetBefore - (swiper.params.centeredSlides ? swiper.snapGrid[0] : 0));\n    if (swiper.params.scrollbar.dragSize === 'auto') {\n      dragSize = trackSize * divider;\n    } else {\n      dragSize = parseInt(swiper.params.scrollbar.dragSize, 10);\n    }\n    if (swiper.isHorizontal()) {\n      dragEl.style.width = `${dragSize}px`;\n    } else {\n      dragEl.style.height = `${dragSize}px`;\n    }\n    if (divider >= 1) {\n      el.style.display = 'none';\n    } else {\n      el.style.display = '';\n    }\n    if (swiper.params.scrollbar.hide) {\n      el.style.opacity = 0;\n    }\n    if (swiper.params.watchOverflow && swiper.enabled) {\n      scrollbar.el.classList[swiper.isLocked ? 'add' : 'remove'](swiper.params.scrollbar.lockClass);\n    }\n  }\n  function getPointerPosition(e) {\n    return swiper.isHorizontal() ? e.clientX : e.clientY;\n  }\n  function setDragPosition(e) {\n    const {\n      scrollbar,\n      rtlTranslate: rtl\n    } = swiper;\n    const {\n      el\n    } = scrollbar;\n    let positionRatio;\n    positionRatio = (getPointerPosition(e) - elementOffset(el)[swiper.isHorizontal() ? 'left' : 'top'] - (dragStartPos !== null ? dragStartPos : dragSize / 2)) / (trackSize - dragSize);\n    positionRatio = Math.max(Math.min(positionRatio, 1), 0);\n    if (rtl) {\n      positionRatio = 1 - positionRatio;\n    }\n    const position = swiper.minTranslate() + (swiper.maxTranslate() - swiper.minTranslate()) * positionRatio;\n    swiper.updateProgress(position);\n    swiper.setTranslate(position);\n    swiper.updateActiveIndex();\n    swiper.updateSlidesClasses();\n  }\n  function onDragStart(e) {\n    const params = swiper.params.scrollbar;\n    const {\n      scrollbar,\n      wrapperEl\n    } = swiper;\n    const {\n      el,\n      dragEl\n    } = scrollbar;\n    isTouched = true;\n    dragStartPos = e.target === dragEl ? getPointerPosition(e) - e.target.getBoundingClientRect()[swiper.isHorizontal() ? 'left' : 'top'] : null;\n    e.preventDefault();\n    e.stopPropagation();\n    wrapperEl.style.transitionDuration = '100ms';\n    dragEl.style.transitionDuration = '100ms';\n    setDragPosition(e);\n    clearTimeout(dragTimeout);\n    el.style.transitionDuration = '0ms';\n    if (params.hide) {\n      el.style.opacity = 1;\n    }\n    if (swiper.params.cssMode) {\n      swiper.wrapperEl.style['scroll-snap-type'] = 'none';\n    }\n    emit('scrollbarDragStart', e);\n  }\n  function onDragMove(e) {\n    const {\n      scrollbar,\n      wrapperEl\n    } = swiper;\n    const {\n      el,\n      dragEl\n    } = scrollbar;\n    if (!isTouched) return;\n    if (e.preventDefault) e.preventDefault();else e.returnValue = false;\n    setDragPosition(e);\n    wrapperEl.style.transitionDuration = '0ms';\n    el.style.transitionDuration = '0ms';\n    dragEl.style.transitionDuration = '0ms';\n    emit('scrollbarDragMove', e);\n  }\n  function onDragEnd(e) {\n    const params = swiper.params.scrollbar;\n    const {\n      scrollbar,\n      wrapperEl\n    } = swiper;\n    const {\n      el\n    } = scrollbar;\n    if (!isTouched) return;\n    isTouched = false;\n    if (swiper.params.cssMode) {\n      swiper.wrapperEl.style['scroll-snap-type'] = '';\n      wrapperEl.style.transitionDuration = '';\n    }\n    if (params.hide) {\n      clearTimeout(dragTimeout);\n      dragTimeout = nextTick(() => {\n        el.style.opacity = 0;\n        el.style.transitionDuration = '400ms';\n      }, 1000);\n    }\n    emit('scrollbarDragEnd', e);\n    if (params.snapOnRelease) {\n      swiper.slideToClosest();\n    }\n  }\n  function events(method) {\n    const {\n      scrollbar,\n      params\n    } = swiper;\n    const el = scrollbar.el;\n    if (!el) return;\n    const target = el;\n    const activeListener = params.passiveListeners ? {\n      passive: false,\n      capture: false\n    } : false;\n    const passiveListener = params.passiveListeners ? {\n      passive: true,\n      capture: false\n    } : false;\n    if (!target) return;\n    const eventMethod = method === 'on' ? 'addEventListener' : 'removeEventListener';\n    target[eventMethod]('pointerdown', onDragStart, activeListener);\n    document[eventMethod]('pointermove', onDragMove, activeListener);\n    document[eventMethod]('pointerup', onDragEnd, passiveListener);\n  }\n  function enableDraggable() {\n    if (!swiper.params.scrollbar.el || !swiper.scrollbar.el) return;\n    events('on');\n  }\n  function disableDraggable() {\n    if (!swiper.params.scrollbar.el || !swiper.scrollbar.el) return;\n    events('off');\n  }\n  function init() {\n    const {\n      scrollbar,\n      el: swiperEl\n    } = swiper;\n    swiper.params.scrollbar = createElementIfNotDefined(swiper, swiper.originalParams.scrollbar, swiper.params.scrollbar, {\n      el: 'swiper-scrollbar'\n    });\n    const params = swiper.params.scrollbar;\n    if (!params.el) return;\n    let el;\n    if (typeof params.el === 'string' && swiper.isElement) {\n      el = swiper.el.shadowRoot.querySelector(params.el);\n    }\n    if (!el && typeof params.el === 'string') {\n      el = document.querySelectorAll(params.el);\n    } else if (!el) {\n      el = params.el;\n    }\n    if (swiper.params.uniqueNavElements && typeof params.el === 'string' && el.length > 1 && swiperEl.querySelectorAll(params.el).length === 1) {\n      el = swiperEl.querySelector(params.el);\n    }\n    if (el.length > 0) el = el[0];\n    el.classList.add(swiper.isHorizontal() ? params.horizontalClass : params.verticalClass);\n    let dragEl;\n    if (el) {\n      dragEl = el.querySelector(`.${swiper.params.scrollbar.dragClass}`);\n      if (!dragEl) {\n        dragEl = createElement('div', swiper.params.scrollbar.dragClass);\n        el.append(dragEl);\n      }\n    }\n    Object.assign(scrollbar, {\n      el,\n      dragEl\n    });\n    if (params.draggable) {\n      enableDraggable();\n    }\n    if (el) {\n      el.classList[swiper.enabled ? 'remove' : 'add'](swiper.params.scrollbar.lockClass);\n    }\n  }\n  function destroy() {\n    const params = swiper.params.scrollbar;\n    const el = swiper.scrollbar.el;\n    if (el) {\n      el.classList.remove(swiper.isHorizontal() ? params.horizontalClass : params.verticalClass);\n    }\n    disableDraggable();\n  }\n  on('init', () => {\n    if (swiper.params.scrollbar.enabled === false) {\n      // eslint-disable-next-line\n      disable();\n    } else {\n      init();\n      updateSize();\n      setTranslate();\n    }\n  });\n  on('update resize observerUpdate lock unlock', () => {\n    updateSize();\n  });\n  on('setTranslate', () => {\n    setTranslate();\n  });\n  on('setTransition', (_s, duration) => {\n    setTransition(duration);\n  });\n  on('enable disable', () => {\n    const {\n      el\n    } = swiper.scrollbar;\n    if (el) {\n      el.classList[swiper.enabled ? 'remove' : 'add'](swiper.params.scrollbar.lockClass);\n    }\n  });\n  on('destroy', () => {\n    destroy();\n  });\n  const enable = () => {\n    swiper.el.classList.remove(swiper.params.scrollbar.scrollbarDisabledClass);\n    if (swiper.scrollbar.el) {\n      swiper.scrollbar.el.classList.remove(swiper.params.scrollbar.scrollbarDisabledClass);\n    }\n    init();\n    updateSize();\n    setTranslate();\n  };\n  const disable = () => {\n    swiper.el.classList.add(swiper.params.scrollbar.scrollbarDisabledClass);\n    if (swiper.scrollbar.el) {\n      swiper.scrollbar.el.classList.add(swiper.params.scrollbar.scrollbarDisabledClass);\n    }\n    destroy();\n  };\n  Object.assign(swiper.scrollbar, {\n    enable,\n    disable,\n    updateSize,\n    setTranslate,\n    init,\n    destroy\n  });\n}","import { getDocument } from 'ssr-window';\nimport { elementChildren, isObject } from '../../shared/utils.js';\nexport default function Thumb({\n  swiper,\n  extendParams,\n  on\n}) {\n  extendParams({\n    thumbs: {\n      swiper: null,\n      multipleActiveThumbs: true,\n      autoScrollOffset: 0,\n      slideThumbActiveClass: 'swiper-slide-thumb-active',\n      thumbsContainerClass: 'swiper-thumbs'\n    }\n  });\n  let initialized = false;\n  let swiperCreated = false;\n  swiper.thumbs = {\n    swiper: null\n  };\n  function onThumbClick() {\n    const thumbsSwiper = swiper.thumbs.swiper;\n    if (!thumbsSwiper || thumbsSwiper.destroyed) return;\n    const clickedIndex = thumbsSwiper.clickedIndex;\n    const clickedSlide = thumbsSwiper.clickedSlide;\n    if (clickedSlide && clickedSlide.classList.contains(swiper.params.thumbs.slideThumbActiveClass)) return;\n    if (typeof clickedIndex === 'undefined' || clickedIndex === null) return;\n    let slideToIndex;\n    if (thumbsSwiper.params.loop) {\n      slideToIndex = parseInt(thumbsSwiper.clickedSlide.getAttribute('data-swiper-slide-index'), 10);\n    } else {\n      slideToIndex = clickedIndex;\n    }\n    if (swiper.params.loop) {\n      swiper.slideToLoop(slideToIndex);\n    } else {\n      swiper.slideTo(slideToIndex);\n    }\n  }\n  function init() {\n    const {\n      thumbs: thumbsParams\n    } = swiper.params;\n    if (initialized) return false;\n    initialized = true;\n    const SwiperClass = swiper.constructor;\n    if (thumbsParams.swiper instanceof SwiperClass) {\n      swiper.thumbs.swiper = thumbsParams.swiper;\n      Object.assign(swiper.thumbs.swiper.originalParams, {\n        watchSlidesProgress: true,\n        slideToClickedSlide: false\n      });\n      Object.assign(swiper.thumbs.swiper.params, {\n        watchSlidesProgress: true,\n        slideToClickedSlide: false\n      });\n      swiper.thumbs.swiper.update();\n    } else if (isObject(thumbsParams.swiper)) {\n      const thumbsSwiperParams = Object.assign({}, thumbsParams.swiper);\n      Object.assign(thumbsSwiperParams, {\n        watchSlidesProgress: true,\n        slideToClickedSlide: false\n      });\n      swiper.thumbs.swiper = new SwiperClass(thumbsSwiperParams);\n      swiperCreated = true;\n    }\n    swiper.thumbs.swiper.el.classList.add(swiper.params.thumbs.thumbsContainerClass);\n    swiper.thumbs.swiper.on('tap', onThumbClick);\n    return true;\n  }\n  function update(initial) {\n    const thumbsSwiper = swiper.thumbs.swiper;\n    if (!thumbsSwiper || thumbsSwiper.destroyed) return;\n    const slidesPerView = thumbsSwiper.params.slidesPerView === 'auto' ? thumbsSwiper.slidesPerViewDynamic() : thumbsSwiper.params.slidesPerView;\n\n    // Activate thumbs\n    let thumbsToActivate = 1;\n    const thumbActiveClass = swiper.params.thumbs.slideThumbActiveClass;\n    if (swiper.params.slidesPerView > 1 && !swiper.params.centeredSlides) {\n      thumbsToActivate = swiper.params.slidesPerView;\n    }\n    if (!swiper.params.thumbs.multipleActiveThumbs) {\n      thumbsToActivate = 1;\n    }\n    thumbsToActivate = Math.floor(thumbsToActivate);\n    thumbsSwiper.slides.forEach(slideEl => slideEl.classList.remove(thumbActiveClass));\n    if (thumbsSwiper.params.loop || thumbsSwiper.params.virtual && thumbsSwiper.params.virtual.enabled) {\n      for (let i = 0; i < thumbsToActivate; i += 1) {\n        elementChildren(thumbsSwiper.slidesEl, `[data-swiper-slide-index=\"${swiper.realIndex + i}\"]`).forEach(slideEl => {\n          slideEl.classList.add(thumbActiveClass);\n        });\n      }\n    } else {\n      for (let i = 0; i < thumbsToActivate; i += 1) {\n        if (thumbsSwiper.slides[swiper.realIndex + i]) {\n          thumbsSwiper.slides[swiper.realIndex + i].classList.add(thumbActiveClass);\n        }\n      }\n    }\n    const autoScrollOffset = swiper.params.thumbs.autoScrollOffset;\n    const useOffset = autoScrollOffset && !thumbsSwiper.params.loop;\n    if (swiper.realIndex !== thumbsSwiper.realIndex || useOffset) {\n      const currentThumbsIndex = thumbsSwiper.activeIndex;\n      let newThumbsIndex;\n      let direction;\n      if (thumbsSwiper.params.loop) {\n        const newThumbsSlide = thumbsSwiper.slides.filter(slideEl => slideEl.getAttribute('data-swiper-slide-index') === `${swiper.realIndex}`)[0];\n        newThumbsIndex = thumbsSwiper.slides.indexOf(newThumbsSlide);\n        direction = swiper.activeIndex > swiper.previousIndex ? 'next' : 'prev';\n      } else {\n        newThumbsIndex = swiper.realIndex;\n        direction = newThumbsIndex > swiper.previousIndex ? 'next' : 'prev';\n      }\n      if (useOffset) {\n        newThumbsIndex += direction === 'next' ? autoScrollOffset : -1 * autoScrollOffset;\n      }\n      if (thumbsSwiper.visibleSlidesIndexes && thumbsSwiper.visibleSlidesIndexes.indexOf(newThumbsIndex) < 0) {\n        if (thumbsSwiper.params.centeredSlides) {\n          if (newThumbsIndex > currentThumbsIndex) {\n            newThumbsIndex = newThumbsIndex - Math.floor(slidesPerView / 2) + 1;\n          } else {\n            newThumbsIndex = newThumbsIndex + Math.floor(slidesPerView / 2) - 1;\n          }\n        } else if (newThumbsIndex > currentThumbsIndex && thumbsSwiper.params.slidesPerGroup === 1) {\n          // newThumbsIndex = newThumbsIndex - slidesPerView + 1;\n        }\n        thumbsSwiper.slideTo(newThumbsIndex, initial ? 0 : undefined);\n      }\n    }\n  }\n  on('beforeInit', () => {\n    const {\n      thumbs\n    } = swiper.params;\n    if (!thumbs || !thumbs.swiper) return;\n    if (typeof thumbs.swiper === 'string' || thumbs.swiper instanceof HTMLElement) {\n      const document = getDocument();\n      const getThumbsElementAndInit = () => {\n        const thumbsElement = typeof thumbs.swiper === 'string' ? document.querySelector(thumbs.swiper) : thumbs.swiper;\n        if (thumbsElement && thumbsElement.swiper) {\n          thumbs.swiper = thumbsElement.swiper;\n          init();\n          update(true);\n        } else if (thumbsElement) {\n          const onThumbsSwiper = e => {\n            thumbs.swiper = e.detail[0];\n            thumbsElement.removeEventListener('init', onThumbsSwiper);\n            init();\n            update(true);\n            thumbs.swiper.update();\n            swiper.update();\n          };\n          thumbsElement.addEventListener('init', onThumbsSwiper);\n        }\n        return thumbsElement;\n      };\n      const watchForThumbsToAppear = () => {\n        if (swiper.destroyed) return;\n        const thumbsElement = getThumbsElementAndInit();\n        if (!thumbsElement) {\n          requestAnimationFrame(watchForThumbsToAppear);\n        }\n      };\n      requestAnimationFrame(watchForThumbsToAppear);\n    } else {\n      init();\n      update(true);\n    }\n  });\n  on('slideChange update resize observerUpdate', () => {\n    update();\n  });\n  on('setTransition', (_s, duration) => {\n    const thumbsSwiper = swiper.thumbs.swiper;\n    if (!thumbsSwiper || thumbsSwiper.destroyed) return;\n    thumbsSwiper.setTransition(duration);\n  });\n  on('beforeDestroy', () => {\n    const thumbsSwiper = swiper.thumbs.swiper;\n    if (!thumbsSwiper || thumbsSwiper.destroyed) return;\n    if (swiperCreated) {\n      thumbsSwiper.destroy();\n    }\n  });\n  Object.assign(swiper.thumbs, {\n    init,\n    update\n  });\n}","import { getDocument } from 'ssr-window';\nimport { createElement, elementChildren, setCSSProperty } from '../../shared/utils.js';\nexport default function Virtual({\n  swiper,\n  extendParams,\n  on,\n  emit\n}) {\n  extendParams({\n    virtual: {\n      enabled: false,\n      slides: [],\n      cache: true,\n      renderSlide: null,\n      renderExternal: null,\n      renderExternalUpdate: true,\n      addSlidesBefore: 0,\n      addSlidesAfter: 0\n    }\n  });\n  let cssModeTimeout;\n  const document = getDocument();\n  swiper.virtual = {\n    cache: {},\n    from: undefined,\n    to: undefined,\n    slides: [],\n    offset: 0,\n    slidesGrid: []\n  };\n  const tempDOM = document.createElement('div');\n  function renderSlide(slide, index) {\n    const params = swiper.params.virtual;\n    if (params.cache && swiper.virtual.cache[index]) {\n      return swiper.virtual.cache[index];\n    }\n    // eslint-disable-next-line\n    let slideEl;\n    if (params.renderSlide) {\n      slideEl = params.renderSlide.call(swiper, slide, index);\n      if (typeof slideEl === 'string') {\n        tempDOM.innerHTML = slideEl;\n        slideEl = tempDOM.children[0];\n      }\n    } else if (swiper.isElement) {\n      slideEl = createElement('swiper-slide');\n    } else {\n      slideEl = createElement('div', swiper.params.slideClass);\n    }\n    slideEl.setAttribute('data-swiper-slide-index', index);\n    if (!params.renderSlide) {\n      slideEl.innerHTML = slide;\n    }\n    if (params.cache) swiper.virtual.cache[index] = slideEl;\n    return slideEl;\n  }\n  function update(force) {\n    const {\n      slidesPerView,\n      slidesPerGroup,\n      centeredSlides,\n      loop: isLoop\n    } = swiper.params;\n    const {\n      addSlidesBefore,\n      addSlidesAfter\n    } = swiper.params.virtual;\n    const {\n      from: previousFrom,\n      to: previousTo,\n      slides,\n      slidesGrid: previousSlidesGrid,\n      offset: previousOffset\n    } = swiper.virtual;\n    if (!swiper.params.cssMode) {\n      swiper.updateActiveIndex();\n    }\n    const activeIndex = swiper.activeIndex || 0;\n    let offsetProp;\n    if (swiper.rtlTranslate) offsetProp = 'right';else offsetProp = swiper.isHorizontal() ? 'left' : 'top';\n    let slidesAfter;\n    let slidesBefore;\n    if (centeredSlides) {\n      slidesAfter = Math.floor(slidesPerView / 2) + slidesPerGroup + addSlidesAfter;\n      slidesBefore = Math.floor(slidesPerView / 2) + slidesPerGroup + addSlidesBefore;\n    } else {\n      slidesAfter = slidesPerView + (slidesPerGroup - 1) + addSlidesAfter;\n      slidesBefore = (isLoop ? slidesPerView : slidesPerGroup) + addSlidesBefore;\n    }\n    let from = activeIndex - slidesBefore;\n    let to = activeIndex + slidesAfter;\n    if (!isLoop) {\n      from = Math.max(from, 0);\n      to = Math.min(to, slides.length - 1);\n    }\n    let offset = (swiper.slidesGrid[from] || 0) - (swiper.slidesGrid[0] || 0);\n    if (isLoop && activeIndex >= slidesBefore) {\n      from -= slidesBefore;\n      if (!centeredSlides) offset += swiper.slidesGrid[0];\n    } else if (isLoop && activeIndex < slidesBefore) {\n      from = -slidesBefore;\n      if (centeredSlides) offset += swiper.slidesGrid[0];\n    }\n    Object.assign(swiper.virtual, {\n      from,\n      to,\n      offset,\n      slidesGrid: swiper.slidesGrid,\n      slidesBefore,\n      slidesAfter\n    });\n    function onRendered() {\n      swiper.updateSlides();\n      swiper.updateProgress();\n      swiper.updateSlidesClasses();\n      emit('virtualUpdate');\n    }\n    if (previousFrom === from && previousTo === to && !force) {\n      if (swiper.slidesGrid !== previousSlidesGrid && offset !== previousOffset) {\n        swiper.slides.forEach(slideEl => {\n          slideEl.style[offsetProp] = `${offset - Math.abs(swiper.cssOverflowAdjustment())}px`;\n        });\n      }\n      swiper.updateProgress();\n      emit('virtualUpdate');\n      return;\n    }\n    if (swiper.params.virtual.renderExternal) {\n      swiper.params.virtual.renderExternal.call(swiper, {\n        offset,\n        from,\n        to,\n        slides: function getSlides() {\n          const slidesToRender = [];\n          for (let i = from; i <= to; i += 1) {\n            slidesToRender.push(slides[i]);\n          }\n          return slidesToRender;\n        }()\n      });\n      if (swiper.params.virtual.renderExternalUpdate) {\n        onRendered();\n      } else {\n        emit('virtualUpdate');\n      }\n      return;\n    }\n    const prependIndexes = [];\n    const appendIndexes = [];\n    const getSlideIndex = index => {\n      let slideIndex = index;\n      if (index < 0) {\n        slideIndex = slides.length + index;\n      } else if (slideIndex >= slides.length) {\n        // eslint-disable-next-line\n        slideIndex = slideIndex - slides.length;\n      }\n      return slideIndex;\n    };\n    if (force) {\n      swiper.slidesEl.querySelectorAll(`.${swiper.params.slideClass}, swiper-slide`).forEach(slideEl => {\n        slideEl.remove();\n      });\n    } else {\n      for (let i = previousFrom; i <= previousTo; i += 1) {\n        if (i < from || i > to) {\n          const slideIndex = getSlideIndex(i);\n          swiper.slidesEl.querySelectorAll(`.${swiper.params.slideClass}[data-swiper-slide-index=\"${slideIndex}\"], swiper-slide[data-swiper-slide-index=\"${slideIndex}\"]`).forEach(slideEl => {\n            slideEl.remove();\n          });\n        }\n      }\n    }\n    const loopFrom = isLoop ? -slides.length : 0;\n    const loopTo = isLoop ? slides.length * 2 : slides.length;\n    for (let i = loopFrom; i < loopTo; i += 1) {\n      if (i >= from && i <= to) {\n        const slideIndex = getSlideIndex(i);\n        if (typeof previousTo === 'undefined' || force) {\n          appendIndexes.push(slideIndex);\n        } else {\n          if (i > previousTo) appendIndexes.push(slideIndex);\n          if (i < previousFrom) prependIndexes.push(slideIndex);\n        }\n      }\n    }\n    appendIndexes.forEach(index => {\n      swiper.slidesEl.append(renderSlide(slides[index], index));\n    });\n    if (isLoop) {\n      for (let i = prependIndexes.length - 1; i >= 0; i -= 1) {\n        const index = prependIndexes[i];\n        swiper.slidesEl.prepend(renderSlide(slides[index], index));\n      }\n    } else {\n      prependIndexes.sort((a, b) => b - a);\n      prependIndexes.forEach(index => {\n        swiper.slidesEl.prepend(renderSlide(slides[index], index));\n      });\n    }\n    elementChildren(swiper.slidesEl, '.swiper-slide, swiper-slide').forEach(slideEl => {\n      slideEl.style[offsetProp] = `${offset - Math.abs(swiper.cssOverflowAdjustment())}px`;\n    });\n    onRendered();\n  }\n  function appendSlide(slides) {\n    if (typeof slides === 'object' && 'length' in slides) {\n      for (let i = 0; i < slides.length; i += 1) {\n        if (slides[i]) swiper.virtual.slides.push(slides[i]);\n      }\n    } else {\n      swiper.virtual.slides.push(slides);\n    }\n    update(true);\n  }\n  function prependSlide(slides) {\n    const activeIndex = swiper.activeIndex;\n    let newActiveIndex = activeIndex + 1;\n    let numberOfNewSlides = 1;\n    if (Array.isArray(slides)) {\n      for (let i = 0; i < slides.length; i += 1) {\n        if (slides[i]) swiper.virtual.slides.unshift(slides[i]);\n      }\n      newActiveIndex = activeIndex + slides.length;\n      numberOfNewSlides = slides.length;\n    } else {\n      swiper.virtual.slides.unshift(slides);\n    }\n    if (swiper.params.virtual.cache) {\n      const cache = swiper.virtual.cache;\n      const newCache = {};\n      Object.keys(cache).forEach(cachedIndex => {\n        const cachedEl = cache[cachedIndex];\n        const cachedElIndex = cachedEl.getAttribute('data-swiper-slide-index');\n        if (cachedElIndex) {\n          cachedEl.setAttribute('data-swiper-slide-index', parseInt(cachedElIndex, 10) + numberOfNewSlides);\n        }\n        newCache[parseInt(cachedIndex, 10) + numberOfNewSlides] = cachedEl;\n      });\n      swiper.virtual.cache = newCache;\n    }\n    update(true);\n    swiper.slideTo(newActiveIndex, 0);\n  }\n  function removeSlide(slidesIndexes) {\n    if (typeof slidesIndexes === 'undefined' || slidesIndexes === null) return;\n    let activeIndex = swiper.activeIndex;\n    if (Array.isArray(slidesIndexes)) {\n      for (let i = slidesIndexes.length - 1; i >= 0; i -= 1) {\n        swiper.virtual.slides.splice(slidesIndexes[i], 1);\n        if (swiper.params.virtual.cache) {\n          delete swiper.virtual.cache[slidesIndexes[i]];\n        }\n        if (slidesIndexes[i] < activeIndex) activeIndex -= 1;\n        activeIndex = Math.max(activeIndex, 0);\n      }\n    } else {\n      swiper.virtual.slides.splice(slidesIndexes, 1);\n      if (swiper.params.virtual.cache) {\n        delete swiper.virtual.cache[slidesIndexes];\n      }\n      if (slidesIndexes < activeIndex) activeIndex -= 1;\n      activeIndex = Math.max(activeIndex, 0);\n    }\n    update(true);\n    swiper.slideTo(activeIndex, 0);\n  }\n  function removeAllSlides() {\n    swiper.virtual.slides = [];\n    if (swiper.params.virtual.cache) {\n      swiper.virtual.cache = {};\n    }\n    update(true);\n    swiper.slideTo(0, 0);\n  }\n  on('beforeInit', () => {\n    if (!swiper.params.virtual.enabled) return;\n    let domSlidesAssigned;\n    if (typeof swiper.passedParams.virtual.slides === 'undefined') {\n      const slides = [...swiper.slidesEl.children].filter(el => el.matches(`.${swiper.params.slideClass}, swiper-slide`));\n      if (slides && slides.length) {\n        swiper.virtual.slides = [...slides];\n        domSlidesAssigned = true;\n        slides.forEach((slideEl, slideIndex) => {\n          slideEl.setAttribute('data-swiper-slide-index', slideIndex);\n          swiper.virtual.cache[slideIndex] = slideEl;\n          slideEl.remove();\n        });\n      }\n    }\n    if (!domSlidesAssigned) {\n      swiper.virtual.slides = swiper.params.virtual.slides;\n    }\n    swiper.classNames.push(`${swiper.params.containerModifierClass}virtual`);\n    swiper.params.watchSlidesProgress = true;\n    swiper.originalParams.watchSlidesProgress = true;\n    if (!swiper.params.initialSlide) {\n      update();\n    }\n  });\n  on('setTranslate', () => {\n    if (!swiper.params.virtual.enabled) return;\n    if (swiper.params.cssMode && !swiper._immediateVirtual) {\n      clearTimeout(cssModeTimeout);\n      cssModeTimeout = setTimeout(() => {\n        update();\n      }, 100);\n    } else {\n      update();\n    }\n  });\n  on('init update resize', () => {\n    if (!swiper.params.virtual.enabled) return;\n    if (swiper.params.cssMode) {\n      setCSSProperty(swiper.wrapperEl, '--swiper-virtual-size', `${swiper.virtualSize}px`);\n    }\n  });\n  Object.assign(swiper.virtual, {\n    appendSlide,\n    prependSlide,\n    removeSlide,\n    removeAllSlides,\n    update\n  });\n}","import { getWindow } from 'ssr-window';\nimport { elementChildren, elementOffset, elementParents, getTranslate } from '../../shared/utils.js';\nexport default function Zoom({\n  swiper,\n  extendParams,\n  on,\n  emit\n}) {\n  const window = getWindow();\n  extendParams({\n    zoom: {\n      enabled: false,\n      maxRatio: 3,\n      minRatio: 1,\n      toggle: true,\n      containerClass: 'swiper-zoom-container',\n      zoomedSlideClass: 'swiper-slide-zoomed'\n    }\n  });\n  swiper.zoom = {\n    enabled: false\n  };\n  let currentScale = 1;\n  let isScaling = false;\n  let fakeGestureTouched;\n  let fakeGestureMoved;\n  const evCache = [];\n  const gesture = {\n    originX: 0,\n    originY: 0,\n    slideEl: undefined,\n    slideWidth: undefined,\n    slideHeight: undefined,\n    imageEl: undefined,\n    imageWrapEl: undefined,\n    maxRatio: 3\n  };\n  const image = {\n    isTouched: undefined,\n    isMoved: undefined,\n    currentX: undefined,\n    currentY: undefined,\n    minX: undefined,\n    minY: undefined,\n    maxX: undefined,\n    maxY: undefined,\n    width: undefined,\n    height: undefined,\n    startX: undefined,\n    startY: undefined,\n    touchesStart: {},\n    touchesCurrent: {}\n  };\n  const velocity = {\n    x: undefined,\n    y: undefined,\n    prevPositionX: undefined,\n    prevPositionY: undefined,\n    prevTime: undefined\n  };\n  let scale = 1;\n  Object.defineProperty(swiper.zoom, 'scale', {\n    get() {\n      return scale;\n    },\n    set(value) {\n      if (scale !== value) {\n        const imageEl = gesture.imageEl;\n        const slideEl = gesture.slideEl;\n        emit('zoomChange', value, imageEl, slideEl);\n      }\n      scale = value;\n    }\n  });\n  function getDistanceBetweenTouches() {\n    if (evCache.length < 2) return 1;\n    const x1 = evCache[0].pageX;\n    const y1 = evCache[0].pageY;\n    const x2 = evCache[1].pageX;\n    const y2 = evCache[1].pageY;\n    const distance = Math.sqrt((x2 - x1) ** 2 + (y2 - y1) ** 2);\n    return distance;\n  }\n  function getScaleOrigin() {\n    if (evCache.length < 2) return {\n      x: null,\n      y: null\n    };\n    const box = gesture.imageEl.getBoundingClientRect();\n    return [(evCache[0].pageX + (evCache[1].pageX - evCache[0].pageX) / 2 - box.x) / currentScale, (evCache[0].pageY + (evCache[1].pageY - evCache[0].pageY) / 2 - box.y) / currentScale];\n  }\n  function getSlideSelector() {\n    return swiper.isElement ? `swiper-slide` : `.${swiper.params.slideClass}`;\n  }\n  function eventWithinSlide(e) {\n    const slideSelector = getSlideSelector();\n    if (e.target.matches(slideSelector)) return true;\n    if (swiper.slides.filter(slideEl => slideEl.contains(e.target)).length > 0) return true;\n    return false;\n  }\n  function eventWithinZoomContainer(e) {\n    const selector = `.${swiper.params.zoom.containerClass}`;\n    if (e.target.matches(selector)) return true;\n    if ([...swiper.el.querySelectorAll(selector)].filter(containerEl => containerEl.contains(e.target)).length > 0) return true;\n    return false;\n  }\n\n  // Events\n  function onGestureStart(e) {\n    if (e.pointerType === 'mouse') {\n      evCache.splice(0, evCache.length);\n    }\n    if (!eventWithinSlide(e)) return;\n    const params = swiper.params.zoom;\n    fakeGestureTouched = false;\n    fakeGestureMoved = false;\n    evCache.push(e);\n    if (evCache.length < 2) {\n      return;\n    }\n    fakeGestureTouched = true;\n    gesture.scaleStart = getDistanceBetweenTouches();\n    if (!gesture.slideEl) {\n      gesture.slideEl = e.target.closest(`.${swiper.params.slideClass}, swiper-slide`);\n      if (!gesture.slideEl) gesture.slideEl = swiper.slides[swiper.activeIndex];\n      let imageEl = gesture.slideEl.querySelector(`.${params.containerClass}`);\n      if (imageEl) {\n        imageEl = imageEl.querySelectorAll('picture, img, svg, canvas, .swiper-zoom-target')[0];\n      }\n      gesture.imageEl = imageEl;\n      if (imageEl) {\n        gesture.imageWrapEl = elementParents(gesture.imageEl, `.${params.containerClass}`)[0];\n      } else {\n        gesture.imageWrapEl = undefined;\n      }\n      if (!gesture.imageWrapEl) {\n        gesture.imageEl = undefined;\n        return;\n      }\n      gesture.maxRatio = gesture.imageWrapEl.getAttribute('data-swiper-zoom') || params.maxRatio;\n    }\n    if (gesture.imageEl) {\n      const [originX, originY] = getScaleOrigin();\n      gesture.originX = originX;\n      gesture.originY = originY;\n      gesture.imageEl.style.transitionDuration = '0ms';\n    }\n    isScaling = true;\n  }\n  function onGestureChange(e) {\n    if (!eventWithinSlide(e)) return;\n    const params = swiper.params.zoom;\n    const zoom = swiper.zoom;\n    const pointerIndex = evCache.findIndex(cachedEv => cachedEv.pointerId === e.pointerId);\n    if (pointerIndex >= 0) evCache[pointerIndex] = e;\n    if (evCache.length < 2) {\n      return;\n    }\n    fakeGestureMoved = true;\n    gesture.scaleMove = getDistanceBetweenTouches();\n    if (!gesture.imageEl) {\n      return;\n    }\n    zoom.scale = gesture.scaleMove / gesture.scaleStart * currentScale;\n    if (zoom.scale > gesture.maxRatio) {\n      zoom.scale = gesture.maxRatio - 1 + (zoom.scale - gesture.maxRatio + 1) ** 0.5;\n    }\n    if (zoom.scale < params.minRatio) {\n      zoom.scale = params.minRatio + 1 - (params.minRatio - zoom.scale + 1) ** 0.5;\n    }\n    gesture.imageEl.style.transform = `translate3d(0,0,0) scale(${zoom.scale})`;\n  }\n  function onGestureEnd(e) {\n    if (!eventWithinSlide(e)) return;\n    if (e.pointerType === 'mouse' && e.type === 'pointerout') return;\n    const params = swiper.params.zoom;\n    const zoom = swiper.zoom;\n    const pointerIndex = evCache.findIndex(cachedEv => cachedEv.pointerId === e.pointerId);\n    if (pointerIndex >= 0) evCache.splice(pointerIndex, 1);\n    if (!fakeGestureTouched || !fakeGestureMoved) {\n      return;\n    }\n    fakeGestureTouched = false;\n    fakeGestureMoved = false;\n    if (!gesture.imageEl) return;\n    zoom.scale = Math.max(Math.min(zoom.scale, gesture.maxRatio), params.minRatio);\n    gesture.imageEl.style.transitionDuration = `${swiper.params.speed}ms`;\n    gesture.imageEl.style.transform = `translate3d(0,0,0) scale(${zoom.scale})`;\n    currentScale = zoom.scale;\n    isScaling = false;\n    if (zoom.scale > 1 && gesture.slideEl) {\n      gesture.slideEl.classList.add(`${params.zoomedSlideClass}`);\n    } else if (zoom.scale <= 1 && gesture.slideEl) {\n      gesture.slideEl.classList.remove(`${params.zoomedSlideClass}`);\n    }\n    if (zoom.scale === 1) {\n      gesture.originX = 0;\n      gesture.originY = 0;\n      gesture.slideEl = undefined;\n    }\n  }\n  function onTouchStart(e) {\n    const device = swiper.device;\n    if (!gesture.imageEl) return;\n    if (image.isTouched) return;\n    if (device.android && e.cancelable) e.preventDefault();\n    image.isTouched = true;\n    const event = evCache.length > 0 ? evCache[0] : e;\n    image.touchesStart.x = event.pageX;\n    image.touchesStart.y = event.pageY;\n  }\n  function onTouchMove(e) {\n    if (!eventWithinSlide(e) || !eventWithinZoomContainer(e)) return;\n    const zoom = swiper.zoom;\n    if (!gesture.imageEl) return;\n    if (!image.isTouched || !gesture.slideEl) return;\n    if (!image.isMoved) {\n      image.width = gesture.imageEl.offsetWidth;\n      image.height = gesture.imageEl.offsetHeight;\n      image.startX = getTranslate(gesture.imageWrapEl, 'x') || 0;\n      image.startY = getTranslate(gesture.imageWrapEl, 'y') || 0;\n      gesture.slideWidth = gesture.slideEl.offsetWidth;\n      gesture.slideHeight = gesture.slideEl.offsetHeight;\n      gesture.imageWrapEl.style.transitionDuration = '0ms';\n    }\n    // Define if we need image drag\n    const scaledWidth = image.width * zoom.scale;\n    const scaledHeight = image.height * zoom.scale;\n    if (scaledWidth < gesture.slideWidth && scaledHeight < gesture.slideHeight) return;\n    image.minX = Math.min(gesture.slideWidth / 2 - scaledWidth / 2, 0);\n    image.maxX = -image.minX;\n    image.minY = Math.min(gesture.slideHeight / 2 - scaledHeight / 2, 0);\n    image.maxY = -image.minY;\n    image.touchesCurrent.x = evCache.length > 0 ? evCache[0].pageX : e.pageX;\n    image.touchesCurrent.y = evCache.length > 0 ? evCache[0].pageY : e.pageY;\n    const touchesDiff = Math.max(Math.abs(image.touchesCurrent.x - image.touchesStart.x), Math.abs(image.touchesCurrent.y - image.touchesStart.y));\n    if (touchesDiff > 5) {\n      swiper.allowClick = false;\n    }\n    if (!image.isMoved && !isScaling) {\n      if (swiper.isHorizontal() && (Math.floor(image.minX) === Math.floor(image.startX) && image.touchesCurrent.x < image.touchesStart.x || Math.floor(image.maxX) === Math.floor(image.startX) && image.touchesCurrent.x > image.touchesStart.x)) {\n        image.isTouched = false;\n        return;\n      }\n      if (!swiper.isHorizontal() && (Math.floor(image.minY) === Math.floor(image.startY) && image.touchesCurrent.y < image.touchesStart.y || Math.floor(image.maxY) === Math.floor(image.startY) && image.touchesCurrent.y > image.touchesStart.y)) {\n        image.isTouched = false;\n        return;\n      }\n    }\n    if (e.cancelable) {\n      e.preventDefault();\n    }\n    e.stopPropagation();\n    image.isMoved = true;\n    const scaleRatio = (zoom.scale - currentScale) / (gesture.maxRatio - swiper.params.zoom.minRatio);\n    const {\n      originX,\n      originY\n    } = gesture;\n    image.currentX = image.touchesCurrent.x - image.touchesStart.x + image.startX + scaleRatio * (image.width - originX * 2);\n    image.currentY = image.touchesCurrent.y - image.touchesStart.y + image.startY + scaleRatio * (image.height - originY * 2);\n    if (image.currentX < image.minX) {\n      image.currentX = image.minX + 1 - (image.minX - image.currentX + 1) ** 0.8;\n    }\n    if (image.currentX > image.maxX) {\n      image.currentX = image.maxX - 1 + (image.currentX - image.maxX + 1) ** 0.8;\n    }\n    if (image.currentY < image.minY) {\n      image.currentY = image.minY + 1 - (image.minY - image.currentY + 1) ** 0.8;\n    }\n    if (image.currentY > image.maxY) {\n      image.currentY = image.maxY - 1 + (image.currentY - image.maxY + 1) ** 0.8;\n    }\n\n    // Velocity\n    if (!velocity.prevPositionX) velocity.prevPositionX = image.touchesCurrent.x;\n    if (!velocity.prevPositionY) velocity.prevPositionY = image.touchesCurrent.y;\n    if (!velocity.prevTime) velocity.prevTime = Date.now();\n    velocity.x = (image.touchesCurrent.x - velocity.prevPositionX) / (Date.now() - velocity.prevTime) / 2;\n    velocity.y = (image.touchesCurrent.y - velocity.prevPositionY) / (Date.now() - velocity.prevTime) / 2;\n    if (Math.abs(image.touchesCurrent.x - velocity.prevPositionX) < 2) velocity.x = 0;\n    if (Math.abs(image.touchesCurrent.y - velocity.prevPositionY) < 2) velocity.y = 0;\n    velocity.prevPositionX = image.touchesCurrent.x;\n    velocity.prevPositionY = image.touchesCurrent.y;\n    velocity.prevTime = Date.now();\n    gesture.imageWrapEl.style.transform = `translate3d(${image.currentX}px, ${image.currentY}px,0)`;\n  }\n  function onTouchEnd() {\n    const zoom = swiper.zoom;\n    if (!gesture.imageEl) return;\n    if (!image.isTouched || !image.isMoved) {\n      image.isTouched = false;\n      image.isMoved = false;\n      return;\n    }\n    image.isTouched = false;\n    image.isMoved = false;\n    let momentumDurationX = 300;\n    let momentumDurationY = 300;\n    const momentumDistanceX = velocity.x * momentumDurationX;\n    const newPositionX = image.currentX + momentumDistanceX;\n    const momentumDistanceY = velocity.y * momentumDurationY;\n    const newPositionY = image.currentY + momentumDistanceY;\n\n    // Fix duration\n    if (velocity.x !== 0) momentumDurationX = Math.abs((newPositionX - image.currentX) / velocity.x);\n    if (velocity.y !== 0) momentumDurationY = Math.abs((newPositionY - image.currentY) / velocity.y);\n    const momentumDuration = Math.max(momentumDurationX, momentumDurationY);\n    image.currentX = newPositionX;\n    image.currentY = newPositionY;\n    // Define if we need image drag\n    const scaledWidth = image.width * zoom.scale;\n    const scaledHeight = image.height * zoom.scale;\n    image.minX = Math.min(gesture.slideWidth / 2 - scaledWidth / 2, 0);\n    image.maxX = -image.minX;\n    image.minY = Math.min(gesture.slideHeight / 2 - scaledHeight / 2, 0);\n    image.maxY = -image.minY;\n    image.currentX = Math.max(Math.min(image.currentX, image.maxX), image.minX);\n    image.currentY = Math.max(Math.min(image.currentY, image.maxY), image.minY);\n    gesture.imageWrapEl.style.transitionDuration = `${momentumDuration}ms`;\n    gesture.imageWrapEl.style.transform = `translate3d(${image.currentX}px, ${image.currentY}px,0)`;\n  }\n  function onTransitionEnd() {\n    const zoom = swiper.zoom;\n    if (gesture.slideEl && swiper.activeIndex !== swiper.slides.indexOf(gesture.slideEl)) {\n      if (gesture.imageEl) {\n        gesture.imageEl.style.transform = 'translate3d(0,0,0) scale(1)';\n      }\n      if (gesture.imageWrapEl) {\n        gesture.imageWrapEl.style.transform = 'translate3d(0,0,0)';\n      }\n      gesture.slideEl.classList.remove(`${swiper.params.zoom.zoomedSlideClass}`);\n      zoom.scale = 1;\n      currentScale = 1;\n      gesture.slideEl = undefined;\n      gesture.imageEl = undefined;\n      gesture.imageWrapEl = undefined;\n      gesture.originX = 0;\n      gesture.originY = 0;\n    }\n  }\n  function zoomIn(e) {\n    const zoom = swiper.zoom;\n    const params = swiper.params.zoom;\n    if (!gesture.slideEl) {\n      if (e && e.target) {\n        gesture.slideEl = e.target.closest(`.${swiper.params.slideClass}, swiper-slide`);\n      }\n      if (!gesture.slideEl) {\n        if (swiper.params.virtual && swiper.params.virtual.enabled && swiper.virtual) {\n          gesture.slideEl = elementChildren(swiper.slidesEl, `.${swiper.params.slideActiveClass}`)[0];\n        } else {\n          gesture.slideEl = swiper.slides[swiper.activeIndex];\n        }\n      }\n      let imageEl = gesture.slideEl.querySelector(`.${params.containerClass}`);\n      if (imageEl) {\n        imageEl = imageEl.querySelectorAll('picture, img, svg, canvas, .swiper-zoom-target')[0];\n      }\n      gesture.imageEl = imageEl;\n      if (imageEl) {\n        gesture.imageWrapEl = elementParents(gesture.imageEl, `.${params.containerClass}`)[0];\n      } else {\n        gesture.imageWrapEl = undefined;\n      }\n    }\n    if (!gesture.imageEl || !gesture.imageWrapEl) return;\n    if (swiper.params.cssMode) {\n      swiper.wrapperEl.style.overflow = 'hidden';\n      swiper.wrapperEl.style.touchAction = 'none';\n    }\n    gesture.slideEl.classList.add(`${params.zoomedSlideClass}`);\n    let touchX;\n    let touchY;\n    let offsetX;\n    let offsetY;\n    let diffX;\n    let diffY;\n    let translateX;\n    let translateY;\n    let imageWidth;\n    let imageHeight;\n    let scaledWidth;\n    let scaledHeight;\n    let translateMinX;\n    let translateMinY;\n    let translateMaxX;\n    let translateMaxY;\n    let slideWidth;\n    let slideHeight;\n    if (typeof image.touchesStart.x === 'undefined' && e) {\n      touchX = e.pageX;\n      touchY = e.pageY;\n    } else {\n      touchX = image.touchesStart.x;\n      touchY = image.touchesStart.y;\n    }\n    const forceZoomRatio = typeof e === 'number' ? e : null;\n    if (currentScale === 1 && forceZoomRatio) {\n      touchX = undefined;\n      touchY = undefined;\n    }\n    zoom.scale = forceZoomRatio || gesture.imageWrapEl.getAttribute('data-swiper-zoom') || params.maxRatio;\n    currentScale = forceZoomRatio || gesture.imageWrapEl.getAttribute('data-swiper-zoom') || params.maxRatio;\n    if (e && !(currentScale === 1 && forceZoomRatio)) {\n      slideWidth = gesture.slideEl.offsetWidth;\n      slideHeight = gesture.slideEl.offsetHeight;\n      offsetX = elementOffset(gesture.slideEl).left + window.scrollX;\n      offsetY = elementOffset(gesture.slideEl).top + window.scrollY;\n      diffX = offsetX + slideWidth / 2 - touchX;\n      diffY = offsetY + slideHeight / 2 - touchY;\n      imageWidth = gesture.imageEl.offsetWidth;\n      imageHeight = gesture.imageEl.offsetHeight;\n      scaledWidth = imageWidth * zoom.scale;\n      scaledHeight = imageHeight * zoom.scale;\n      translateMinX = Math.min(slideWidth / 2 - scaledWidth / 2, 0);\n      translateMinY = Math.min(slideHeight / 2 - scaledHeight / 2, 0);\n      translateMaxX = -translateMinX;\n      translateMaxY = -translateMinY;\n      translateX = diffX * zoom.scale;\n      translateY = diffY * zoom.scale;\n      if (translateX < translateMinX) {\n        translateX = translateMinX;\n      }\n      if (translateX > translateMaxX) {\n        translateX = translateMaxX;\n      }\n      if (translateY < translateMinY) {\n        translateY = translateMinY;\n      }\n      if (translateY > translateMaxY) {\n        translateY = translateMaxY;\n      }\n    } else {\n      translateX = 0;\n      translateY = 0;\n    }\n    if (forceZoomRatio && zoom.scale === 1) {\n      gesture.originX = 0;\n      gesture.originY = 0;\n    }\n    gesture.imageWrapEl.style.transitionDuration = '300ms';\n    gesture.imageWrapEl.style.transform = `translate3d(${translateX}px, ${translateY}px,0)`;\n    gesture.imageEl.style.transitionDuration = '300ms';\n    gesture.imageEl.style.transform = `translate3d(0,0,0) scale(${zoom.scale})`;\n  }\n  function zoomOut() {\n    const zoom = swiper.zoom;\n    const params = swiper.params.zoom;\n    if (!gesture.slideEl) {\n      if (swiper.params.virtual && swiper.params.virtual.enabled && swiper.virtual) {\n        gesture.slideEl = elementChildren(swiper.slidesEl, `.${swiper.params.slideActiveClass}`)[0];\n      } else {\n        gesture.slideEl = swiper.slides[swiper.activeIndex];\n      }\n      let imageEl = gesture.slideEl.querySelector(`.${params.containerClass}`);\n      if (imageEl) {\n        imageEl = imageEl.querySelectorAll('picture, img, svg, canvas, .swiper-zoom-target')[0];\n      }\n      gesture.imageEl = imageEl;\n      if (imageEl) {\n        gesture.imageWrapEl = elementParents(gesture.imageEl, `.${params.containerClass}`)[0];\n      } else {\n        gesture.imageWrapEl = undefined;\n      }\n    }\n    if (!gesture.imageEl || !gesture.imageWrapEl) return;\n    if (swiper.params.cssMode) {\n      swiper.wrapperEl.style.overflow = '';\n      swiper.wrapperEl.style.touchAction = '';\n    }\n    zoom.scale = 1;\n    currentScale = 1;\n    gesture.imageWrapEl.style.transitionDuration = '300ms';\n    gesture.imageWrapEl.style.transform = 'translate3d(0,0,0)';\n    gesture.imageEl.style.transitionDuration = '300ms';\n    gesture.imageEl.style.transform = 'translate3d(0,0,0) scale(1)';\n    gesture.slideEl.classList.remove(`${params.zoomedSlideClass}`);\n    gesture.slideEl = undefined;\n    gesture.originX = 0;\n    gesture.originY = 0;\n  }\n\n  // Toggle Zoom\n  function zoomToggle(e) {\n    const zoom = swiper.zoom;\n    if (zoom.scale && zoom.scale !== 1) {\n      // Zoom Out\n      zoomOut();\n    } else {\n      // Zoom In\n      zoomIn(e);\n    }\n  }\n  function getListeners() {\n    const passiveListener = swiper.params.passiveListeners ? {\n      passive: true,\n      capture: false\n    } : false;\n    const activeListenerWithCapture = swiper.params.passiveListeners ? {\n      passive: false,\n      capture: true\n    } : true;\n    return {\n      passiveListener,\n      activeListenerWithCapture\n    };\n  }\n\n  // Attach/Detach Events\n  function enable() {\n    const zoom = swiper.zoom;\n    if (zoom.enabled) return;\n    zoom.enabled = true;\n    const {\n      passiveListener,\n      activeListenerWithCapture\n    } = getListeners();\n\n    // Scale image\n    swiper.wrapperEl.addEventListener('pointerdown', onGestureStart, passiveListener);\n    swiper.wrapperEl.addEventListener('pointermove', onGestureChange, activeListenerWithCapture);\n    ['pointerup', 'pointercancel', 'pointerout'].forEach(eventName => {\n      swiper.wrapperEl.addEventListener(eventName, onGestureEnd, passiveListener);\n    });\n\n    // Move image\n    swiper.wrapperEl.addEventListener('pointermove', onTouchMove, activeListenerWithCapture);\n  }\n  function disable() {\n    const zoom = swiper.zoom;\n    if (!zoom.enabled) return;\n    zoom.enabled = false;\n    const {\n      passiveListener,\n      activeListenerWithCapture\n    } = getListeners();\n\n    // Scale image\n    swiper.wrapperEl.removeEventListener('pointerdown', onGestureStart, passiveListener);\n    swiper.wrapperEl.removeEventListener('pointermove', onGestureChange, activeListenerWithCapture);\n    ['pointerup', 'pointercancel', 'pointerout'].forEach(eventName => {\n      swiper.wrapperEl.removeEventListener(eventName, onGestureEnd, passiveListener);\n    });\n\n    // Move image\n    swiper.wrapperEl.removeEventListener('pointermove', onTouchMove, activeListenerWithCapture);\n  }\n  on('init', () => {\n    if (swiper.params.zoom.enabled) {\n      enable();\n    }\n  });\n  on('destroy', () => {\n    disable();\n  });\n  on('touchStart', (_s, e) => {\n    if (!swiper.zoom.enabled) return;\n    onTouchStart(e);\n  });\n  on('touchEnd', (_s, e) => {\n    if (!swiper.zoom.enabled) return;\n    onTouchEnd(e);\n  });\n  on('doubleTap', (_s, e) => {\n    if (!swiper.animating && swiper.params.zoom.enabled && swiper.zoom.enabled && swiper.params.zoom.toggle) {\n      zoomToggle(e);\n    }\n  });\n  on('transitionEnd', () => {\n    if (swiper.zoom.enabled && swiper.params.zoom.enabled) {\n      onTransitionEnd();\n    }\n  });\n  on('slideChange', () => {\n    if (swiper.zoom.enabled && swiper.params.zoom.enabled && swiper.params.cssMode) {\n      onTransitionEnd();\n    }\n  });\n  Object.assign(swiper.zoom, {\n    enable,\n    disable,\n    in: zoomIn,\n    out: zoomOut,\n    toggle: zoomToggle\n  });\n}","export default function classesToSelector(classes = '') {\n  return `.${classes.trim().replace(/([\\.:!+\\/])/g, '\\\\$1') // eslint-disable-line\n  .replace(/ /g, '.')}`;\n}","import { createElement, elementChildren } from './utils.js';\nexport default function createElementIfNotDefined(swiper, originalParams, params, checkProps) {\n  if (swiper.params.createElements) {\n    Object.keys(checkProps).forEach(key => {\n      if (!params[key] && params.auto === true) {\n        let element = elementChildren(swiper.el, `.${checkProps[key]}`)[0];\n        if (!element) {\n          element = createElement('div', checkProps[key]);\n          element.className = checkProps[key];\n          swiper.el.append(element);\n        }\n        params[key] = element;\n        originalParams[key] = element;\n      }\n    });\n  }\n  return params;\n}","import { createElement, getSlideTransformEl } from './utils.js';\nexport default function createShadow(params, slideEl, side) {\n  const shadowClass = `swiper-slide-shadow${side ? `-${side}` : ''}`;\n  const shadowContainer = getSlideTransformEl(slideEl);\n  let shadowEl = shadowContainer.querySelector(`.${shadowClass}`);\n  if (!shadowEl) {\n    shadowEl = createElement('div', `swiper-slide-shadow${side ? `-${side}` : ''}`);\n    shadowContainer.append(shadowEl);\n  }\n  return shadowEl;\n}","export default function effectInit(params) {\n  const {\n    effect,\n    swiper,\n    on,\n    setTranslate,\n    setTransition,\n    overwriteParams,\n    perspective,\n    recreateShadows,\n    getEffectParams\n  } = params;\n  on('beforeInit', () => {\n    if (swiper.params.effect !== effect) return;\n    swiper.classNames.push(`${swiper.params.containerModifierClass}${effect}`);\n    if (perspective && perspective()) {\n      swiper.classNames.push(`${swiper.params.containerModifierClass}3d`);\n    }\n    const overwriteParamsResult = overwriteParams ? overwriteParams() : {};\n    Object.assign(swiper.params, overwriteParamsResult);\n    Object.assign(swiper.originalParams, overwriteParamsResult);\n  });\n  on('setTranslate', () => {\n    if (swiper.params.effect !== effect) return;\n    setTranslate();\n  });\n  on('setTransition', (_s, duration) => {\n    if (swiper.params.effect !== effect) return;\n    setTransition(duration);\n  });\n  on('transitionEnd', () => {\n    if (swiper.params.effect !== effect) return;\n    if (recreateShadows) {\n      if (!getEffectParams || !getEffectParams().slideShadows) return;\n      // remove shadows\n      swiper.slides.forEach(slideEl => {\n        slideEl.querySelectorAll('.swiper-slide-shadow-top, .swiper-slide-shadow-right, .swiper-slide-shadow-bottom, .swiper-slide-shadow-left').forEach(shadowEl => shadowEl.remove());\n      });\n      // create new one\n      recreateShadows();\n    }\n  });\n  let requireUpdateOnVirtual;\n  on('virtualUpdate', () => {\n    if (swiper.params.effect !== effect) return;\n    if (!swiper.slides.length) {\n      requireUpdateOnVirtual = true;\n    }\n    requestAnimationFrame(() => {\n      if (requireUpdateOnVirtual && swiper.slides && swiper.slides.length) {\n        setTranslate();\n        requireUpdateOnVirtual = false;\n      }\n    });\n  });\n}","import { getSlideTransformEl } from './utils.js';\nexport default function effectTarget(effectParams, slideEl) {\n  const transformEl = getSlideTransformEl(slideEl);\n  if (transformEl !== slideEl) {\n    transformEl.style.backfaceVisibility = 'hidden';\n    transformEl.style['-webkit-backface-visibility'] = 'hidden';\n  }\n  return transformEl;\n}","import { elementTransitionEnd } from './utils.js';\nexport default function effectVirtualTransitionEnd({\n  swiper,\n  duration,\n  transformElements,\n  allSlides\n}) {\n  const {\n    activeIndex\n  } = swiper;\n  const getSlide = el => {\n    if (!el.parentElement) {\n      // assume shadow root\n      const slide = swiper.slides.filter(slideEl => slideEl.shadowEl && slideEl.shadowEl === el.parentNode)[0];\n      return slide;\n    }\n    return el.parentElement;\n  };\n  if (swiper.params.virtualTranslate && duration !== 0) {\n    let eventTriggered = false;\n    let transitionEndTarget;\n    if (allSlides) {\n      transitionEndTarget = transformElements;\n    } else {\n      transitionEndTarget = transformElements.filter(transformEl => {\n        const el = transformEl.classList.contains('swiper-slide-transform') ? getSlide(transformEl) : transformEl;\n        return swiper.getSlideIndex(el) === activeIndex;\n      });\n    }\n    transitionEndTarget.forEach(el => {\n      elementTransitionEnd(el, () => {\n        if (eventTriggered) return;\n        if (!swiper || swiper.destroyed) return;\n        eventTriggered = true;\n        swiper.animating = false;\n        const evt = new window.CustomEvent('transitionend', {\n          bubbles: true,\n          cancelable: true\n        });\n        swiper.wrapperEl.dispatchEvent(evt);\n      });\n    });\n  }\n}","import { getWindow } from 'ssr-window';\nlet browser;\nfunction calcBrowser() {\n  const window = getWindow();\n  let needPerspectiveFix = false;\n  function isSafari() {\n    const ua = window.navigator.userAgent.toLowerCase();\n    return ua.indexOf('safari') >= 0 && ua.indexOf('chrome') < 0 && ua.indexOf('android') < 0;\n  }\n  if (isSafari()) {\n    const ua = String(window.navigator.userAgent);\n    if (ua.includes('Version/')) {\n      const [major, minor] = ua.split('Version/')[1].split(' ')[0].split('.').map(num => Number(num));\n      needPerspectiveFix = major < 16 || major === 16 && minor < 2;\n    }\n  }\n  return {\n    isSafari: needPerspectiveFix || isSafari(),\n    needPerspectiveFix,\n    isWebView: /(iPhone|iPod|iPad).*AppleWebKit(?!.*Safari)/i.test(window.navigator.userAgent)\n  };\n}\nfunction getBrowser() {\n  if (!browser) {\n    browser = calcBrowser();\n  }\n  return browser;\n}\nexport { getBrowser };","import { getWindow } from 'ssr-window';\nimport { getSupport } from './get-support.js';\nlet deviceCached;\nfunction calcDevice({\n  userAgent\n} = {}) {\n  const support = getSupport();\n  const window = getWindow();\n  const platform = window.navigator.platform;\n  const ua = userAgent || window.navigator.userAgent;\n  const device = {\n    ios: false,\n    android: false\n  };\n  const screenWidth = window.screen.width;\n  const screenHeight = window.screen.height;\n  const android = ua.match(/(Android);?[\\s\\/]+([\\d.]+)?/); // eslint-disable-line\n  let ipad = ua.match(/(iPad).*OS\\s([\\d_]+)/);\n  const ipod = ua.match(/(iPod)(.*OS\\s([\\d_]+))?/);\n  const iphone = !ipad && ua.match(/(iPhone\\sOS|iOS)\\s([\\d_]+)/);\n  const windows = platform === 'Win32';\n  let macos = platform === 'MacIntel';\n\n  // iPadOs 13 fix\n  const iPadScreens = ['1024x1366', '1366x1024', '834x1194', '1194x834', '834x1112', '1112x834', '768x1024', '1024x768', '820x1180', '1180x820', '810x1080', '1080x810'];\n  if (!ipad && macos && support.touch && iPadScreens.indexOf(`${screenWidth}x${screenHeight}`) >= 0) {\n    ipad = ua.match(/(Version)\\/([\\d.]+)/);\n    if (!ipad) ipad = [0, 1, '13_0_0'];\n    macos = false;\n  }\n\n  // Android\n  if (android && !windows) {\n    device.os = 'android';\n    device.android = true;\n  }\n  if (ipad || iphone || ipod) {\n    device.os = 'ios';\n    device.ios = true;\n  }\n\n  // Export object\n  return device;\n}\nfunction getDevice(overrides = {}) {\n  if (!deviceCached) {\n    deviceCached = calcDevice(overrides);\n  }\n  return deviceCached;\n}\nexport { getDevice };","import { getWindow, getDocument } from 'ssr-window';\nlet support;\nfunction calcSupport() {\n  const window = getWindow();\n  const document = getDocument();\n  return {\n    smoothScroll: document.documentElement && 'scrollBehavior' in document.documentElement.style,\n    touch: !!('ontouchstart' in window || window.DocumentTouch && document instanceof window.DocumentTouch)\n  };\n}\nfunction getSupport() {\n  if (!support) {\n    support = calcSupport();\n  }\n  return support;\n}\nexport { getSupport };","export const processLazyPreloader = (swiper, imageEl) => {\n  if (!swiper || swiper.destroyed || !swiper.params) return;\n  const slideSelector = () => swiper.isElement ? `swiper-slide` : `.${swiper.params.slideClass}`;\n  const slideEl = imageEl.closest(slideSelector());\n  if (slideEl) {\n    const lazyEl = slideEl.querySelector(`.${swiper.params.lazyPreloaderClass}`);\n    if (lazyEl) lazyEl.remove();\n  }\n};\nconst unlazy = (swiper, index) => {\n  if (!swiper.slides[index]) return;\n  const imageEl = swiper.slides[index].querySelector('[loading=\"lazy\"]');\n  if (imageEl) imageEl.removeAttribute('loading');\n};\nexport const preload = swiper => {\n  if (!swiper || swiper.destroyed || !swiper.params) return;\n  let amount = swiper.params.lazyPreloadPrevNext;\n  const len = swiper.slides.length;\n  if (!len || !amount || amount < 0) return;\n  amount = Math.min(amount, len);\n  const slidesPerView = swiper.params.slidesPerView === 'auto' ? swiper.slidesPerViewDynamic() : Math.ceil(swiper.params.slidesPerView);\n  const activeIndex = swiper.activeIndex;\n  const slideIndexLastInView = activeIndex + slidesPerView - 1;\n  if (swiper.params.rewind) {\n    for (let i = activeIndex - amount; i <= slideIndexLastInView + amount; i += 1) {\n      const realIndex = (i % len + len) % len;\n      if (realIndex !== activeIndex && realIndex > slideIndexLastInView) unlazy(swiper, realIndex);\n    }\n  } else {\n    for (let i = Math.max(slideIndexLastInView - amount, 0); i <= Math.min(slideIndexLastInView + amount, len - 1); i += 1) {\n      if (i !== activeIndex && i > slideIndexLastInView) unlazy(swiper, i);\n    }\n  }\n};","import { getWindow, getDocument } from 'ssr-window';\nfunction deleteProps(obj) {\n  const object = obj;\n  Object.keys(object).forEach(key => {\n    try {\n      object[key] = null;\n    } catch (e) {\n      // no getter for object\n    }\n    try {\n      delete object[key];\n    } catch (e) {\n      // something got wrong\n    }\n  });\n}\nfunction nextTick(callback, delay = 0) {\n  return setTimeout(callback, delay);\n}\nfunction now() {\n  return Date.now();\n}\nfunction getComputedStyle(el) {\n  const window = getWindow();\n  let style;\n  if (window.getComputedStyle) {\n    style = window.getComputedStyle(el, null);\n  }\n  if (!style && el.currentStyle) {\n    style = el.currentStyle;\n  }\n  if (!style) {\n    style = el.style;\n  }\n  return style;\n}\nfunction getTranslate(el, axis = 'x') {\n  const window = getWindow();\n  let matrix;\n  let curTransform;\n  let transformMatrix;\n  const curStyle = getComputedStyle(el, null);\n  if (window.WebKitCSSMatrix) {\n    curTransform = curStyle.transform || curStyle.webkitTransform;\n    if (curTransform.split(',').length > 6) {\n      curTransform = curTransform.split(', ').map(a => a.replace(',', '.')).join(', ');\n    }\n    // Some old versions of Webkit choke when 'none' is passed; pass\n    // empty string instead in this case\n    transformMatrix = new window.WebKitCSSMatrix(curTransform === 'none' ? '' : curTransform);\n  } else {\n    transformMatrix = curStyle.MozTransform || curStyle.OTransform || curStyle.MsTransform || curStyle.msTransform || curStyle.transform || curStyle.getPropertyValue('transform').replace('translate(', 'matrix(1, 0, 0, 1,');\n    matrix = transformMatrix.toString().split(',');\n  }\n  if (axis === 'x') {\n    // Latest Chrome and webkits Fix\n    if (window.WebKitCSSMatrix) curTransform = transformMatrix.m41;\n    // Crazy IE10 Matrix\n    else if (matrix.length === 16) curTransform = parseFloat(matrix[12]);\n    // Normal Browsers\n    else curTransform = parseFloat(matrix[4]);\n  }\n  if (axis === 'y') {\n    // Latest Chrome and webkits Fix\n    if (window.WebKitCSSMatrix) curTransform = transformMatrix.m42;\n    // Crazy IE10 Matrix\n    else if (matrix.length === 16) curTransform = parseFloat(matrix[13]);\n    // Normal Browsers\n    else curTransform = parseFloat(matrix[5]);\n  }\n  return curTransform || 0;\n}\nfunction isObject(o) {\n  return typeof o === 'object' && o !== null && o.constructor && Object.prototype.toString.call(o).slice(8, -1) === 'Object';\n}\nfunction isNode(node) {\n  // eslint-disable-next-line\n  if (typeof window !== 'undefined' && typeof window.HTMLElement !== 'undefined') {\n    return node instanceof HTMLElement;\n  }\n  return node && (node.nodeType === 1 || node.nodeType === 11);\n}\nfunction extend(...args) {\n  const to = Object(args[0]);\n  const noExtend = ['__proto__', 'constructor', 'prototype'];\n  for (let i = 1; i < args.length; i += 1) {\n    const nextSource = args[i];\n    if (nextSource !== undefined && nextSource !== null && !isNode(nextSource)) {\n      const keysArray = Object.keys(Object(nextSource)).filter(key => noExtend.indexOf(key) < 0);\n      for (let nextIndex = 0, len = keysArray.length; nextIndex < len; nextIndex += 1) {\n        const nextKey = keysArray[nextIndex];\n        const desc = Object.getOwnPropertyDescriptor(nextSource, nextKey);\n        if (desc !== undefined && desc.enumerable) {\n          if (isObject(to[nextKey]) && isObject(nextSource[nextKey])) {\n            if (nextSource[nextKey].__swiper__) {\n              to[nextKey] = nextSource[nextKey];\n            } else {\n              extend(to[nextKey], nextSource[nextKey]);\n            }\n          } else if (!isObject(to[nextKey]) && isObject(nextSource[nextKey])) {\n            to[nextKey] = {};\n            if (nextSource[nextKey].__swiper__) {\n              to[nextKey] = nextSource[nextKey];\n            } else {\n              extend(to[nextKey], nextSource[nextKey]);\n            }\n          } else {\n            to[nextKey] = nextSource[nextKey];\n          }\n        }\n      }\n    }\n  }\n  return to;\n}\nfunction setCSSProperty(el, varName, varValue) {\n  el.style.setProperty(varName, varValue);\n}\nfunction animateCSSModeScroll({\n  swiper,\n  targetPosition,\n  side\n}) {\n  const window = getWindow();\n  const startPosition = -swiper.translate;\n  let startTime = null;\n  let time;\n  const duration = swiper.params.speed;\n  swiper.wrapperEl.style.scrollSnapType = 'none';\n  window.cancelAnimationFrame(swiper.cssModeFrameID);\n  const dir = targetPosition > startPosition ? 'next' : 'prev';\n  const isOutOfBound = (current, target) => {\n    return dir === 'next' && current >= target || dir === 'prev' && current <= target;\n  };\n  const animate = () => {\n    time = new Date().getTime();\n    if (startTime === null) {\n      startTime = time;\n    }\n    const progress = Math.max(Math.min((time - startTime) / duration, 1), 0);\n    const easeProgress = 0.5 - Math.cos(progress * Math.PI) / 2;\n    let currentPosition = startPosition + easeProgress * (targetPosition - startPosition);\n    if (isOutOfBound(currentPosition, targetPosition)) {\n      currentPosition = targetPosition;\n    }\n    swiper.wrapperEl.scrollTo({\n      [side]: currentPosition\n    });\n    if (isOutOfBound(currentPosition, targetPosition)) {\n      swiper.wrapperEl.style.overflow = 'hidden';\n      swiper.wrapperEl.style.scrollSnapType = '';\n      setTimeout(() => {\n        swiper.wrapperEl.style.overflow = '';\n        swiper.wrapperEl.scrollTo({\n          [side]: currentPosition\n        });\n      });\n      window.cancelAnimationFrame(swiper.cssModeFrameID);\n      return;\n    }\n    swiper.cssModeFrameID = window.requestAnimationFrame(animate);\n  };\n  animate();\n}\nfunction getSlideTransformEl(slideEl) {\n  return slideEl.querySelector('.swiper-slide-transform') || slideEl.shadowEl && slideEl.shadowEl.querySelector('.swiper-slide-transform') || slideEl;\n}\nfunction findElementsInElements(elements = [], selector = '') {\n  const found = [];\n  elements.forEach(el => {\n    found.push(...el.querySelectorAll(selector));\n  });\n  return found;\n}\nfunction elementChildren(element, selector = '') {\n  return [...element.children].filter(el => el.matches(selector));\n}\nfunction createElement(tag, classes = []) {\n  const el = document.createElement(tag);\n  el.classList.add(...(Array.isArray(classes) ? classes : [classes]));\n  return el;\n}\nfunction elementOffset(el) {\n  const window = getWindow();\n  const document = getDocument();\n  const box = el.getBoundingClientRect();\n  const body = document.body;\n  const clientTop = el.clientTop || body.clientTop || 0;\n  const clientLeft = el.clientLeft || body.clientLeft || 0;\n  const scrollTop = el === window ? window.scrollY : el.scrollTop;\n  const scrollLeft = el === window ? window.scrollX : el.scrollLeft;\n  return {\n    top: box.top + scrollTop - clientTop,\n    left: box.left + scrollLeft - clientLeft\n  };\n}\nfunction elementPrevAll(el, selector) {\n  const prevEls = [];\n  while (el.previousElementSibling) {\n    const prev = el.previousElementSibling; // eslint-disable-line\n    if (selector) {\n      if (prev.matches(selector)) prevEls.push(prev);\n    } else prevEls.push(prev);\n    el = prev;\n  }\n  return prevEls;\n}\nfunction elementNextAll(el, selector) {\n  const nextEls = [];\n  while (el.nextElementSibling) {\n    const next = el.nextElementSibling; // eslint-disable-line\n    if (selector) {\n      if (next.matches(selector)) nextEls.push(next);\n    } else nextEls.push(next);\n    el = next;\n  }\n  return nextEls;\n}\nfunction elementStyle(el, prop) {\n  const window = getWindow();\n  return window.getComputedStyle(el, null).getPropertyValue(prop);\n}\nfunction elementIndex(el) {\n  let child = el;\n  let i;\n  if (child) {\n    i = 0;\n    // eslint-disable-next-line\n    while ((child = child.previousSibling) !== null) {\n      if (child.nodeType === 1) i += 1;\n    }\n    return i;\n  }\n  return undefined;\n}\nfunction elementParents(el, selector) {\n  const parents = []; // eslint-disable-line\n  let parent = el.parentElement; // eslint-disable-line\n  while (parent) {\n    if (selector) {\n      if (parent.matches(selector)) parents.push(parent);\n    } else {\n      parents.push(parent);\n    }\n    parent = parent.parentElement;\n  }\n  return parents;\n}\nfunction elementTransitionEnd(el, callback) {\n  function fireCallBack(e) {\n    if (e.target !== el) return;\n    callback.call(el, e);\n    el.removeEventListener('transitionend', fireCallBack);\n  }\n  if (callback) {\n    el.addEventListener('transitionend', fireCallBack);\n  }\n}\nfunction elementOuterSize(el, size, includeMargins) {\n  const window = getWindow();\n  if (includeMargins) {\n    return el[size === 'width' ? 'offsetWidth' : 'offsetHeight'] + parseFloat(window.getComputedStyle(el, null).getPropertyValue(size === 'width' ? 'margin-right' : 'margin-top')) + parseFloat(window.getComputedStyle(el, null).getPropertyValue(size === 'width' ? 'margin-left' : 'margin-bottom'));\n  }\n  return el.offsetWidth;\n}\nexport { animateCSSModeScroll, deleteProps, nextTick, now, getTranslate, isObject, extend, getComputedStyle, setCSSProperty, getSlideTransformEl,\n// dom\nfindElementsInElements, createElement, elementChildren, elementOffset, elementPrevAll, elementNextAll, elementStyle, elementIndex, elementParents, elementTransitionEnd, elementOuterSize };","/**\n * Swiper 9.2.4\n * Most modern mobile touch slider and framework with hardware accelerated transitions\n * https://swiperjs.com\n *\n * Copyright 2014-2023 Vladimir Kharlampidi\n *\n * Released under the MIT License\n *\n * Released on: April 21, 2023\n */\n\nexport { default as Swiper, default } from './core/core.js';\nexport { default as Virtual } from './modules/virtual/virtual.js';\nexport { default as Keyboard } from './modules/keyboard/keyboard.js';\nexport { default as Mousewheel } from './modules/mousewheel/mousewheel.js';\nexport { default as Navigation } from './modules/navigation/navigation.js';\nexport { default as Pagination } from './modules/pagination/pagination.js';\nexport { default as Scrollbar } from './modules/scrollbar/scrollbar.js';\nexport { default as Parallax } from './modules/parallax/parallax.js';\nexport { default as Zoom } from './modules/zoom/zoom.js';\nexport { default as Controller } from './modules/controller/controller.js';\nexport { default as A11y } from './modules/a11y/a11y.js';\nexport { default as History } from './modules/history/history.js';\nexport { default as HashNavigation } from './modules/hash-navigation/hash-navigation.js';\nexport { default as Autoplay } from './modules/autoplay/autoplay.js';\nexport { default as Thumbs } from './modules/thumbs/thumbs.js';\nexport { default as FreeMode } from './modules/free-mode/free-mode.js';\nexport { default as Grid } from './modules/grid/grid.js';\nexport { default as Manipulation } from './modules/manipulation/manipulation.js';\nexport { default as EffectFade } from './modules/effect-fade/effect-fade.js';\nexport { default as EffectCube } from './modules/effect-cube/effect-cube.js';\nexport { default as EffectFlip } from './modules/effect-flip/effect-flip.js';\nexport { default as EffectCoverflow } from './modules/effect-coverflow/effect-coverflow.js';\nexport { default as EffectCreative } from './modules/effect-creative/effect-creative.js';\nexport { default as EffectCards } from './modules/effect-cards/effect-cards.js';","export const getAppHeight = () => {\r\n    function getHeight (){\r\n        $('html').css('--app-height', $(window).innerHeight() + 'px');\r\n    }\r\n    getHeight();\r\n    window.addEventListener('resize', function (){\r\n        getHeight();\r\n    });\r\n}","export const getScrollWidth = () => {\r\n    setTimeout(function (){\r\n        $('html').css('--scroll-width', $(window).outerWidth() - $(document).width() + 'px');\r\n    },3500);\r\n}","export const headerScrollChange = () => {\r\n    $(window).scroll(function() {\r\n        var scroll = $(this).scrollTop();\r\n        if(scroll > 0) {\r\n            $('.header').addClass('scroll');\r\n        } else {\r\n            $('.header').removeClass('scroll');\r\n        }\r\n    });\r\n}\r\n","export const menuBtn = () => {\r\n    // open menu\r\n    $('#hamburger').on('click', function (){\r\n        $('body').toggleClass('overflow menu-show');\r\n        $(this).toggleClass('is-active');\r\n        $('#main-menu').toggleClass('show');\r\n    });\r\n    // close menu\r\n    $(document).click(function (e) {\r\n        if($('#main-menu').has(e.target).length === 0 && $('#hamburger').has(e.target).length === 0 && $('#main-menu').hasClass('show') && !e.target.classList.contains('hamburger')){\r\n            $('body').removeClass('overflow menu-show');\r\n            $('#hamburger').removeClass('is-active');\r\n            $('#main-menu').removeClass('show');\r\n        }\r\n    });\r\n}","export const videoModal = () => {\r\n    $('.js-video-modal').magnificPopup({\r\n        type: 'iframe',\r\n        mainClass: 'mfp-fade',\r\n        tClose: 'Закрыть',\r\n        tLoading: 'Загрузка',\r\n        fixedContentPos: false,\r\n        removalDelay: 160,\r\n        preloader: false,\r\n        callbacks: {\r\n            open: () => {\r\n                $('body').addClass('overflow');\r\n            },\r\n            close: () => {\r\n                $('body').removeClass('overflow');\r\n            }\r\n        }\r\n    });\r\n};\r\nexport const simpleModal = () => {\r\n    $('.js-simple-modal').magnificPopup({\r\n        type: 'inline',\r\n        mainClass: 'mfp-fade',\r\n        tClose: 'Закрыть',\r\n        tLoading: 'Загрузка',\r\n        removalDelay: 160,\r\n        closeBtnInside: true,\r\n        fixedContentPos: true,\r\n        closeMarkup: '<button title=\"%title%\" type=\"button\" class=\"mfp-close\"><i class=\"icon icon-close_icon\"></i><svg class=\"close-line\" width=\"64\" height=\"65\" viewBox=\"0 0 64 65\" fill=\"none\" xmlns=\"http://www.w3.org/2000/svg\"><path d=\"M44.1255 1C44.1255 1 4.43328 2.92676 1.13692 38.7616C-2.15943 74.5964 55.0944 68.0456 61.6893 45.3124C68.2841 22.5793 48.9491 9.86249 27.0663 15.642\" stroke=\"#D74F29\"/></svg></button>',\r\n        preloader: false,\r\n        callbacks: {\r\n            open: () => {\r\n                $('body').addClass('overflow');\r\n            },\r\n            close: () => {\r\n                $('body').removeClass('overflow');\r\n            }\r\n        }\r\n    });\r\n};\r\nexport const galleryModal = (galleryBlock) => {\r\n    $(galleryBlock).magnificPopup({\r\n        delegate: 'a',\r\n        type: 'image',\r\n        mainClass: 'mfp-fade',\r\n        tClose: 'Закрыть',\r\n        tLoading: 'Загрузка',\r\n        gallery: {\r\n            enabled: true,\r\n            tPrev: 'Назад',\r\n            tNext: 'Вперед',\r\n            tCounter: '<span class=\"mfp-counter\"><span class=\"active\">%curr%</span> / <span>%total%</span></span>'\r\n        },\r\n        image: {\r\n            tError: 'Ошибка загрузки',\r\n        }\r\n    });\r\n};","export const scrollTo = (selector, offset) => {\r\n    $(\"body\").on('click', selector, function(e){\r\n        $('html,body').stop().animate({ scrollTop: $('#' + $(this).attr('data-section')).offset().top - offset }, 1000);\r\n        e.preventDefault();\r\n    });\r\n}","import 'lazysizes/plugins/bgset/ls.bgset.js';\r\nimport 'lazysizes/plugins/parent-fit/ls.parent-fit.js';\r\n// slider\r\nimport Swiper, {Navigation, Manipulation, Pagination, Keyboard, EffectFade, Autoplay, Mousewheel, EffectCreative, FreeMode, Thumbs} from \"swiper\";\r\nimport gsap from \"gsap\";\r\nimport { Draggable } from \"gsap/Draggable\";\r\nimport { Flip } from \"gsap/Flip\";\r\n\r\n// functions\r\nimport {headerScrollChange} from \"./_func/_jq/headerScrollChange\";\r\nimport {getAppHeight} from \"./_func/_jq/getAppHeight\";\r\nimport {getScrollWidth} from \"./_func/_jq/getScrollWidth\";\r\nimport {menuBtn} from \"./_func/_jq/menuBtn\";\r\nimport {simpleModal} from \"./_func/_jq/modalMagnific\";\r\nimport {scrollTo} from \"./_func/_jq/scrollTo\";\r\n/* ------------------- */\r\n// preloader\r\nvar interval_index = 0;\r\nfunction progress() {\r\n    if (interval_index == 0) {\r\n        interval_index = 1;\r\n        var elem = $(\"#preloader\"),\r\n            width = 0,\r\n            id = setInterval(frame, 22);\r\n        function frame() {\r\n            if (width >= 100) {\r\n                clearInterval(id);\r\n                interval_index = 0;\r\n                elem.find('.preloader__percent').addClass('done');\r\n                elem.addClass('hide').delay(500).fadeOut(500);\r\n                $('body').removeClass('overflow');\r\n            } else {\r\n                width++;\r\n                elem.find('.current-line').css('width', width + '%');\r\n                elem.find('.preloader__percent').html(width + '%');\r\n            }\r\n        }\r\n    }\r\n}\r\nprogress();\r\n\r\ndocument.addEventListener('DOMContentLoaded', () => {\r\n    // app height\r\n    getAppHeight();\r\n    // scroll width\r\n    getScrollWidth();\r\n    // scroll header change\r\n    headerScrollChange();\r\n    // mobile menu\r\n    menuBtn();\r\n\r\n    /* animation */\r\n    var wow = new WOW(\r\n        {\r\n            boxClass:     'wow',        // animated element css class\r\n            animateClass: 'animated',   // animation css class\r\n            offset:       200,          // distance to the element when triggering the animation\r\n            mobile:       true,        // trigger animations on mobile devices\r\n            live:         true,         // act on asynchronously loaded content\r\n            callback:     function(box) {\r\n                box.classList.add('custom-animate');\r\n            }\r\n        }\r\n    );\r\n    wow.init();\r\n\r\n    /* main menu */\r\n    $('.main-menu__item').hover(\r\n        function (event){\r\n            event.stopPropagation();\r\n            $(this).addClass('active');\r\n            if($(this).hasClass('submenu-item')){\r\n                $(this).find('.submenu-wrapper').stop(true, true).slideDown(500);\r\n            }\r\n        },\r\n        function (event){\r\n            event.stopPropagation();\r\n            $(this).removeClass('active');\r\n            if($(this).hasClass('submenu-item')){\r\n                $(this).find('.submenu-wrapper').stop(true, true).slideUp(500);\r\n            }\r\n    });\r\n    $('.submenu-list__item').hover(\r\n        function (event){\r\n            event.stopPropagation();\r\n            $(this).addClass('active');\r\n            if($(this).hasClass('submenu-item')){\r\n                $(this).find('.thirdmenu-wrapper').stop(true, true).show();\r\n            }\r\n        },\r\n        function (event){\r\n            event.stopPropagation();\r\n            $(this).removeClass('active');\r\n            if($(this).hasClass('submenu-item')){\r\n                $(this).find('.thirdmenu-wrapper').stop(true, true).hide();\r\n            }\r\n    });\r\n    /* main page */\r\n    if($('#main-slider').length > 0){\r\n        const workCheck = function (scroll){\r\n            if(scroll == 0){\r\n                mainSlider.mousewheel.enable();\r\n            }\r\n        }\r\n        var mainSlider = new Swiper(\"#main-slider\", {\r\n            modules: [ Mousewheel ],\r\n            direction: \"horizontal\",\r\n            slidesPerView: 'auto',\r\n            speed: 800,\r\n            spaceBetween: 15,\r\n            watchOverflow: true,\r\n            init: false,\r\n            mousewheel: {\r\n                sensitivity: 2,\r\n                eventsTarget: '.main-page'\r\n            },\r\n            on: {\r\n                transitionEnd: function (){\r\n                    if (mainSlider.isEnd) {\r\n                        mainSlider.mousewheel.disable();\r\n                        window.removeEventListener('scroll', workCheck);\r\n                    }\r\n                }\r\n            },\r\n            breakpoints: {\r\n                1801: {\r\n                    spaceBetween: 50,\r\n                    direction: \"vertical\",\r\n                    mousewheel: {\r\n                        sensitivity: 2,\r\n                        eventsTarget: '.main-page'\r\n                    },\r\n                },\r\n                960: {\r\n                    direction: \"vertical\",\r\n                    mousewheel: {\r\n                        sensitivity: 2,\r\n                        eventsTarget: '.main-page'\r\n                    },\r\n                },\r\n                576: {\r\n                    spaceBetween: 30\r\n                }\r\n            }\r\n        });\r\n        mainSlider.init();\r\n        $(window).scroll(function (){\r\n            workCheck(this.pageYOffset);\r\n        })\r\n    }\r\n    // news slider\r\n    var newsSlider = new Swiper('#news-slider', {\r\n        modules: [ Pagination ],\r\n        speed: 800,\r\n        loop: false,\r\n        grabCursor: true,\r\n        slidesPerView: 'auto',\r\n        spaceBetween: 20,\r\n        pagination: {\r\n            type: \"progressbar\",\r\n            el: '.swiper-pagination'\r\n        },\r\n        breakpoints: {\r\n            1201: {\r\n                slidesPerView: 4,\r\n                spaceBetween: 20,\r\n                pagination: false\r\n            },\r\n            960: {\r\n                slidesPerView: 3,\r\n                spaceBetween: 30,\r\n                pagination: false\r\n            },\r\n            576: {\r\n                slidesPerView: 2,\r\n            }\r\n        }\r\n    });\r\n    // events slider\r\n    if($('.events-slider').length > 0){\r\n        gsap.registerPlugin(Draggable, Flip);\r\n        let wheel = document.querySelector(\".wheel\"),\r\n            images = gsap.utils.toArray(\".wheel__card\");\r\n\r\n        function setup() {\r\n            let radius = wheel.offsetWidth / 2,\r\n                center = radius,\r\n                slice = 9,\r\n                DEG2RAD = Math.PI / 180;\r\n            gsap.set(images, {\r\n                x: i => center + radius * Math.sin(i * slice * DEG2RAD),\r\n                y: i => center - radius * Math.cos(i * slice * DEG2RAD),\r\n                rotation: i => i * slice,\r\n                xPercent: -50,\r\n                yPercent: -50\r\n            });\r\n        }\r\n        setup();\r\n\r\n        window.addEventListener(\"resize\", setup);\r\n        Draggable.create(wheel, {\r\n            allowContextMenu: true,\r\n            type: \"rotation\",\r\n            trigger: wheel,\r\n            inertia: true,\r\n            snap: {\r\n                rotation: gsap.utils.snap(100 / images.length)\r\n            }\r\n\r\n        });\r\n        gsap.to(wheel, {\r\n            rotation: -100,\r\n            ease: \"none\",\r\n            duration: 80,\r\n            repeat: -1\r\n        });\r\n    }\r\n    /*\r\n    var eventsSlider = new Swiper('#events-slider', {\r\n        speed: 800,\r\n        loop: true,\r\n        grabCursor: true,\r\n        centeredSlides: true,\r\n        initialSlide: 3,\r\n        slidesPerView: 'auto'\r\n    });\r\n     */\r\n\r\n    /* restaurant sliders */\r\n    // first slider\r\n    var smallSlider = new Swiper(\"#small-slider\", {\r\n        modules: [Autoplay],\r\n        loop: true,\r\n        slidesPerView: 1,\r\n        spaceBetween: 0,\r\n        speed: 800,\r\n        grabCursor: true,\r\n        // effect: \"creative\",\r\n        autoplay: {\r\n            delay: 3000,\r\n        },\r\n        on: {\r\n            activeIndexChange: function (){\r\n                if(smallSlider.realIndex != bigSlider.realIndex){\r\n                    bigSlider.slideTo(smallSlider.realIndex);\r\n                }\r\n            }\r\n        }\r\n        /*\r\n        creativeEffect: {\r\n            prev: {\r\n                translate: ['-20%', 0, 0],\r\n            },\r\n            next: {\r\n                translate: ['100%', 0, 0],\r\n            },\r\n        }\r\n         */\r\n    });\r\n    var bigSlider = new Swiper(\"#big-slider\", {\r\n        modules: [Autoplay],\r\n        loop: true,\r\n        grabCursor: true,\r\n        speed: 800,\r\n        slidesPerView: 1,\r\n        spaceBetween: 0,\r\n        // effect: \"creative\",\r\n        autoplay: {\r\n            delay: 3000,\r\n        },\r\n        on: {\r\n            activeIndexChange: function (){\r\n                if(bigSlider.realIndex != smallSlider.realIndex){\r\n                    smallSlider.slideTo(bigSlider.realIndex);\r\n                }\r\n            }\r\n        }\r\n        /*\r\n        creativeEffect: {\r\n            prev: {\r\n                translate: ['-20%', 0, 0],\r\n            },\r\n            next: {\r\n                translate: ['100%', 0, 0],\r\n            },\r\n        }\r\n        */\r\n    });\r\n    function connectSlides(){\r\n        console.log('test');\r\n    }\r\n    // dish slider\r\n    var dishSlider = new Swiper('#dish-slider', {\r\n        speed: 800,\r\n        loop: false,\r\n        grabCursor: true,\r\n        slidesPerView: 'auto',\r\n        spaceBetween: 20,\r\n        breakpoints: {\r\n            1440: {\r\n                slidesPerView: 6,\r\n            },\r\n            1200: {\r\n                slidesPerView: 5,\r\n            },\r\n            960: {\r\n                slidesPerView: 4,\r\n            },\r\n            640: {\r\n                slidesPerView: 3,\r\n            },\r\n            414: {\r\n                slidesPerView: 2,\r\n            }\r\n        }\r\n    });\r\n\r\n\r\n    // footer form validate\r\n    /*\r\n    $('.footer .search-form').submit(function (e){\r\n        e.preventDefault();\r\n        console.log($(this).find('input[name=\"email\"]').val().indexOf('@'));\r\n        if(!$(this).find('input[name=\"email\"]').val() == '' && $(this).find('input[name=\"email\"]').val().indexOf('@') < 1){\r\n            $(this).find('input[name=\"email\"]').addClass('validate-error');\r\n        }\r\n        else{\r\n            $(this).find('input[name=\"email\"]').removeClass('validate-error');\r\n        }\r\n    })\r\n     */\r\n    /* modals */\r\n    simpleModal();\r\n    $(window).scroll(function() {\r\n        var scroll = $(this).scrollTop() + $(window).innerHeight(),\r\n            mainContent = $('.main-page').innerHeight(),\r\n            footer = $('.footer').offset().top;\r\n        if(scroll > mainContent && scroll < footer) {\r\n            $('#scrollTop').show();\r\n        } else {\r\n            $('#scrollTop').hide();\r\n        }\r\n    });\r\n    /* scroll to top */\r\n    $(\"body\").on('click', '#scrollTop', function(e){\r\n        $('html,body').stop().animate({ scrollTop: 0 }, 1000);\r\n        e.preventDefault();\r\n    });\r\n})"],"preExistingComment":"//# sourceMappingURL=data:application/json;charset=utf-8;base64,"}